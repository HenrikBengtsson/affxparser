/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class FileHeader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FileHeader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(FileHeader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FileHeader() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_FileHeader(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public FileHeader() : this(affx_fusionPINVOKE.new_FileHeader(), true) {
  }

  public void Clear() {
    affx_fusionPINVOKE.FileHeader_Clear(swigCPtr);
  }

  public void SetFilename(string p) {
    affx_fusionPINVOKE.FileHeader_SetFilename(swigCPtr, p);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFilename() {
    string ret = affx_fusionPINVOKE.FileHeader_GetFilename(swigCPtr);
    return ret;
  }

  public byte GetMagicNumber() {
    byte ret = affx_fusionPINVOKE.FileHeader_GetMagicNumber(swigCPtr);
    return ret;
  }

  public byte GetVersion() {
    byte ret = affx_fusionPINVOKE.FileHeader_GetVersion(swigCPtr);
    return ret;
  }

  public int GetDataGroupCnt() {
    int ret = affx_fusionPINVOKE.FileHeader_GetDataGroupCnt(swigCPtr);
    return ret;
  }

  public void AddDataGroupHdr(DataGroupHeader p) {
    affx_fusionPINVOKE.FileHeader_AddDataGroupHdr(swigCPtr, DataGroupHeader.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataGroupHeader GetDataGroup(int index) {
    DataGroupHeader ret = new DataGroupHeader(affx_fusionPINVOKE.FileHeader_GetDataGroup(swigCPtr, index), false);
    return ret;
  }

  public DataGroupHeader GetDataGroupConst(int index) {
    DataGroupHeader ret = new DataGroupHeader(affx_fusionPINVOKE.FileHeader_GetDataGroupConst(swigCPtr, index), false);
    return ret;
  }

  public void GetDataGroupIts(SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator begin, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator end) {
    affx_fusionPINVOKE.FileHeader_GetDataGroupIts(swigCPtr, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator.getCPtr(begin), SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator.getCPtr(end));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGenericDataHdr(GenericDataHeader p) {
    affx_fusionPINVOKE.FileHeader_SetGenericDataHdr(swigCPtr, GenericDataHeader.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericDataHeader GetGenericDataHdr() {
    IntPtr cPtr = affx_fusionPINVOKE.FileHeader_GetGenericDataHdr(swigCPtr);
    GenericDataHeader ret = (cPtr == IntPtr.Zero) ? null : new GenericDataHeader(cPtr, false);
    return ret;
  }

  public DataGroupHeader FindDataGroupHeader(SWIGTYPE_p_std__wstring name) {
    IntPtr cPtr = affx_fusionPINVOKE.FileHeader_FindDataGroupHeader(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name));
    DataGroupHeader ret = (cPtr == IntPtr.Zero) ? null : new DataGroupHeader(cPtr, false);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumDataGroups() {
    int ret = affx_fusionPINVOKE.FileHeader_GetNumDataGroups(swigCPtr);
    return ret;
  }

  public void SetNumDataGroups(int value) {
    affx_fusionPINVOKE.FileHeader_SetNumDataGroups(swigCPtr, value);
  }

  public uint GetFirstDataGroupFilePos() {
    uint ret = affx_fusionPINVOKE.FileHeader_GetFirstDataGroupFilePos(swigCPtr);
    return ret;
  }

  public void SetFirstDataGroupFilePos(uint value) {
    affx_fusionPINVOKE.FileHeader_SetFirstDataGroupFilePos(swigCPtr, value);
  }

}
