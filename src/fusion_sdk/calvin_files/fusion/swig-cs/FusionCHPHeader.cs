/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class FusionCHPHeader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FusionCHPHeader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(FusionCHPHeader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FusionCHPHeader() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_FusionCHPHeader(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public FusionCHPHeader() : this(affx_fusionPINVOKE.new_FusionCHPHeader(), true) {
  }

  public int GetCols() {
    int ret = affx_fusionPINVOKE.FusionCHPHeader_GetCols(swigCPtr);
    return ret;
  }

  public int GetRows() {
    int ret = affx_fusionPINVOKE.FusionCHPHeader_GetRows(swigCPtr);
    return ret;
  }

  public int GetNumProbeSets() {
    int ret = affx_fusionPINVOKE.FusionCHPHeader_GetNumProbeSets(swigCPtr);
    return ret;
  }

  public AssayType GetAssayType() {
    AssayType ret = (AssayType)affx_fusionPINVOKE.FusionCHPHeader_GetAssayType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetChipType() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetChipType(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetAlgName() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetAlgName(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetAlgVersion() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetAlgVersion(swigCPtr), true);
    return ret;
  }

  public void AlgorithmParameters(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t values) {
    affx_fusionPINVOKE.FusionCHPHeader_AlgorithmParameters(swigCPtr, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(values));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint AlgorithmParameterCount() {
    uint ret = affx_fusionPINVOKE.FusionCHPHeader_AlgorithmParameterCount(swigCPtr);
    return ret;
  }

  public void SummaryParameters(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t p) {
    affx_fusionPINVOKE.FusionCHPHeader_SummaryParameters(swigCPtr, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetParentCellFile() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetParentCellFile(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetProgID() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetProgID(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetAlgorithmParameter(SWIGTYPE_p_wchar_t tag) {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetAlgorithmParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag)), true);
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetSummaryParameter(SWIGTYPE_p_wchar_t tag) {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.FusionCHPHeader_GetSummaryParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag)), true);
    return ret;
  }

  public void GetBackgroundZoneInfo(BackgroundZoneInfo info) {
    affx_fusionPINVOKE.FusionCHPHeader_GetBackgroundZoneInfo(swigCPtr, BackgroundZoneInfo.getCPtr(info));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBackgroundZones(SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t zones) {
    affx_fusionPINVOKE.FusionCHPHeader_GetBackgroundZones(swigCPtr, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t.getCPtr(zones));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBackgroundZone(BackgroundZoneType type, int x, int y) {
    affx_fusionPINVOKE.FusionCHPHeader_GetBackgroundZone(swigCPtr, BackgroundZoneType.getCPtr(type), x, y);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetMagic() {
    int ret = affx_fusionPINVOKE.FusionCHPHeader_GetMagic(swigCPtr);
    return ret;
  }

  public int GetVersion() {
    int ret = affx_fusionPINVOKE.FusionCHPHeader_GetVersion(swigCPtr);
    return ret;
  }

  public void CheckAdapter() {
    affx_fusionPINVOKE.FusionCHPHeader_CheckAdapter(swigCPtr);
  }

}
