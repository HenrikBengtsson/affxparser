/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class affx_fusion {
  public static int ARRAY_FILE_CREATEION_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_ARRAY_FILE_CREATEION_ACTION();
      return ret;
    } 
  }

  public static int ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION();
      return ret;
    } 
  }

  public static int FLUIDICS_INSTRUMENT_CONTROL_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_FLUIDICS_INSTRUMENT_CONTROL_ACTION();
      return ret;
    } 
  }

  public static int SCAN_INSTRUMENT_CONTROL_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_SCAN_INSTRUMENT_CONTROL_ACTION();
      return ret;
    } 
  }

  public static byte MAGIC_NUM {
    get {
      byte ret = affx_fusionPINVOKE.get_MAGIC_NUM();
      return ret;
    } 
  }

  public static byte VERSION {
    get {
      byte ret = affx_fusionPINVOKE.get_VERSION();
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string SCAN_ACQUISITION_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_SCAN_ACQUISITION_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string INTENSITY_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_INTENSITY_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string EXPRESSION_RESULTS_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_EXPRESSION_RESULTS_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string GENOTYPING_RESULTS_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_GENOTYPING_RESULTS_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string RESEQUENCING_RESULTS_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_RESEQUENCING_RESULTS_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string TAG_RESULTS_DATA_TYPE {
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_TAG_RESULTS_DATA_TYPE();
      SWIGTYPE_p_std__string ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

  public static int TEMPLATE_FILE_CREATEION_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_TEMPLATE_FILE_CREATEION_ACTION();
      return ret;
    } 
  }

  public static int TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION {
    get {
      int ret = affx_fusionPINVOKE.get_TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION();
      return ret;
    } 
  }

  public static void ReadUInt32_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_int val) {
    affx_fusionPINVOKE.ReadUInt32_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_int.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadInt32_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_int val) {
    affx_fusionPINVOKE.ReadInt32_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_int.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFloat_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_float val) {
    affx_fusionPINVOKE.ReadFloat_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_float.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUInt16_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_short val) {
    affx_fusionPINVOKE.ReadUInt16_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_short.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadInt16_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_short val) {
    affx_fusionPINVOKE.ReadInt16_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_short.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadCString_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_p_char str) {
    affx_fusionPINVOKE.ReadCString_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_p_char.getCPtr(str));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadString_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_std__string str) {
    affx_fusionPINVOKE.ReadString_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_std__string.getCPtr(str));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUIntLenString_I(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_std__string s) {
    affx_fusionPINVOKE.ReadUIntLenString_I(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_std__string.getCPtr(s));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUInt8(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_char val) {
    affx_fusionPINVOKE.ReadUInt8(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_char.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadInt8(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_char val) {
    affx_fusionPINVOKE.ReadInt8(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_char.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUInt32_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_int val) {
    affx_fusionPINVOKE.ReadUInt32_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_int.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadInt32_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_int val) {
    affx_fusionPINVOKE.ReadInt32_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_int.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFloat_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_float val) {
    affx_fusionPINVOKE.ReadFloat_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_float.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUInt16_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_short val) {
    affx_fusionPINVOKE.ReadUInt16_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_short.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadInt16_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_short val) {
    affx_fusionPINVOKE.ReadInt16_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_short.getCPtr(val));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadCString_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_p_char str) {
    affx_fusionPINVOKE.ReadCString_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_p_char.getCPtr(str));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadString_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_std__string str) {
    affx_fusionPINVOKE.ReadString_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_std__string.getCPtr(str));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadUIntLenString_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_std__string s) {
    affx_fusionPINVOKE.ReadUIntLenString_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_std__string.getCPtr(s));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFixedString(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_std__string str, uint len) {
    affx_fusionPINVOKE.ReadFixedString(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_std__string.getCPtr(str), len);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFixedCString(SWIGTYPE_p_std__istream instr, string str, uint len) {
    affx_fusionPINVOKE.ReadFixedCString(SWIGTYPE_p_std__istream.getCPtr(instr), str, len);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFixedUCString(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_unsigned_char str, uint len) {
    affx_fusionPINVOKE.ReadFixedUCString(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_unsigned_char.getCPtr(str), len);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadCharacterArray(SWIGTYPE_p_std__istream instr, string str, uint len) {
    affx_fusionPINVOKE.ReadCharacterArray(SWIGTYPE_p_std__istream.getCPtr(instr), str, len);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadNextLine(SWIGTYPE_p_std__istream instr, string line, int len) {
    affx_fusionPINVOKE.ReadNextLine(SWIGTYPE_p_std__istream.getCPtr(instr), line, len);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ReadFloatFromOldBPMAP_N(SWIGTYPE_p_std__istream instr, SWIGTYPE_p_float fval) {
    affx_fusionPINVOKE.ReadFloatFromOldBPMAP_N(SWIGTYPE_p_std__istream.getCPtr(instr), SWIGTYPE_p_float.getCPtr(fval));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint MmGetUInt32_I(SWIGTYPE_p_unsigned_int ptr) {
    uint ret = affx_fusionPINVOKE.MmGetUInt32_I(SWIGTYPE_p_unsigned_int.getCPtr(ptr));
    return ret;
  }

  public static int MmGetInt32_I(SWIGTYPE_p_int ptr) {
    int ret = affx_fusionPINVOKE.MmGetInt32_I(SWIGTYPE_p_int.getCPtr(ptr));
    return ret;
  }

  public static ushort MmGetUInt16_I(SWIGTYPE_p_unsigned_short ptr) {
    ushort ret = affx_fusionPINVOKE.MmGetUInt16_I(SWIGTYPE_p_unsigned_short.getCPtr(ptr));
    return ret;
  }

  public static short MmGetInt16_I(SWIGTYPE_p_short ptr) {
    short ret = affx_fusionPINVOKE.MmGetInt16_I(SWIGTYPE_p_short.getCPtr(ptr));
    return ret;
  }

  public static byte MmGetUInt8(SWIGTYPE_p_unsigned_char ptr) {
    byte ret = affx_fusionPINVOKE.MmGetUInt8(SWIGTYPE_p_unsigned_char.getCPtr(ptr));
    return ret;
  }

  public static char MmGetInt8(string ptr) {
    char ret = affx_fusionPINVOKE.MmGetInt8(ptr);
    return ret;
  }

  public static uint MmGetUInt32_N(SWIGTYPE_p_unsigned_int ptr) {
    uint ret = affx_fusionPINVOKE.MmGetUInt32_N(SWIGTYPE_p_unsigned_int.getCPtr(ptr));
    return ret;
  }

  public static ushort MmGetUInt16_N(SWIGTYPE_p_unsigned_short ptr) {
    ushort ret = affx_fusionPINVOKE.MmGetUInt16_N(SWIGTYPE_p_unsigned_short.getCPtr(ptr));
    return ret;
  }

  public static float MmGetFloat_N(SWIGTYPE_p_float ptr) {
    float ret = affx_fusionPINVOKE.MmGetFloat_N(SWIGTYPE_p_float.getCPtr(ptr));
    return ret;
  }

  public static int MmGetInt32_N(SWIGTYPE_p_int ptr) {
    int ret = affx_fusionPINVOKE.MmGetInt32_N(SWIGTYPE_p_int.getCPtr(ptr));
    return ret;
  }

  public static short MmGetInt16_N(SWIGTYPE_p_short ptr) {
    short ret = affx_fusionPINVOKE.MmGetInt16_N(SWIGTYPE_p_short.getCPtr(ptr));
    return ret;
  }

  public static float MmGetFloat_I(SWIGTYPE_p_float ptr) {
    float ret = affx_fusionPINVOKE.MmGetFloat_I(SWIGTYPE_p_float.getCPtr(ptr));
    return ret;
  }

  public static float MmGetFloatFromOldBPMAP_N(SWIGTYPE_p_float ptr) {
    float ret = affx_fusionPINVOKE.MmGetFloatFromOldBPMAP_N(SWIGTYPE_p_float.getCPtr(ptr));
    return ret;
  }

  public static void MmSetUInt32_I(SWIGTYPE_p_unsigned_int ptr, uint val) {
    affx_fusionPINVOKE.MmSetUInt32_I(SWIGTYPE_p_unsigned_int.getCPtr(ptr), val);
  }

  public static void MmSetUInt16_I(SWIGTYPE_p_unsigned_short ptr, ushort val) {
    affx_fusionPINVOKE.MmSetUInt16_I(SWIGTYPE_p_unsigned_short.getCPtr(ptr), val);
  }

  public static void MmSetUInt8(SWIGTYPE_p_unsigned_char ptr, byte val) {
    affx_fusionPINVOKE.MmSetUInt8(SWIGTYPE_p_unsigned_char.getCPtr(ptr), val);
  }

  public static void MmSetFloat_I(SWIGTYPE_p_float ptr, float val) {
    affx_fusionPINVOKE.MmSetFloat_I(SWIGTYPE_p_float.getCPtr(ptr), val);
  }

  public static void MmSetUInt32_N(SWIGTYPE_p_unsigned_int ptr, uint val) {
    affx_fusionPINVOKE.MmSetUInt32_N(SWIGTYPE_p_unsigned_int.getCPtr(ptr), val);
  }

  public static void MmSetUInt16_N(SWIGTYPE_p_unsigned_short ptr, ushort val) {
    affx_fusionPINVOKE.MmSetUInt16_N(SWIGTYPE_p_unsigned_short.getCPtr(ptr), val);
  }

  public static void MmSetFloat_N(SWIGTYPE_p_float ptr, float val) {
    affx_fusionPINVOKE.MmSetFloat_N(SWIGTYPE_p_float.getCPtr(ptr), val);
  }

  public static void ConvertFusion(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t fromList, SWIGTYPE_p_std__listT_TagValuePairType_t toList) {
    affx_fusionPINVOKE.ConvertFusion(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(fromList), SWIGTYPE_p_std__listT_TagValuePairType_t.getCPtr(toList));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertGCOS(SWIGTYPE_p_std__listT_TagValuePairType_t fromList, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t toList) {
    affx_fusionPINVOKE.ConvertGCOS(SWIGTYPE_p_std__listT_TagValuePairType_t.getCPtr(fromList), SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(toList));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int PARAMETER_VALUE_SIGNED_INTEGRAL = affx_fusionPINVOKE.get_PARAMETER_VALUE_SIGNED_INTEGRAL();
  public static readonly int PARAMETER_VALUE_UNSIGNED_INTEGRAL = affx_fusionPINVOKE.get_PARAMETER_VALUE_UNSIGNED_INTEGRAL();
  public static readonly int PARAMETER_VALUE_FLOATING_POINT = affx_fusionPINVOKE.get_PARAMETER_VALUE_FLOATING_POINT();
  public static readonly int PARAMETER_VALUE_STRING8_TYPE = affx_fusionPINVOKE.get_PARAMETER_VALUE_STRING8_TYPE();
  public static readonly int PARAMETER_VALUE_STRING16_TYPE = affx_fusionPINVOKE.get_PARAMETER_VALUE_STRING16_TYPE();
  public static readonly string AFFY_EXPR_PS = affx_fusionPINVOKE.get_AFFY_EXPR_PS();
  public static readonly string AFFY_GENO_PS = affx_fusionPINVOKE.get_AFFY_GENO_PS();
  public static readonly string AFFY_TAG_PS = affx_fusionPINVOKE.get_AFFY_TAG_PS();
  public static readonly string AFFY_RESEQ_PS = affx_fusionPINVOKE.get_AFFY_RESEQ_PS();
  public static readonly string AFFY_CNTRL_PS = affx_fusionPINVOKE.get_AFFY_CNTRL_PS();
  public static readonly string ARRAY_FILE_TYPE_IDENTIFIER = affx_fusionPINVOKE.get_ARRAY_FILE_TYPE_IDENTIFIER();
  public static readonly int MAX_CDF_PROBE_SET_NAME_LENGTH = affx_fusionPINVOKE.get_MAX_CDF_PROBE_SET_NAME_LENGTH();
  public static readonly string AUDIT_USER_TAG = affx_fusionPINVOKE.get_AUDIT_USER_TAG();
  public static readonly string AUDIT_DATE_TAG = affx_fusionPINVOKE.get_AUDIT_DATE_TAG();
  public static readonly string AUDIT_TIME_TAG = affx_fusionPINVOKE.get_AUDIT_TIME_TAG();
  public static readonly string AUDIT_ACTION_TAG = affx_fusionPINVOKE.get_AUDIT_ACTION_TAG();
  public static readonly string AUDIT_ARRAY_ID_TAG = affx_fusionPINVOKE.get_AUDIT_ARRAY_ID_TAG();
  public static readonly string AUDIT_INPUT_ID_TAG = affx_fusionPINVOKE.get_AUDIT_INPUT_ID_TAG();
  public static readonly string AUDIT_OUTPUT_ID_TAG = affx_fusionPINVOKE.get_AUDIT_OUTPUT_ID_TAG();
  public static readonly string AUDIT_START_TAG = affx_fusionPINVOKE.get_AUDIT_START_TAG();
  public static readonly string AUDIT_END_TAG = affx_fusionPINVOKE.get_AUDIT_END_TAG();
  public static readonly string GRD_FILE_TYPE_IDENTIFIER = affx_fusionPINVOKE.get_GRD_FILE_TYPE_IDENTIFIER();
  public static readonly string TEMPLATE_FILE_TYPE_IDENTIFIER = affx_fusionPINVOKE.get_TEMPLATE_FILE_TYPE_IDENTIFIER();
  public static readonly int _AFFY_BASE_TYPE_H = affx_fusionPINVOKE.get__AFFY_BASE_TYPE_H();
  public static readonly int __int8_t_defined = affx_fusionPINVOKE.get___int8_t_defined();
  public static readonly int AFFX_FILEIO_H = affx_fusionPINVOKE.get_AFFX_FILEIO_H();
  public static readonly int MAX_PROBE_SET_NAME_LENGTH = affx_fusionPINVOKE.get_MAX_PROBE_SET_NAME_LENGTH();
  public static readonly int PROBE_SIZE = affx_fusionPINVOKE.get_PROBE_SIZE();
  public static readonly int PROBE_GROUP_SIZE = affx_fusionPINVOKE.get_PROBE_GROUP_SIZE();
  public static readonly int PROBE_SET_SIZE = affx_fusionPINVOKE.get_PROBE_SET_SIZE();
  public static readonly int QC_PROBE_SIZE = affx_fusionPINVOKE.get_QC_PROBE_SIZE();
  public static readonly int QC_PROBE_SET_SIZE = affx_fusionPINVOKE.get_QC_PROBE_SET_SIZE();
  public static readonly int ABS_PRESENT_CALL = affx_fusionPINVOKE.get_ABS_PRESENT_CALL();
  public static readonly int ABS_MARGINAL_CALL = affx_fusionPINVOKE.get_ABS_MARGINAL_CALL();
  public static readonly int ABS_ABSENT_CALL = affx_fusionPINVOKE.get_ABS_ABSENT_CALL();
  public static readonly int ABS_NO_CALL = affx_fusionPINVOKE.get_ABS_NO_CALL();
  public static readonly int COMP_INCREASE_CALL = affx_fusionPINVOKE.get_COMP_INCREASE_CALL();
  public static readonly int COMP_DECREASE_CALL = affx_fusionPINVOKE.get_COMP_DECREASE_CALL();
  public static readonly int COMP_MOD_INCREASE_CALL = affx_fusionPINVOKE.get_COMP_MOD_INCREASE_CALL();
  public static readonly int COMP_MOD_DECREASE_CALL = affx_fusionPINVOKE.get_COMP_MOD_DECREASE_CALL();
  public static readonly int COMP_NO_CHANGE_CALL = affx_fusionPINVOKE.get_COMP_NO_CHANGE_CALL();
  public static readonly int COMP_NO_CALL = affx_fusionPINVOKE.get_COMP_NO_CALL();
  public static readonly int ALLELE_A_CALL = affx_fusionPINVOKE.get_ALLELE_A_CALL();
  public static readonly int ALLELE_B_CALL = affx_fusionPINVOKE.get_ALLELE_B_CALL();
  public static readonly int ALLELE_AB_CALL = affx_fusionPINVOKE.get_ALLELE_AB_CALL();
  public static readonly int ALLELE_NO_CALL = affx_fusionPINVOKE.get_ALLELE_NO_CALL();
  public static readonly char NO_SIGNAL_THR_FORCE_CALL = affx_fusionPINVOKE.get_NO_SIGNAL_THR_FORCE_CALL();
  public static readonly char WEAK_SIGNAL_THR_FORCE_CALL = affx_fusionPINVOKE.get_WEAK_SIGNAL_THR_FORCE_CALL();
  public static readonly char SATURATION_LEVEL_FORCE_CALL = affx_fusionPINVOKE.get_SATURATION_LEVEL_FORCE_CALL();
  public static readonly char QUALITY_SCORE_THR_FORCE_CALL = affx_fusionPINVOKE.get_QUALITY_SCORE_THR_FORCE_CALL();
  public static readonly char TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL = affx_fusionPINVOKE.get_TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL();
  public static readonly char RELIABILITY_THR_FORCE_CALL = affx_fusionPINVOKE.get_RELIABILITY_THR_FORCE_CALL();
  public static readonly string BPMAP_FILE_HEADER_BYTES = affx_fusionPINVOKE.get_BPMAP_FILE_HEADER_BYTES();
  public static readonly int BPMAP_FILE_HEADER_LEN = affx_fusionPINVOKE.get_BPMAP_FILE_HEADER_LEN();
  public static readonly int PM_ONLY = affx_fusionPINVOKE.get_PM_ONLY();
  public static readonly int PM_MM = affx_fusionPINVOKE.get_PM_MM();
  public static readonly int PROBE_STORAGE_BUFFER_LENGTH = affx_fusionPINVOKE.get_PROBE_STORAGE_BUFFER_LENGTH();
  public static readonly int HIT_ITEM_SIZE_WITH_PROBE_PAIRS = affx_fusionPINVOKE.get_HIT_ITEM_SIZE_WITH_PROBE_PAIRS();
  public static readonly int HIT_ITEM_SIZE_WITH_PM_ONLY = affx_fusionPINVOKE.get_HIT_ITEM_SIZE_WITH_PM_ONLY();
  public static readonly int GRC_VERSION = affx_fusionPINVOKE.get_GRC_VERSION();
  public static readonly int GRC_MAGIC = affx_fusionPINVOKE.get_GRC_MAGIC();
  public static readonly string GCOS_SAMPLE_NAME_PARAMETER_NAME = affx_fusionPINVOKE.get_GCOS_SAMPLE_NAME_PARAMETER_NAME();
  public static readonly string GCOS_SAMPLE_TYPE_PARAMETER_NAME = affx_fusionPINVOKE.get_GCOS_SAMPLE_TYPE_PARAMETER_NAME();
  public static readonly string GCOS_SAMPLE_PROJECT_PARAMETER_NAME = affx_fusionPINVOKE.get_GCOS_SAMPLE_PROJECT_PARAMETER_NAME();
}
