/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BaseCallType : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseCallType(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseCallType obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseCallType() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_BaseCallType(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public int position {
    set {
      affx_fusionPINVOKE.set_BaseCallType_position(swigCPtr, value);
    } 
    get {
      int ret = affx_fusionPINVOKE.get_BaseCallType_position(swigCPtr);
      return ret;
    } 
  }

  public char call {
    set {
      affx_fusionPINVOKE.set_BaseCallType_call(swigCPtr, value);
    } 
    get {
      char ret = affx_fusionPINVOKE.get_BaseCallType_call(swigCPtr);
      return ret;
    } 
  }

  public BaseCallType() : this(affx_fusionPINVOKE.new_BaseCallType(), true) {
  }

}
