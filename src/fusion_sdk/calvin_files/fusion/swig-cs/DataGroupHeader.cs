/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DataGroupHeader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DataGroupHeader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DataGroupHeader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataGroupHeader() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_DataGroupHeader(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public DataGroupHeader() : this(affx_fusionPINVOKE.new_DataGroupHeader__SWIG_0(), true) {
  }

  public DataGroupHeader(SWIGTYPE_p_std__wstring n) : this(affx_fusionPINVOKE.new_DataGroupHeader__SWIG_1(SWIGTYPE_p_std__wstring.getCPtr(n)), true) {
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    affx_fusionPINVOKE.DataGroupHeader_Clear(swigCPtr);
  }

  public void SetName(SWIGTYPE_p_std__wstring p) {
    affx_fusionPINVOKE.DataGroupHeader_SetName(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetName() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.DataGroupHeader_GetName(swigCPtr), true);
    return ret;
  }

  public int GetDataSetCnt() {
    int ret = affx_fusionPINVOKE.DataGroupHeader_GetDataSetCnt(swigCPtr);
    return ret;
  }

  public void AddDataSetHdr(DataSetHeader p) {
    affx_fusionPINVOKE.DataGroupHeader_AddDataSetHdr(swigCPtr, DataSetHeader.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataSetHeader GetDataSet(int index) {
    DataSetHeader ret = new DataSetHeader(affx_fusionPINVOKE.DataGroupHeader_GetDataSet(swigCPtr, index), false);
    return ret;
  }

  public DataSetHeader GetDataSetConst(int index) {
    DataSetHeader ret = new DataSetHeader(affx_fusionPINVOKE.DataGroupHeader_GetDataSetConst(swigCPtr, index), false);
    return ret;
  }

  public void GetDataSetIterators(SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator begin, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator end) {
    affx_fusionPINVOKE.DataGroupHeader_GetDataSetIterators(swigCPtr, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator.getCPtr(begin), SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator.getCPtr(end));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDataSetPos(uint pos) {
    affx_fusionPINVOKE.DataGroupHeader_SetDataSetPos(swigCPtr, pos);
  }

  public uint GetDataSetPos() {
    uint ret = affx_fusionPINVOKE.DataGroupHeader_GetDataSetPos(swigCPtr);
    return ret;
  }

  public void SetNextCubePos(uint pos) {
    affx_fusionPINVOKE.DataGroupHeader_SetNextCubePos(swigCPtr, pos);
  }

  public uint GetNextCubePos() {
    uint ret = affx_fusionPINVOKE.DataGroupHeader_GetNextCubePos(swigCPtr);
    return ret;
  }

  public DataSetHeader FindDataSetHeader(SWIGTYPE_p_std__wstring dataSetName) {
    IntPtr cPtr = affx_fusionPINVOKE.DataGroupHeader_FindDataSetHeader(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(dataSetName));
    DataSetHeader ret = (cPtr == IntPtr.Zero) ? null : new DataSetHeader(cPtr, false);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
