/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GenericDataHeader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GenericDataHeader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GenericDataHeader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GenericDataHeader() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_GenericDataHeader(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public GenericDataHeader() : this(affx_fusionPINVOKE.new_GenericDataHeader(), true) {
  }

  public void Clear() {
    affx_fusionPINVOKE.GenericDataHeader_Clear(swigCPtr);
  }

  public void SetFileTypeId(string p) {
    affx_fusionPINVOKE.GenericDataHeader_SetFileTypeId(swigCPtr, p);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFileTypeId() {
    string ret = affx_fusionPINVOKE.GenericDataHeader_GetFileTypeId(swigCPtr);
    return ret;
  }

  public void SetFileId(string p) {
    affx_fusionPINVOKE.GenericDataHeader_SetFileId(swigCPtr, p);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFileId() {
    string ret = affx_fusionPINVOKE.GenericDataHeader_GetFileId(swigCPtr);
    return ret;
  }

  public void SetFileCreationTime(SWIGTYPE_p_std__wstring f) {
    affx_fusionPINVOKE.GenericDataHeader_SetFileCreationTime(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(f));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetFileCreationTime() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.GenericDataHeader_GetFileCreationTime(swigCPtr), true);
    return ret;
  }

  public void SetLocale(SWIGTYPE_p_std__wstring p) {
    affx_fusionPINVOKE.GenericDataHeader_SetLocale(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetLocale() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.GenericDataHeader_GetLocale(swigCPtr), true);
    return ret;
  }

  public void AddNameValParam(ParameterNameValueType p) {
    affx_fusionPINVOKE.GenericDataHeader_AddNameValParam(swigCPtr, ParameterNameValueType.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public ParameterNameValueType GetNameValParam(int index) {
    ParameterNameValueType ret = new ParameterNameValueType(affx_fusionPINVOKE.GenericDataHeader_GetNameValParam(swigCPtr, index), true);
    return ret;
  }

  public int GetNameValParamCnt() {
    int ret = affx_fusionPINVOKE.GenericDataHeader_GetNameValParamCnt(swigCPtr);
    return ret;
  }

  public void GetNameValIterators(SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator begin, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator end) {
    affx_fusionPINVOKE.GenericDataHeader_GetNameValIterators(swigCPtr, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator.getCPtr(begin), SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator.getCPtr(end));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetParentCnt() {
    int ret = affx_fusionPINVOKE.GenericDataHeader_GetParentCnt(swigCPtr);
    return ret;
  }

  public void AddParent(GenericDataHeader hdr) {
    affx_fusionPINVOKE.GenericDataHeader_AddParent(swigCPtr, GenericDataHeader.getCPtr(hdr));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericDataHeader GetParent(int index) {
    GenericDataHeader ret = new GenericDataHeader(affx_fusionPINVOKE.GenericDataHeader_GetParent(swigCPtr, index), true);
    return ret;
  }

  public void GetParentIterators(SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator begin, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator end) {
    affx_fusionPINVOKE.GenericDataHeader_GetParentIterators(swigCPtr, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator.getCPtr(begin), SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator.getCPtr(end));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool FindNameValParam(SWIGTYPE_p_std__wstring name, ParameterNameValueType result) {
    bool ret = affx_fusionPINVOKE.GenericDataHeader_FindNameValParam(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name), ParameterNameValueType.getCPtr(result));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetNameValParamsBeginsWith(SWIGTYPE_p_std__wstring beginsWith, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t p) {
    bool ret = affx_fusionPINVOKE.GenericDataHeader_GetNameValParamsBeginsWith(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(beginsWith), SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
