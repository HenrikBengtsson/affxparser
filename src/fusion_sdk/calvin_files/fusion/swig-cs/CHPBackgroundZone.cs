/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CHPBackgroundZone : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CHPBackgroundZone(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CHPBackgroundZone obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CHPBackgroundZone() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_CHPBackgroundZone(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public CHPBackgroundZone() : this(affx_fusionPINVOKE.new_CHPBackgroundZone__SWIG_0(), true) {
  }

  public CHPBackgroundZone(float x, float y, float bg, float smooth) : this(affx_fusionPINVOKE.new_CHPBackgroundZone__SWIG_1(x, y, bg, smooth), true) {
  }

  public void Clear() {
    affx_fusionPINVOKE.CHPBackgroundZone_Clear(swigCPtr);
  }

  public CHPBackgroundZone CHPBackgroundZone_assign(CHPBackgroundZone zn) {
    CHPBackgroundZone ret = new CHPBackgroundZone(affx_fusionPINVOKE.CHPBackgroundZone_CHPBackgroundZone_assign(swigCPtr, CHPBackgroundZone.getCPtr(zn)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetCenterX() {
    float ret = affx_fusionPINVOKE.CHPBackgroundZone_GetCenterX(swigCPtr);
    return ret;
  }

  public float GetCenterY() {
    float ret = affx_fusionPINVOKE.CHPBackgroundZone_GetCenterY(swigCPtr);
    return ret;
  }

  public float GetBackground() {
    float ret = affx_fusionPINVOKE.CHPBackgroundZone_GetBackground(swigCPtr);
    return ret;
  }

  public float GetSmoothFactor() {
    float ret = affx_fusionPINVOKE.CHPBackgroundZone_GetSmoothFactor(swigCPtr);
    return ret;
  }

  public void SetCenterX(float p) {
    affx_fusionPINVOKE.CHPBackgroundZone_SetCenterX(swigCPtr, p);
  }

  public void SetCenterY(float p) {
    affx_fusionPINVOKE.CHPBackgroundZone_SetCenterY(swigCPtr, p);
  }

  public void SetBackground(float p) {
    affx_fusionPINVOKE.CHPBackgroundZone_SetBackground(swigCPtr, p);
  }

  public void SetSmoothFactor(float p) {
    affx_fusionPINVOKE.CHPBackgroundZone_SetSmoothFactor(swigCPtr, p);
  }

}
