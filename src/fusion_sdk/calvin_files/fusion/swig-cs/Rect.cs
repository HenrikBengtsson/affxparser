/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Rect : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Rect(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Rect obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Rect() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_Rect(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public Rect() : this(affx_fusionPINVOKE.new_Rect__SWIG_0(), true) {
  }

  public Rect(Region r) : this(affx_fusionPINVOKE.new_Rect__SWIG_1(Region.getCPtr(r)), true) {
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public Region op_Region() {
    Region ret = new Region(affx_fusionPINVOKE.Rect_op_Region(swigCPtr), true);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = affx_fusionPINVOKE.Rect_IsEmpty(swigCPtr);
    return ret;
  }

  public Point upperleft {
    set {
      affx_fusionPINVOKE.set_Rect_upperleft(swigCPtr, Point.getCPtr(value));
    } 
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_Rect_upperleft(swigCPtr);
      Point ret = (cPtr == IntPtr.Zero) ? null : new Point(cPtr, false);
      return ret;
    } 
  }

  public Point upperright {
    set {
      affx_fusionPINVOKE.set_Rect_upperright(swigCPtr, Point.getCPtr(value));
    } 
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_Rect_upperright(swigCPtr);
      Point ret = (cPtr == IntPtr.Zero) ? null : new Point(cPtr, false);
      return ret;
    } 
  }

  public Point lowerright {
    set {
      affx_fusionPINVOKE.set_Rect_lowerright(swigCPtr, Point.getCPtr(value));
    } 
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_Rect_lowerright(swigCPtr);
      Point ret = (cPtr == IntPtr.Zero) ? null : new Point(cPtr, false);
      return ret;
    } 
  }

  public Point lowerleft {
    set {
      affx_fusionPINVOKE.set_Rect_lowerleft(swigCPtr, Point.getCPtr(value));
    } 
    get {
      IntPtr cPtr = affx_fusionPINVOKE.get_Rect_lowerleft(swigCPtr);
      Point ret = (cPtr == IntPtr.Zero) ? null : new Point(cPtr, false);
      return ret;
    } 
  }

}
