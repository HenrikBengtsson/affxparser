/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GenericFileReader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GenericFileReader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GenericFileReader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GenericFileReader() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_GenericFileReader(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public GenericFileReader() : this(affx_fusionPINVOKE.new_GenericFileReader(), true) {
  }

  public string GetFilename() {
    string ret = affx_fusionPINVOKE.GenericFileReader_GetFilename(swigCPtr);
    return ret;
  }

  public void SetFilename(string name) {
    affx_fusionPINVOKE.GenericFileReader_SetFilename(swigCPtr, name);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadHeader(GenericData data, GenericFileReader.ReadHeaderOption option) {
    affx_fusionPINVOKE.GenericFileReader_ReadHeader__SWIG_0(swigCPtr, GenericData.getCPtr(data), (int)option);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadHeader(GenericData data) {
    affx_fusionPINVOKE.GenericFileReader_ReadHeader__SWIG_1(swigCPtr, GenericData.getCPtr(data));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Open(GenericData data, GenericFileReader.OpenHint hint) {
    affx_fusionPINVOKE.GenericFileReader_Open__SWIG_0(swigCPtr, GenericData.getCPtr(data), (int)hint);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Open(GenericData data) {
    affx_fusionPINVOKE.GenericFileReader_Open__SWIG_1(swigCPtr, GenericData.getCPtr(data));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetDataGroupCnt() {
    uint ret = affx_fusionPINVOKE.GenericFileReader_GetDataGroupCnt(swigCPtr);
    return ret;
  }

  public DataGroupReader GetDataGroupReader(int index) {
    DataGroupReader ret = new DataGroupReader(affx_fusionPINVOKE.GenericFileReader_GetDataGroupReader__SWIG_0(swigCPtr, index), true);
    return ret;
  }

  public DataGroupReader GetDataGroupReader(SWIGTYPE_p_std__wstring name) {
    DataGroupReader ret = new DataGroupReader(affx_fusionPINVOKE.GenericFileReader_GetDataGroupReader__SWIG_1(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Close() {
    affx_fusionPINVOKE.GenericFileReader_Close(swigCPtr);
  }

  public enum OpenHint {
    All,
    Sequential,
    None
  }

  public enum ReadHeaderOption {
    ReadAllHeaders,
    ReadMinDataGroupHeader,
    ReadNoDataGroupHeader
  }

}
