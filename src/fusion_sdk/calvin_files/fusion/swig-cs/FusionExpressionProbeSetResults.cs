/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class FusionExpressionProbeSetResults : FusionProbeSetResults {
  private HandleRef swigCPtr;

  internal FusionExpressionProbeSetResults(IntPtr cPtr, bool cMemoryOwn) : base(affx_fusionPINVOKE.FusionExpressionProbeSetResultsUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(FusionExpressionProbeSetResults obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FusionExpressionProbeSetResults() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_FusionExpressionProbeSetResults(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public void Clear() {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_Clear(swigCPtr);
  }

  public float GetDetectionPValue() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetDetectionPValue(swigCPtr);
    return ret;
  }

  public float GetSignal() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetSignal(swigCPtr);
    return ret;
  }

  public ushort GetNumPairs() {
    ushort ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetNumPairs(swigCPtr);
    return ret;
  }

  public ushort GetNumUsedPairs() {
    ushort ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetNumUsedPairs(swigCPtr);
    return ret;
  }

  public byte GetDetection() {
    byte ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetDetection(swigCPtr);
    return ret;
  }

  public bool HasCompResults() {
    bool ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_HasCompResults(swigCPtr);
    return ret;
  }

  public float GetChangePValue() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetChangePValue(swigCPtr);
    return ret;
  }

  public float GetSignalLogRatio() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetSignalLogRatio(swigCPtr);
    return ret;
  }

  public float GetSignalLogRatioLow() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetSignalLogRatioLow(swigCPtr);
    return ret;
  }

  public float GetSignalLogRatioHigh() {
    float ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetSignalLogRatioHigh(swigCPtr);
    return ret;
  }

  public ushort GetNumCommonPairs() {
    ushort ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetNumCommonPairs(swigCPtr);
    return ret;
  }

  public byte GetChange() {
    byte ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetChange(swigCPtr);
    return ret;
  }

  public void SetDetectionPValue(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetDetectionPValue(swigCPtr, p);
  }

  public void SetSignal(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetSignal(swigCPtr, p);
  }

  public void SetNumPairs(ushort p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetNumPairs(swigCPtr, p);
  }

  public void SetNumUsedPairs(ushort p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetNumUsedPairs(swigCPtr, p);
  }

  public void SetDetection(byte p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetDetection(swigCPtr, p);
  }

  public void SetHasCompResults(bool p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetHasCompResults(swigCPtr, p);
  }

  public void SetChangePValue(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetChangePValue(swigCPtr, p);
  }

  public void SetSignalLogRatio(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetSignalLogRatio(swigCPtr, p);
  }

  public void SetSignalLogRatioLow(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetSignalLogRatioLow(swigCPtr, p);
  }

  public void SetSignalLogRatioHigh(float p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetSignalLogRatioHigh(swigCPtr, p);
  }

  public void SetNumCommonPairs(ushort p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetNumCommonPairs(swigCPtr, p);
  }

  public void SetChange(byte p) {
    affx_fusionPINVOKE.FusionExpressionProbeSetResults_SetChange(swigCPtr, p);
  }

  public string GetDetectionString() {
    string ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetDetectionString(swigCPtr);
    return ret;
  }

  public string GetChangeString() {
    string ret = affx_fusionPINVOKE.FusionExpressionProbeSetResults_GetChangeString(swigCPtr);
    return ret;
  }

  public FusionExpressionProbeSetResults FusionExpressionProbeSetResults_assign(FusionExpressionProbeSetResults src) {
    FusionExpressionProbeSetResults ret = new FusionExpressionProbeSetResults(affx_fusionPINVOKE.FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign(swigCPtr, FusionExpressionProbeSetResults.getCPtr(src)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FusionExpressionProbeSetResults() : this(affx_fusionPINVOKE.new_FusionExpressionProbeSetResults(), true) {
  }

}
