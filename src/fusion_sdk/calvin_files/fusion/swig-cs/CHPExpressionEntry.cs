/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CHPExpressionEntry : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CHPExpressionEntry(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CHPExpressionEntry obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CHPExpressionEntry() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_CHPExpressionEntry(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public CHPExpressionEntry() : this(affx_fusionPINVOKE.new_CHPExpressionEntry__SWIG_0(), true) {
  }

  public CHPExpressionEntry(SWIGTYPE_p_std__wstring probeSetname, byte detection, float detectionPValue, float signal, ushort numPairs, ushort numPairsUsed, byte change, float changePValue, float sigLogRatio, float sigLogRatioLo, float sigLogRatioHi, ushort commonPairs) : this(affx_fusionPINVOKE.new_CHPExpressionEntry__SWIG_1(SWIGTYPE_p_std__wstring.getCPtr(probeSetname), detection, detectionPValue, signal, numPairs, numPairsUsed, change, changePValue, sigLogRatio, sigLogRatioLo, sigLogRatioHi, commonPairs), true) {
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    affx_fusionPINVOKE.CHPExpressionEntry_Clear(swigCPtr);
  }

  public CHPExpressionEntry CHPExpressionEntry_assign(CHPExpressionEntry zn) {
    CHPExpressionEntry ret = new CHPExpressionEntry(affx_fusionPINVOKE.CHPExpressionEntry_CHPExpressionEntry_assign(swigCPtr, CHPExpressionEntry.getCPtr(zn)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetProbeSetName() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPExpressionEntry_GetProbeSetName(swigCPtr), true);
    return ret;
  }

  public byte GetDetection() {
    byte ret = affx_fusionPINVOKE.CHPExpressionEntry_GetDetection(swigCPtr);
    return ret;
  }

  public float GetDetectionPValue() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetDetectionPValue(swigCPtr);
    return ret;
  }

  public float GetSignal() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetSignal(swigCPtr);
    return ret;
  }

  public ushort GetNumPairs() {
    ushort ret = affx_fusionPINVOKE.CHPExpressionEntry_GetNumPairs(swigCPtr);
    return ret;
  }

  public ushort GetNumPairsUsed() {
    ushort ret = affx_fusionPINVOKE.CHPExpressionEntry_GetNumPairsUsed(swigCPtr);
    return ret;
  }

  public byte GetChange() {
    byte ret = affx_fusionPINVOKE.CHPExpressionEntry_GetChange(swigCPtr);
    return ret;
  }

  public float GetChangePValue() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetChangePValue(swigCPtr);
    return ret;
  }

  public float GetSigLogRatio() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetSigLogRatio(swigCPtr);
    return ret;
  }

  public float GetSigLogRatioLo() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetSigLogRatioLo(swigCPtr);
    return ret;
  }

  public float GetSigLogRatioHi() {
    float ret = affx_fusionPINVOKE.CHPExpressionEntry_GetSigLogRatioHi(swigCPtr);
    return ret;
  }

  public ushort GetCommonPairs() {
    ushort ret = affx_fusionPINVOKE.CHPExpressionEntry_GetCommonPairs(swigCPtr);
    return ret;
  }

  public void SetProbeSetName(SWIGTYPE_p_std__wstring p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetProbeSetName(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDetection(byte p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetDetection(swigCPtr, p);
  }

  public void SetDetectionPValue(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetDetectionPValue(swigCPtr, p);
  }

  public void SetSignal(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetSignal(swigCPtr, p);
  }

  public void SetNumPairs(ushort p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetNumPairs(swigCPtr, p);
  }

  public void SetNumPairsUsed(ushort p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetNumPairsUsed(swigCPtr, p);
  }

  public void SetChange(byte p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetChange(swigCPtr, p);
  }

  public void SetChangePValue(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetChangePValue(swigCPtr, p);
  }

  public void SetSigLogRatio(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetSigLogRatio(swigCPtr, p);
  }

  public void SetSigLogRatioLo(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetSigLogRatioLo(swigCPtr, p);
  }

  public void SetSigLogRatioHi(float p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetSigLogRatioHi(swigCPtr, p);
  }

  public void SetCommonPairs(ushort p) {
    affx_fusionPINVOKE.CHPExpressionEntry_SetCommonPairs(swigCPtr, p);
  }

}
