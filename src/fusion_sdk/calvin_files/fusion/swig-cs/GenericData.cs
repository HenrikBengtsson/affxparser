/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GenericData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GenericData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GenericData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GenericData() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_GenericData(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public GenericData() : this(affx_fusionPINVOKE.new_GenericData(), true) {
  }

  public string FileIdentifier() {
    string ret = affx_fusionPINVOKE.GenericData_FileIdentifier(swigCPtr);
    return ret;
  }

  public string ArrayFileIdentifier() {
    string ret = affx_fusionPINVOKE.GenericData_ArrayFileIdentifier(swigCPtr);
    return ret;
  }

  public FileHeader Header() {
    FileHeader ret = new FileHeader(affx_fusionPINVOKE.GenericData_Header(swigCPtr), false);
    return ret;
  }

  public uint DataGroupCnt() {
    uint ret = affx_fusionPINVOKE.GenericData_DataGroupCnt(swigCPtr);
    return ret;
  }

  public void DataGroupNames(SWIGTYPE_p_std__vectorTstd__wstring_t names) {
    affx_fusionPINVOKE.GenericData_DataGroupNames(swigCPtr, SWIGTYPE_p_std__vectorTstd__wstring_t.getCPtr(names));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint DataSetCnt(uint dataGroupIdx) {
    uint ret = affx_fusionPINVOKE.GenericData_DataSetCnt__SWIG_0(swigCPtr, dataGroupIdx);
    return ret;
  }

  public uint DataSetCnt(SWIGTYPE_p_std__wstring dataGroupName) {
    uint ret = affx_fusionPINVOKE.GenericData_DataSetCnt__SWIG_1(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(dataGroupName));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DataSetNames(uint dataGroupIdx, SWIGTYPE_p_std__vectorTstd__wstring_t names) {
    affx_fusionPINVOKE.GenericData_DataSetNames__SWIG_0(swigCPtr, dataGroupIdx, SWIGTYPE_p_std__vectorTstd__wstring_t.getCPtr(names));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DataSetNames(SWIGTYPE_p_std__wstring dataGroupName, SWIGTYPE_p_std__vectorTstd__wstring_t names) {
    affx_fusionPINVOKE.GenericData_DataSetNames__SWIG_1(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(dataGroupName), SWIGTYPE_p_std__vectorTstd__wstring_t.getCPtr(names));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataSet DataSet(uint dataGroupIdx, uint dataSetIdx) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_DataSet__SWIG_0(swigCPtr, dataGroupIdx, dataSetIdx);
    DataSet ret = (cPtr == IntPtr.Zero) ? null : new DataSet(cPtr, false);
    return ret;
  }

  public DataSet DataSet(SWIGTYPE_p_std__wstring dataGroupName, SWIGTYPE_p_std__wstring dataSetName) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_DataSet__SWIG_1(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(dataGroupName), SWIGTYPE_p_std__wstring.getCPtr(dataSetName));
    DataSet ret = (cPtr == IntPtr.Zero) ? null : new DataSet(cPtr, false);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataGroup DataGroup(uint dataGroupFilePos) {
    DataGroup ret = new DataGroup(affx_fusionPINVOKE.GenericData_DataGroup(swigCPtr, dataGroupFilePos), true);
    return ret;
  }

  public void Clear() {
    affx_fusionPINVOKE.GenericData_Clear(swigCPtr);
  }

  public void ReadFullDataSetHeader(DataSetHeader dph) {
    affx_fusionPINVOKE.GenericData_ReadFullDataSetHeader(swigCPtr, DataSetHeader.getCPtr(dph));
  }

  public bool IsDPHPartiallyRead(DataSetHeader dph) {
    bool ret = affx_fusionPINVOKE.GenericData_IsDPHPartiallyRead(swigCPtr, DataSetHeader.getCPtr(dph));
    return ret;
  }

  public void OpenFStream(SWIGTYPE_p_std__ifstream fileStream) {
    affx_fusionPINVOKE.GenericData_OpenFStream(swigCPtr, SWIGTYPE_p_std__ifstream.getCPtr(fileStream));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataGroupHeader FindDataGroupHeader(SWIGTYPE_p_std__wstring name) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_FindDataGroupHeader__SWIG_0(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name));
    DataGroupHeader ret = (cPtr == IntPtr.Zero) ? null : new DataGroupHeader(cPtr, false);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataGroupHeader FindDataGroupHeader(int index) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_FindDataGroupHeader__SWIG_1(swigCPtr, index);
    DataGroupHeader ret = (cPtr == IntPtr.Zero) ? null : new DataGroupHeader(cPtr, false);
    return ret;
  }

  public static DataSetHeader FindDataSetHeader(DataGroupHeader dch, uint dataSetIdx) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_FindDataSetHeader__SWIG_0(DataGroupHeader.getCPtr(dch), dataSetIdx);
    DataSetHeader ret = (cPtr == IntPtr.Zero) ? null : new DataSetHeader(cPtr, false);
    return ret;
  }

  public static DataSetHeader FindDataSetHeader(DataGroupHeader dch, SWIGTYPE_p_std__wstring dataSetName) {
    IntPtr cPtr = affx_fusionPINVOKE.GenericData_FindDataSetHeader__SWIG_1(DataGroupHeader.getCPtr(dch), SWIGTYPE_p_std__wstring.getCPtr(dataSetName));
    DataSetHeader ret = (cPtr == IntPtr.Zero) ? null : new DataSetHeader(cPtr, false);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MapFile() {
    bool ret = affx_fusionPINVOKE.GenericData_MapFile(swigCPtr);
    return ret;
  }

  public void UnmapFile() {
    affx_fusionPINVOKE.GenericData_UnmapFile(swigCPtr);
  }

}
