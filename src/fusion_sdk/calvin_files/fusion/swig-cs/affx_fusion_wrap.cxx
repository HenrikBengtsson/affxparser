/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_affx_fusion(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_affx_fusion(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_affx_fusion(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}

/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}
#define SWIG_exception(nullreturn, code, msg) { SWIG_CSharpException(code, msg); return nullreturn; }


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>



#include "../../portability/src/AffymetrixBaseTypes.h"

#include "../../utils/src/AffymetrixGuid.h"
#include "../../utils/src/AffyStlCollectionTypes.h"
#include "../../utils/src/checksum.h"
#include "../../utils/src/Coords.h"
#include "../../utils/src/DateTime.h"
#include "../../utils/src/FileUtils.h"
#include "../../utils/src/StringUtils.h"
#include "../../utils/src/Subgrids.h"

#include "../../exception/src/ExceptionBase.h"
#include "../../exception/src/DevelopmentException.h"
#include "../../exception/src/InterpretationException.h"

#include "../../parameter/src/ParameterException.h"
#include "../../parameter/src/Parameter.h"
#include "../../parameter/src/AffymetrixParameterConsts.h"
#include "../../parameter/src/ParameterNameValueType.h"

#include "../../Array/src/ArrayAttributes.h"
#include "../../Array/src/ArrayAudit.h"
#include "../../Array/src/ArrayAuditActionTypes.h"
#include "../../Array/src/ArrayId.h"
#include "../../Array/src/ArrayData.h"

#include "../../data/src/CDFData.h"
#include "../../data/src/CDFProbeGroupInformation.h"
#include "../../data/src/CDFProbeInformation.h"
#include "../../data/src/CDFProbeSetInformation.h"
#include "../../data/src/CDFQCProbeInformation.h"
#include "../../data/src/CDFQCProbeSetInformation.h"
#include "../../data/src/CHPBackgroundZone.h"
#include "../../data/src/CHPData.h"
#include "../../data/src/CHPExpressionEntry.h"
#include "../../data/src/CHPGenotypeEntry.h"
#include "../../data/src/CHPUniversalEntry.h"
#include "../../data/src/CELData.h"
#include "../../data/src/ColumnTypes.h"
#include "../../data/src/DataException.h"
#include "../../data/src/DataGroup.h"
#include "../../data/src/DataGroupHeader.h"
#include "../../data/src/DataSet.h"
#include "../../data/src/DataSetHeader.h"
#include "../../data/src/FileHeader.h"
#include "../../data/src/GenericData.h"
#include "../../data/src/GenericDataHeader.h"
#include "../../data/src/GenericDataTypes.h"
#include "../../data/src/cdfdatatypes.h"

#include "../../parsers/src/ArrayFileReader.h"
#include "../../parsers/src/AuditFileConstants.h"
#include "../../parsers/src/AuditFileReader.h"
#include "../../parsers/src/CDFFileReader.h"
#include "../../parsers/src/CHPFileReader.h"
#include "../../parsers/src/CelFileReader.h"
#include "../../parsers/src/DataGroupHeaderReader.h"
#include "../../parsers/src/DataGroupReader.h"
#include "../../parsers/src/DataSetHeaderReader.h"
#include "../../parsers/src/DataSetReader.h"
#include "../../parsers/src/FileException.h"
#include "../../parsers/src/FileHeaderReader.h"
#include "../../parsers/src/FileInput.h"
#include "../../parsers/src/GenericDataHeaderReader.h"
#include "../../parsers/src/GenericFileReader.h"
#include "../../parsers/src/GridControlFileReader.h"
#include "../../parsers/src/TemplateFileReader.h"
#include "../../parsers/src/TextFileReader.h"

#include "../../template/src/TemplateAuditActionTypes.h"
#include "../../template/src/TemplateData.h"

#include "../../../portability/affy-base-types.h"
#include "../../../file/FileIO.h"
#include "../../../file/GridCoordinates.h"
#include "../../../file/TagValuePair.h"
#include "../../../file/CDFFileData.h"
#include "../../../file/CELFileData.h"
#include "../../../file/CHPFileData.h"
#include "../../../file/BARFileData.h"
#include "../../../file/BPMAPFileData.h"
#include "../../../file/EXPFileData.h"
#include "../../../file/GRCFileData.h"
#include "../../../file/MSKFileData.h"
#include "../../../file/PSIFileData.h"
#include "../../../file/DttArrayFileReader.h"

#include "../src/CalvinAdapter/CalvinCELDataAdapter.h"
#include "../src/CalvinAdapter/CalvinCHPDataAdapter.h"

#include "../src/FusionTagValuePairType.h"
#include "../src/FusionArrayFileReader.h"
#include "../src/FusionProbeSetResults.h"
#include "../src/FusionCDFData.h"
#include "../src/FusionCDFQCProbeSetNames.h"
#include "../src/FusionCELDataAdapterInterface.h"
#include "../src/FusionCELData.h"
#include "../src/FusionCHPDataAdapterInterface.h"
#include "../src/FusionCHPData.h"

using namespace affymetrix_fusion_io;



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_AffymetrixGuid() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuid *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuid *)new affymetrix_calvin_utilities::AffymetrixGuid();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AffymetrixGuid(void * jarg1) {
    affymetrix_calvin_utilities::AffymetrixGuid *arg1 = (affymetrix_calvin_utilities::AffymetrixGuid *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::AffymetrixGuid *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AffymetrixGuid_GenerateNewGuid() {
    char * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    result = affymetrix_calvin_utilities::AffymetrixGuid::GenerateNewGuid();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CheckSum_OnesComplementCheckSum(void * jarg1, unsigned long jarg2) {
    unsigned short jresult = 0 ;
    void *arg1 = (void *) 0 ;
    size_t arg2 ;
    u_int16_t result;
    
    arg1 = (void *)jarg1; 
    arg2 = (size_t)jarg2; 
    result = (u_int16_t)affymetrix_calvin_utilities::CheckSum::OnesComplementCheckSum(arg1,arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CheckSum() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::CheckSum *result;
    
    result = (affymetrix_calvin_utilities::CheckSum *)new affymetrix_calvin_utilities::CheckSum();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CheckSum(void * jarg1) {
    affymetrix_calvin_utilities::CheckSum *arg1 = (affymetrix_calvin_utilities::CheckSum *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::CheckSum *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FPoint_x(void * jarg1, float jarg2) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_FPoint_x(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    result = (float) ((arg1)->x);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FPoint_y(void * jarg1, float jarg2) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_FPoint_y(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    result = (float) ((arg1)->y);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FPoint_FPoint_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::FPoint const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator ==((affymetrix_calvin_utilities::FPoint const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FPoint_FPoint_not_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::FPoint const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator !=((affymetrix_calvin_utilities::FPoint const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FPoint() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    result = (affymetrix_calvin_utilities::FPoint *)new affymetrix_calvin_utilities::FPoint();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FPoint(void * jarg1) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FPoint *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FRegion_Clear(void * jarg1) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRegion *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FRegion_pts(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    std::vector<affymetrix_calvin_utilities::FPoint > *arg2 = (std::vector<affymetrix_calvin_utilities::FPoint > *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRegion *)jarg1; 
    arg2 = (std::vector<affymetrix_calvin_utilities::FPoint > *)jarg2; 
    if (arg1) (arg1)->pts = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FRegion_pts(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    std::vector<affymetrix_calvin_utilities::FPoint > *result;
    
    arg1 = (affymetrix_calvin_utilities::FRegion *)jarg1; 
    result = (std::vector<affymetrix_calvin_utilities::FPoint > *)& ((arg1)->pts);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FRegion() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *result;
    
    result = (affymetrix_calvin_utilities::FRegion *)new affymetrix_calvin_utilities::FRegion();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FRegion(void * jarg1) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRegion *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FRect__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FRect__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *arg1 = 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    arg1 = (affymetrix_calvin_utilities::FRegion *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::FRegion const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect((affymetrix_calvin_utilities::FRegion const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FRect_op_FRegion(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FRegion result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (arg1)->operator affymetrix_calvin_utilities::FRegion();
    
    jresult = new affymetrix_calvin_utilities::FRegion((affymetrix_calvin_utilities::FRegion &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FRect_IsEmpty(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (bool)((affymetrix_calvin_utilities::FRect const *)arg1)->IsEmpty();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FRect_upperleft(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FRect_upperleft(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FRect_upperright(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FRect_upperright(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FRect_lowerright(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FRect_lowerright(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FRect_lowerleft(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FPoint *)jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FRect_lowerleft(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FRect(void * jarg1) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FRect *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Point_x(void * jarg1, int jarg2) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_Point_x(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    result = (int32_t) ((arg1)->x);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Point_y(void * jarg1, int jarg2) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_Point_y(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    result = (int32_t) ((arg1)->y);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Point_Point_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::Point const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator ==((affymetrix_calvin_utilities::Point const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Point_Point_not_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::Point const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator !=((affymetrix_calvin_utilities::Point const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Point() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    result = (affymetrix_calvin_utilities::Point *)new affymetrix_calvin_utilities::Point();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Point(void * jarg1) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Point *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_PointU16_t_x(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::PointU16_t *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_PointU16_t_x(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_utilities::PointU16_t *)jarg1; 
    result = (u_int16_t) ((arg1)->x);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_PointU16_t_y(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::PointU16_t *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_PointU16_t_y(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_utilities::PointU16_t *)jarg1; 
    result = (u_int16_t) ((arg1)->y);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PointU16_t() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *result;
    
    result = (affymetrix_calvin_utilities::PointU16_t *)new affymetrix_calvin_utilities::PointU16_t();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PointU16_t(void * jarg1) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::PointU16_t *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_Region_Clear(void * jarg1) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Region *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Region_pts(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    std::vector<affymetrix_calvin_utilities::Point > *arg2 = (std::vector<affymetrix_calvin_utilities::Point > *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Region *)jarg1; 
    arg2 = (std::vector<affymetrix_calvin_utilities::Point > *)jarg2; 
    if (arg1) (arg1)->pts = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Region_pts(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    std::vector<affymetrix_calvin_utilities::Point > *result;
    
    arg1 = (affymetrix_calvin_utilities::Region *)jarg1; 
    result = (std::vector<affymetrix_calvin_utilities::Point > *)& ((arg1)->pts);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Region() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Region *result;
    
    result = (affymetrix_calvin_utilities::Region *)new affymetrix_calvin_utilities::Region();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Region(void * jarg1) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Region *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rect__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Rect__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Region *arg1 = 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    arg1 = (affymetrix_calvin_utilities::Region *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_utilities::Region const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect((affymetrix_calvin_utilities::Region const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rect_op_Region(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Region result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (arg1)->operator affymetrix_calvin_utilities::Region();
    
    jresult = new affymetrix_calvin_utilities::Region((affymetrix_calvin_utilities::Region &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Rect_IsEmpty(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (bool)((affymetrix_calvin_utilities::Rect const *)arg1)->IsEmpty();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Rect_upperleft(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Rect_upperleft(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Rect_upperright(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Rect_upperright(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Rect_lowerright(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Rect_lowerright(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Rect_lowerleft(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Point *)jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Rect_lowerleft(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Rect(void * jarg1) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Rect *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DateTime() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *result;
    
    result = (affymetrix_calvin_utilities::DateTime *)new affymetrix_calvin_utilities::DateTime();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DateTime(void * jarg1) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_Date__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Date();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DateTime_Date__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Date(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_Time__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Time();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DateTime_Time__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Time(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DateTime_Clear(void * jarg1) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_GetCurrentDateTime() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::DateTime result;
    
    result = affymetrix_calvin_utilities::DateTime::GetCurrentDateTime();
    
    jresult = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DateTime_IsUTC(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    result = (bool)(arg1)->IsUTC();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_ToString(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_utilities::DateTime *)jarg1; 
    result = (arg1)->ToString();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_Parse(void * jarg1) {
    void * jresult = 0 ;
    std::wstring arg1 ;
    affymetrix_calvin_utilities::DateTime result;
    std::wstring *argp1 ;
    
    argp1 = (std::wstring *)jarg1; 
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg1 = *argp1; 
    result = affymetrix_calvin_utilities::DateTime::Parse(arg1);
    
    jresult = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileUtils_Exists(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)affymetrix_calvin_utilities::FileUtils::Exists((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileUtils_LockFile(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)affymetrix_calvin_utilities::FileUtils::LockFile((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileUtils_UnlockFile(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)affymetrix_calvin_utilities::FileUtils::UnlockFile((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileUtils_ListFiles(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    SwigValueWrapper<std::list<std::string > > result;
    
    arg1 = jarg1; 
    arg2 = jarg2; 
    result = affymetrix_calvin_utilities::FileUtils::ListFiles((char const *)arg1,(char const *)arg2);
    
    jresult = new std::list<std::string >((std::list<std::string > &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileUtils() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::FileUtils *result;
    
    result = (affymetrix_calvin_utilities::FileUtils *)new affymetrix_calvin_utilities::FileUtils();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileUtils(void * jarg1) {
    affymetrix_calvin_utilities::FileUtils *arg1 = (affymetrix_calvin_utilities::FileUtils *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::FileUtils *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimLeft__SWIG_0(void * jarg1, char jarg2) {
    std::string *arg1 = 0 ;
    char arg2 ;
    
    arg1 = (std::string *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    arg2 = (char)jarg2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimLeft__SWIG_1(void * jarg1) {
    std::string *arg1 = 0 ;
    
    arg1 = (std::string *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimRight__SWIG_0(void * jarg1, char jarg2) {
    std::string *arg1 = 0 ;
    char arg2 ;
    
    arg1 = (std::string *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    arg2 = (char)jarg2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimRight__SWIG_1(void * jarg1) {
    std::string *arg1 = 0 ;
    
    arg1 = (std::string *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimLeft__SWIG_2(void * jarg1, void * jarg2) {
    std::wstring *arg1 = 0 ;
    wchar_t arg2 ;
    wchar_t *argp2 ;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    argp2 = (wchar_t *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t", 0);
        return ;
    }
    arg2 = *argp2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimLeft__SWIG_3(void * jarg1) {
    std::wstring *arg1 = 0 ;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimRight__SWIG_2(void * jarg1, void * jarg2) {
    std::wstring *arg1 = 0 ;
    wchar_t arg2 ;
    wchar_t *argp2 ;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    argp2 = (wchar_t *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t", 0);
        return ;
    }
    arg2 = *argp2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringUtils_STLTrimRight__SWIG_3(void * jarg1) {
    std::wstring *arg1 = 0 ;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringUtils_ConvertWCSToMBS(void * jarg1) {
    char * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    std::string result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = affymetrix_calvin_utilities::StringUtils::ConvertWCSToMBS((std::wstring const &)*arg1);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringUtils_ConvertMBSToWCS(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::wstring result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    result = affymetrix_calvin_utilities::StringUtils::ConvertMBSToWCS((std::string const &)*arg1);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringUtils() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::StringUtils *result;
    
    result = (affymetrix_calvin_utilities::StringUtils *)new affymetrix_calvin_utilities::StringUtils();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringUtils(void * jarg1) {
    affymetrix_calvin_utilities::StringUtils *arg1 = (affymetrix_calvin_utilities::StringUtils *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::StringUtils *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Subgrid_row(void * jarg1, int jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->row = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_Subgrid_row(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    result = (int32_t) ((arg1)->row);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Subgrid_col(void * jarg1, int jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->col = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_Subgrid_col(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    result = (int32_t) ((arg1)->col);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Subgrid_pixelgrid(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::FRect *arg2 = (affymetrix_calvin_utilities::FRect *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::FRect *)jarg2; 
    if (arg1) (arg1)->pixelgrid = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Subgrid_pixelgrid(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    result = (affymetrix_calvin_utilities::FRect *)& ((arg1)->pixelgrid);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_Subgrid_cellgrid(void * jarg1, void * jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::Rect *arg2 = (affymetrix_calvin_utilities::Rect *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    arg2 = (affymetrix_calvin_utilities::Rect *)jarg2; 
    if (arg1) (arg1)->cellgrid = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_Subgrid_cellgrid(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    result = (affymetrix_calvin_utilities::Rect *)& ((arg1)->cellgrid);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Subgrid() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *result;
    
    result = (affymetrix_calvin_utilities::Subgrid *)new affymetrix_calvin_utilities::Subgrid();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Subgrid(void * jarg1) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    
    arg1 = (affymetrix_calvin_utilities::Subgrid *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalvinException__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalvinException__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, unsigned short jarg5, unsigned long long jarg6) {
    void * jresult = 0 ;
    std::wstring arg1 ;
    std::wstring arg2 ;
    std::wstring arg3 ;
    std::string arg4 ;
    u_int16_t arg5 ;
    u_int64_t arg6 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    std::wstring *argp2 ;
    std::wstring *argp3 ;
    
    argp1 = (std::wstring *)jarg1; 
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg1 = *argp1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg2 = *argp2; 
    argp3 = (std::wstring *)jarg3; 
    if (!argp3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg3 = *argp3; 
    if (!jarg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    arg4 = std::string(jarg4); 
    arg5 = (u_int16_t)jarg5; 
    arg6 = (u_int64_t)jarg6; 
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3,arg4,arg5,arg6);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalvinException__SWIG_2(void * jarg1, void * jarg2, unsigned long long jarg3) {
    void * jresult = 0 ;
    std::wstring arg1 ;
    std::wstring arg2 ;
    u_int64_t arg3 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    std::wstring *argp2 ;
    
    argp1 = (std::wstring *)jarg1; 
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg1 = *argp1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg2 = *argp2; 
    arg3 = (u_int64_t)jarg3; 
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalvinException__SWIG_3(void * jarg1, unsigned long long jarg2) {
    void * jresult = 0 ;
    std::wstring arg1 ;
    u_int64_t arg2 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    
    argp1 = (std::wstring *)jarg1; 
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return 0;
    }
    arg1 = *argp1; 
    arg2 = (u_int64_t)jarg2; 
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalvinException__SWIG_4(unsigned long long jarg1) {
    void * jresult = 0 ;
    u_int64_t arg1 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    
    arg1 = (u_int64_t)jarg1; 
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalvinException_Source__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (arg1)->Source();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_Source__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Source(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalvinException_Description__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (arg1)->Description();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_Description__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Description(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalvinException_TimeStamp__SWIG_0(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (arg1)->TimeStamp();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_TimeStamp__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->TimeStamp(arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CalvinException_SourceFile__SWIG_0(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (arg1)->SourceFile();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_SourceFile__SWIG_1(void * jarg1, char * jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::string arg2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    arg2 = std::string(jarg2); 
    (arg1)->SourceFile(arg2);
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CalvinException_LineNumber__SWIG_0(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (u_int16_t)(arg1)->LineNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_LineNumber__SWIG_1(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->LineNumber(arg2);
    
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CalvinException_ErrorCode__SWIG_0(void * jarg1) {
    unsigned long long jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int64_t result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (u_int64_t)(arg1)->ErrorCode();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalvinException_ErrorCode__SWIG_1(void * jarg1, unsigned long long jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int64_t arg2 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    arg2 = (u_int64_t)jarg2; 
    (arg1)->ErrorCode(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalvinException_ToString(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    result = (arg1)->ToString();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CalvinException(void * jarg1) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::CalvinException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NotImplementedException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::NotImplementedException *result;
    
    result = (affymetrix_calvin_exceptions::NotImplementedException *)new affymetrix_calvin_exceptions::NotImplementedException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NotImplementedException(void * jarg1) {
    affymetrix_calvin_exceptions::NotImplementedException *arg1 = (affymetrix_calvin_exceptions::NotImplementedException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::NotImplementedException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FormatException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::FormatException *result;
    
    result = (affymetrix_calvin_exceptions::FormatException *)new affymetrix_calvin_exceptions::FormatException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FormatException(void * jarg1) {
    affymetrix_calvin_exceptions::FormatException *arg1 = (affymetrix_calvin_exceptions::FormatException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::FormatException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterMismatchException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::ParameterMismatchException *result;
    
    result = (affymetrix_calvin_exceptions::ParameterMismatchException *)new affymetrix_calvin_exceptions::ParameterMismatchException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterMismatchException(void * jarg1) {
    affymetrix_calvin_exceptions::ParameterMismatchException *arg1 = (affymetrix_calvin_exceptions::ParameterMismatchException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::ParameterMismatchException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnexpectedParameterException(void * jarg1) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_exceptions::UnexpectedParameterException *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_exceptions::UnexpectedParameterException *)new affymetrix_calvin_exceptions::UnexpectedParameterException((std::wstring const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnexpectedParameterException(void * jarg1) {
    affymetrix_calvin_exceptions::UnexpectedParameterException *arg1 = (affymetrix_calvin_exceptions::UnexpectedParameterException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::UnexpectedParameterException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OutOfRangeParameterException(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_exceptions::OutOfRangeParameterException *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_exceptions::OutOfRangeParameterException *)new affymetrix_calvin_exceptions::OutOfRangeParameterException((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OutOfRangeParameterException(void * jarg1) {
    affymetrix_calvin_exceptions::OutOfRangeParameterException *arg1 = (affymetrix_calvin_exceptions::OutOfRangeParameterException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::OutOfRangeParameterException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterNameValuePair_Name(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Name = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterNameValuePair_Name(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    result =  ((arg1)->Name);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterNameValuePair_Value(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterNameValuePair_Value(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    result =  ((arg1)->Value);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValuePair_ParameterNameValuePair_copy(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair result;
    affymetrix_calvin_parameter::_tagParameterNameValuePair *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    argp2 = (affymetrix_calvin_parameter::_tagParameterNameValuePair *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValuePair", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_parameter::_tagParameterNameValuePair((affymetrix_calvin_parameter::_tagParameterNameValuePair &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValuePair_ParameterNameValuePair_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
    bool result;
    affymetrix_calvin_parameter::_tagParameterNameValuePair *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    argp2 = (affymetrix_calvin_parameter::_tagParameterNameValuePair *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValuePair", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterNameValuePair() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *result;
    
    result = (affymetrix_calvin_parameter::ParameterNameValuePair *)new affymetrix_calvin_parameter::ParameterNameValuePair();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterNameValuePair(void * jarg1) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterNameValueControlVocabulary_Name(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Name = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterNameValueControlVocabulary_Name(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    result =  ((arg1)->Name);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterNameValueControlVocabulary_Value(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterNameValueControlVocabulary_Value(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    result =  ((arg1)->Value);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterNameValueControlVocabulary_ControlledVocabulary(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::vector<std::wstring > *arg2 = (std::vector<std::wstring > *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    arg2 = (std::vector<std::wstring > *)jarg2; 
    if (arg1) (arg1)->ControlledVocabulary = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterNameValueControlVocabulary_ControlledVocabulary(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::vector<std::wstring > *result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    result = (std::vector<std::wstring > *)& ((arg1)->ControlledVocabulary);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary result;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    argp2 = (affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary((affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
    bool result;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *argp2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    argp2 = (affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterNameValueControlVocabulary() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *result;
    
    result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)new affymetrix_calvin_parameter::ParameterNameValueControlVocabulary();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterNameValueControlVocabulary(void * jarg1) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PARAMETER_VALUE_SIGNED_INTEGRAL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PARAMETER_VALUE_UNSIGNED_INTEGRAL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PARAMETER_VALUE_FLOATING_POINT() {
    int jresult = 0 ;
    int result;
    
    result = (int) 2;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PARAMETER_VALUE_STRING8_TYPE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 3;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PARAMETER_VALUE_STRING16_TYPE() {
    int jresult = 0 ;
    int result;
    
    result = (int) 3;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_i8(void * jarg1, char jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (int8_t)jarg2; 
    if (arg1) (arg1)->i8 = arg2;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_ParameterDataValue_i8(void * jarg1) {
    char jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (int8_t) ((arg1)->i8);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_i16(void * jarg1, short jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->i16 = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_ParameterDataValue_i16(void * jarg1) {
    short jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int16_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (int16_t) ((arg1)->i16);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_i32(void * jarg1, int jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->i32 = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ParameterDataValue_i32(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (int32_t) ((arg1)->i32);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_iu8(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    if (arg1) (arg1)->iu8 = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_ParameterDataValue_iu8(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (u_int8_t) ((arg1)->iu8);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_iu16(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->iu16 = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_ParameterDataValue_iu16(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (u_int16_t) ((arg1)->iu16);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_iu32(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    if (arg1) (arg1)->iu32 = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_ParameterDataValue_iu32(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (u_int32_t) ((arg1)->iu32);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterDataValue_f32(void * jarg1, float jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->f32 = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_ParameterDataValue_f32(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    result = (float) ((arg1)->f32);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterDataValue() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *result;
    
    result = (affymetrix_calvin_parameter::ParameterDataValue *)new affymetrix_calvin_parameter::ParameterDataValue();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterDataValue(void * jarg1) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterValue_paramValueType(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterValueType arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterValueType)jarg2; 
    if (arg1) (arg1)->paramValueType = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_ParameterValue_paramValueType(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterValueType result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    result = (affymetrix_calvin_parameter::ParameterValueType) ((arg1)->paramValueType);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterValue_valueSize(void * jarg1, int jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->valueSize = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ParameterValue_valueSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    result = (int32_t) ((arg1)->valueSize);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ParameterValue_paramValue(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg2 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterDataValue *)jarg2; 
    if (arg1) (arg1)->paramValue = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ParameterValue_paramValue(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    result = (affymetrix_calvin_parameter::ParameterDataValue *)& ((arg1)->paramValue);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterValue() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *result;
    
    result = (affymetrix_calvin_parameter::ParameterValue *)new affymetrix_calvin_parameter::ParameterValue();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterValue(void * jarg1) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterValue *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AFFY_EXPR_PS() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-expression-probesets";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AFFY_GENO_PS() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-genotyping-probesets";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AFFY_TAG_PS() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-tag-probesets";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AFFY_RESEQ_PS() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-resequencing-probesets";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AFFY_CNTRL_PS() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-control-probesets";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MIMEValue__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MIMEValue__SWIG_1(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    void *arg1 = (void *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    arg1 = (void *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((void const *)arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MIMEValue__SWIG_2(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MIMEValue(void * jarg1) {
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MIMEValue_MIMEValue_copy(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::MIMEValue *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return 0;
    } 
    {
        affymetrix_calvin_parameter::MIMEValue &_result_ref = (arg1)->operator =((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
        result = (affymetrix_calvin_parameter::MIMEValue *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MIMEValue_MIMEValue_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::MIMEValue *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->operator ==((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MIMEValue_MIMEValue_not_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::MIMEValue *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->operator !=((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MIMEValue_SetValue(void * jarg1, void * jarg2, unsigned int jarg3) {
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    void *arg2 = (void *) 0 ;
    u_int32_t arg3 ;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    arg2 = (void *)jarg2; 
    arg3 = (u_int32_t)jarg3; 
    (arg1)->SetValue((void const *)arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MIMEValue_GetValue(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    u_int32_t *arg2 = 0 ;
    void *result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    arg2 = (u_int32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int32_t & type is null", 0);
        return 0;
    } 
    result = (void *)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->GetValue(*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MIMEValue_Size(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::MIMEValue *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->Size();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterNameValueType__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterNameValueType__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    void *arg2 = (void *) 0 ;
    int32_t arg3 ;
    std::wstring *arg4 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg2 = (void *)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (std::wstring *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(void const *)arg2,arg3,(std::wstring const &)*arg4);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParameterNameValueType__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg2 = (affymetrix_calvin_parameter::MIMEValue *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return 0;
    } 
    arg3 = (std::wstring *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(affymetrix_calvin_parameter::MIMEValue const &)*arg2,(std::wstring const &)*arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_copy(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_not_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_equals_name(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_not_equals_name(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((std::wstring const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_less_than(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator <((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_ParameterNameValueType_greater_than(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator >((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_GetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetName(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_ParameterNameValueType_GetParameterType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType::ParameterType result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (affymetrix_calvin_parameter::ParameterNameValueType::ParameterType)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetParameterType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ParameterNameValueType_GetValueInt8(void * jarg1) {
    char jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt8();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueInt8(void * jarg1, char jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetValueInt8(arg2);
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ParameterNameValueType_GetValueUInt8(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt8();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueUInt8(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetValueUInt8(arg2);
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_ParameterNameValueType_GetValueInt16(void * jarg1) {
    short jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int16_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt16();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueInt16(void * jarg1, short jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (int16_t)jarg2; 
    (arg1)->SetValueInt16(arg2);
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ParameterNameValueType_GetValueUInt16(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt16();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueUInt16(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetValueUInt16(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_ParameterNameValueType_GetValueInt32(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt32();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueInt32(void * jarg1, int jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetValueInt32(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParameterNameValueType_GetValueUInt32(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt32();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueUInt32(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetValueUInt32(arg2);
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParameterNameValueType_GetValueFloat(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (float)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueFloat();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueFloat(void * jarg1, float jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetValueFloat(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_GetValueText(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueText();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueText(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetValueText((std::wstring const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParameterNameValueType_GetValueAscii(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueAscii();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetValueAscii(void * jarg1, char * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetValueAscii((std::string const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_GetMIMEType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetMIMEType(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetMIMEType((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_GetMIMEValue(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::MIMEValue result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEValue();
    
    jresult = new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParameterNameValueType_SetMIMEValue(void * jarg1, void * jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::MIMEValue *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::MIMEValue const & type is null", 0);
        return ;
    } 
    (arg1)->SetMIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParameterNameValueType_ToString(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    result = (arg1)->ToString();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParameterNameValueType(void * jarg1) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    
    arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayAttributes() {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *result;
    
    result = (affymetrix_calvin_array::ArrayAttributes *)new affymetrix_calvin_array::ArrayAttributes();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayAttributes(void * jarg1) {
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayAttributes *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAttributes_Identifier(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAttributes *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->Identifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAttributes_Attributes(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePairVector *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAttributes *)jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValuePairVector &_result_ref = (arg1)->Attributes();
        result = (affymetrix_calvin_parameter::ParameterNameValuePairVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayAttributes_Clear(void * jarg1) {
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayAttributes *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayAuditEntry() {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *result;
    
    result = (affymetrix_calvin_array::ArrayAuditEntry *)new affymetrix_calvin_array::ArrayAuditEntry();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayAuditEntry(void * jarg1) {
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_UserName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    std::wstring *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        std::wstring &_result_ref = (arg1)->UserName();
        result = (std::wstring *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_DateTime(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::DateTime *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_utilities::DateTime &_result_ref = (arg1)->DateTime();
        result = (affymetrix_calvin_utilities::DateTime *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_ActionType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ActionType();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_ArrayGuid(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArrayGuid();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_InputFileGuids(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->InputFileGuids();
        result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_OutputFileGuids(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->OutputFileGuids();
        result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayAuditEntry_ActionParameters(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePairList *result;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValuePairList &_result_ref = (arg1)->ActionParameters();
        result = (affymetrix_calvin_parameter::ParameterNameValuePairList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayAuditEntry_Clear(void * jarg1) {
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayAuditEntry *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ARRAY_FILE_CREATEION_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::ARRAY_FILE_CREATEION_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_FLUIDICS_INSTRUMENT_CONTROL_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::FLUIDICS_INSTRUMENT_CONTROL_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_SCAN_INSTRUMENT_CONTROL_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::SCAN_INSTRUMENT_CONTROL_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_ARRAY_FILE_TYPE_IDENTIFIER() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-calvin-array";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayData() {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayData *result;
    
    result = (affymetrix_calvin_array::ArrayData *)new affymetrix_calvin_array::ArrayData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayData(void * jarg1) {
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayData_ArraySetIdentifier(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_calvin_array::ArrayData *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArraySetIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayData_PhysicalArraysAttributes(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_array::ArrayAttributesVector *result;
    
    arg1 = (affymetrix_calvin_array::ArrayData *)jarg1; 
    {
        affymetrix_calvin_array::ArrayAttributesVector &_result_ref = (arg1)->PhysicalArraysAttributes();
        result = (affymetrix_calvin_array::ArrayAttributesVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayData_UserAttributes(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *result;
    
    arg1 = (affymetrix_calvin_array::ArrayData *)jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector &_result_ref = (arg1)->UserAttributes();
        result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayData_Clear(void * jarg1) {
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    
    arg1 = (affymetrix_calvin_array::ArrayData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_MAX_CDF_PROBE_SET_NAME_LENGTH() {
    int jresult = 0 ;
    int result;
    
    result = (int) 32;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFData__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFData *result;
    
    result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFData__SWIG_1(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::CDFData *result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData((std::string const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFData(void * jarg1) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_Clear(void * jarg1) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CDFData_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFData_GetProbeSetCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (int32_t)(arg1)->GetProbeSetCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_SetProbeSetCnt(void * jarg1, unsigned int jarg2, int jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    CDFDataTypeIds arg3 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (CDFDataTypeIds)jarg3; 
    (arg1)->SetProbeSetCnt(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFData_GetProbeSetName(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetProbeSetName(arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_SetArrayRows(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetArrayRows(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFData_GetArrayRows(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (u_int32_t)(arg1)->GetArrayRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_SetArrayCols(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetArrayCols(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFData_GetArrayCols(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (u_int32_t)(arg1)->GetArrayCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_SetRefSequence(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetRefSequence((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CDFData_GetRefSequence(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (arg1)->GetRefSequence();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CDFData_GetDataTypeId(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (arg1)->GetDataTypeId();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFData_GetFileHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    FileHeader *result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFData_GetGenericData(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    GenericData *result;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    {
        GenericData &_result_ref = (arg1)->GetGenericData();
        result = (GenericData *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_GetProbeSetInformation__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    CDFProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (CDFProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CDFProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_GetProbeSetInformation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::wstring *arg2 = 0 ;
    CDFProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    arg3 = (CDFProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CDFProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetInformation((std::wstring const &)*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_GetQCProbeSetInformation__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    CDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (CDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFData_GetQCProbeSetInformation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::wstring *arg2 = 0 ;
    CDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    arg3 = (CDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation((std::wstring const &)*arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFProbeGroupInformation() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *result;
    
    result = (affymetrix_calvin_io::CDFProbeGroupInformation *)new affymetrix_calvin_io::CDFProbeGroupInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFProbeGroupInformation(void * jarg1) {
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    DirectionType result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    result = (DirectionType)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetNumLists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetNumCells(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetNumCellsPerList(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    result = ((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFProbeGroupInformation_GetCell(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::CDFProbeInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (affymetrix_calvin_io::CDFProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CDFProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFProbeInformation() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *result;
    
    result = (affymetrix_calvin_io::CDFProbeInformation *)new affymetrix_calvin_io::CDFProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeInformation_GetListIndex(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFProbeInformation_GetExpos(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (int)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CDFProbeInformation_GetX(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CDFProbeInformation_GetY(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CDFProbeInformation_GetPBase(void * jarg1) {
    char jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CDFProbeInformation_GetTBase(void * jarg1) {
    char jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFProbeInformation(void * jarg1) {
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFProbeSetInformation() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *result;
    
    result = (affymetrix_calvin_io::CDFProbeSetInformation *)new affymetrix_calvin_io::CDFProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFProbeSetInformation(void * jarg1) {
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFProbeSetInformation_GetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = ((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    affymetrix_calvin_io::DirectionType result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (affymetrix_calvin_io::DirectionType)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetNumLists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetNumGroups(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetNumCells(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDFProbeSetInformation_GetNumCellsPerList(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetProbeSetNumber(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFProbeSetInformation_GetGroupInformation(void * jarg1, unsigned int jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (affymetrix_calvin_io::CDFProbeGroupInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CDFProbeGroupInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFProbeSetInformation_GetProbeSetType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    CDFDataTypeIds result;
    
    arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *)jarg1; 
    result = (CDFDataTypeIds)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFQCProbeInformation() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *result;
    
    result = (affymetrix_calvin_io::CDFQCProbeInformation *)new affymetrix_calvin_io::CDFQCProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CDFQCProbeInformation_GetX(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CDFQCProbeInformation_GetY(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDFQCProbeInformation_GetPLen(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFQCProbeInformation_IsPerfectMatchProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDFQCProbeInformation_IsBackgroundProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFQCProbeInformation(void * jarg1) {
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFQCProbeSetInformation() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *result;
    
    result = (affymetrix_calvin_io::CDFQCProbeSetInformation *)new affymetrix_calvin_io::CDFQCProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFQCProbeSetInformation(void * jarg1) {
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDFQCProbeSetInformation_GetQCProbeSetType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *)jarg1; 
    result = ((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDFQCProbeSetInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFQCProbeSetInformation_GetProbeInformation(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_calvin_io::CDFQCProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CDFQCProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPBackgroundZone__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *result;
    
    result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPBackgroundZone__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
    void * jresult = 0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    affymetrix_calvin_io::CHPBackgroundZone *result;
    
    arg1 = (float)jarg1; 
    arg2 = (float)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone(arg1,arg2,arg3,arg4);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPBackgroundZone(void * jarg1) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPBackgroundZone_Clear(void * jarg1) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPBackgroundZone_CHPBackgroundZone_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    affymetrix_calvin_io::CHPBackgroundZone arg2 ;
    affymetrix_calvin_io::CHPBackgroundZone result;
    affymetrix_calvin_io::CHPBackgroundZone *argp2 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    argp2 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_io::CHPBackgroundZone", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_io::CHPBackgroundZone((affymetrix_calvin_io::CHPBackgroundZone &)result); 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPBackgroundZone_GetCenterX(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPBackgroundZone_GetCenterY(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPBackgroundZone_GetBackground(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetBackground();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPBackgroundZone_GetSmoothFactor(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetSmoothFactor();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPBackgroundZone_SetCenterX(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetCenterX(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPBackgroundZone_SetCenterY(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetCenterY(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPBackgroundZone_SetBackground(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPBackgroundZone_SetSmoothFactor(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSmoothFactor(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPData__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *result;
    
    result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPData__SWIG_1(char * jarg1, char * jarg2) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_io::CHPData *result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData((std::string const &)*arg1,(std::string const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPData(void * jarg1) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_Clear(void * jarg1) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CHPData_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = ((affymetrix_calvin_io::CHPData const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CHPData_GetVersion(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (u_int8_t)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CHPData_GetMagic(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (u_int8_t)(arg1)->GetMagic();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHPData_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (int32_t)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetRows(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRows(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHPData_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (int32_t)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetCols(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetCols(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetProgId(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetProgId();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetProgId(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetProgId((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetArrayType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetArrayType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CHPData_GetAssayType(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetAssayType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetArrayType(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetArrayType((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetAlgName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetAlgName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetAlgName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetAlgName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetParentCell(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetParentCell();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetParentCell(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetParentCell((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetAlgVersion(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetAlgVersion();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetAlgVersion(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetAlgVersion((std::wstring const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_AddAlgParam(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    arg3 = (std::wstring *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->AddAlgParam((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetAlgParam(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (arg1)->GetAlgParam((std::wstring const &)*arg2);
    
    jresult = new ParameterNameValueType((ParameterNameValueType &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_AddChipSum(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    arg3 = (std::wstring *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->AddChipSum((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetChipSums(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    SwigValueWrapper<std::vector<affymetrix_calvin_parameter::ParameterNameValueType > > result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (arg1)->GetChipSums();
    
    jresult = new ParameterNameValueTypeVector((ParameterNameValueTypeVector &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetChipSum(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (arg1)->GetChipSum((std::wstring const &)*arg2);
    
    jresult = new ParameterNameValueType((ParameterNameValueType &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetFileHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    FileHeader *result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPData_GetGenericData(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    GenericData *result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    {
        GenericData &_result_ref = (arg1)->GetGenericData();
        result = (GenericData *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetEntryCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetEntryCount(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHPData_GetEntryCount(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (int32_t)(arg1)->GetEntryCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_GetExpressionEntry(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPExpressionEntry *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (CHPExpressionEntry *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CHPExpressionEntry & type is null", 0);
        return ;
    } 
    (arg1)->GetExpressionEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_GetGenotypeEntry(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPGenotypeEntry *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (CHPGenotypeEntry *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CHPGenotypeEntry & type is null", 0);
        return ;
    } 
    (arg1)->GetGenotypeEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_GetUniversalEntry(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPUniversalEntry *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (CHPUniversalEntry *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CHPUniversalEntry & type is null", 0);
        return ;
    } 
    (arg1)->GetUniversalEntry(arg2,*arg3);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHPData_GetBackgroundZoneCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    result = (int32_t)(arg1)->GetBackgroundZoneCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_SetBackgroundZoneCnt(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetBackgroundZoneCnt(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_GetBackgroundZone(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (affymetrix_calvin_io::CHPBackgroundZone *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CHPBackgroundZone & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZone(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPData_GetBackgroundZones(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    affymetrix_calvin_io::CHPBackgroundZoneVector *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (affymetrix_calvin_io::CHPBackgroundZoneVector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CHPBackgroundZoneVector & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZones(arg2,arg3,*arg4);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPExpressionEntry__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *result;
    
    result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPExpressionEntry__SWIG_1(void * jarg1, unsigned char jarg2, float jarg3, float jarg4, unsigned short jarg5, unsigned short jarg6, unsigned char jarg7, float jarg8, float jarg9, float jarg10, float jarg11, unsigned short jarg12) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    u_int8_t arg2 ;
    float arg3 ;
    float arg4 ;
    u_int16_t arg5 ;
    u_int16_t arg6 ;
    u_int8_t arg7 ;
    float arg8 ;
    float arg9 ;
    float arg10 ;
    float arg11 ;
    u_int16_t arg12 ;
    affymetrix_calvin_io::CHPExpressionEntry *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg2 = (u_int8_t)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    arg5 = (u_int16_t)jarg5; 
    arg6 = (u_int16_t)jarg6; 
    arg7 = (u_int8_t)jarg7; 
    arg8 = (float)jarg8; 
    arg9 = (float)jarg9; 
    arg10 = (float)jarg10; 
    arg11 = (float)jarg11; 
    arg12 = (u_int16_t)jarg12; 
    result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPExpressionEntry(void * jarg1) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_Clear(void * jarg1) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPExpressionEntry_CHPExpressionEntry_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    affymetrix_calvin_io::CHPExpressionEntry arg2 ;
    affymetrix_calvin_io::CHPExpressionEntry result;
    affymetrix_calvin_io::CHPExpressionEntry *argp2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    argp2 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_io::CHPExpressionEntry", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_io::CHPExpressionEntry((affymetrix_calvin_io::CHPExpressionEntry &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPExpressionEntry_GetProbeSetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = ((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetProbeSetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CHPExpressionEntry_GetDetection(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetDetectionPValue(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetectionPValue();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetSignal(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSignal();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CHPExpressionEntry_GetNumPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairs();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CHPExpressionEntry_GetNumPairsUsed(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairsUsed();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CHPExpressionEntry_GetChange(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChange();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetChangePValue(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChangePValue();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetSigLogRatio(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatio();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetSigLogRatioLo(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioLo();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPExpressionEntry_GetSigLogRatioHi(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioHi();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CHPExpressionEntry_GetCommonPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetCommonPairs();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetProbeSetName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetProbeSetName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetDetection(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetDetection(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetDetectionPValue(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetDetectionPValue(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetSignal(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignal(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetNumPairs(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairs(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetNumPairsUsed(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairsUsed(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetChange(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetChange(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetChangePValue(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetChangePValue(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetSigLogRatio(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatio(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetSigLogRatioLo(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatioLo(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetSigLogRatioHi(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatioHi(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPExpressionEntry_SetCommonPairs(void * jarg1, unsigned short jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPExpressionEntry *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetCommonPairs(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPGenotypeEntry__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *result;
    
    result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPGenotypeEntry__SWIG_1(void * jarg1, unsigned char jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    u_int8_t arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    float arg7 ;
    float arg8 ;
    float arg9 ;
    affymetrix_calvin_io::CHPGenotypeEntry *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg2 = (u_int8_t)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    arg5 = (float)jarg5; 
    arg6 = (float)jarg6; 
    arg7 = (float)jarg7; 
    arg8 = (float)jarg8; 
    arg9 = (float)jarg9; 
    result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPGenotypeEntry(void * jarg1) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_Clear(void * jarg1) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPGenotypeEntry_CHPGenotypeEntry_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry arg2 ;
    affymetrix_calvin_io::CHPGenotypeEntry result;
    affymetrix_calvin_io::CHPGenotypeEntry *argp2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    argp2 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_io::CHPGenotypeEntry", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_io::CHPGenotypeEntry((affymetrix_calvin_io::CHPGenotypeEntry &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPGenotypeEntry_GetProbeSetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = ((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetProbeSetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CHPGenotypeEntry_GetCall(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetConfidence(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetConfidence();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetRAS1(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS1();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetRAS2(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS2();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetAACall(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetAACall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetABCall(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetABCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetBBCall(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetBBCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPGenotypeEntry_GetNoCall(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetNoCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetProbeSetName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetProbeSetName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetCall(void * jarg1, unsigned char jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetConfidence(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetConfidence(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetRAS1(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS1(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetRAS2(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS2(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetAACall(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetAACall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetABCall(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetABCall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetBBCall(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBBCall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPGenotypeEntry_SetNoCall(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetNoCall(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPUniversalEntry__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *result;
    
    result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPUniversalEntry__SWIG_1(float jarg1) {
    void * jresult = 0 ;
    float arg1 ;
    affymetrix_calvin_io::CHPUniversalEntry *result;
    
    arg1 = (float)jarg1; 
    result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPUniversalEntry(void * jarg1) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPUniversalEntry_Clear(void * jarg1) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CHPUniversalEntry_CHPUniversalEntry_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    affymetrix_calvin_io::CHPUniversalEntry arg2 ;
    affymetrix_calvin_io::CHPUniversalEntry result;
    affymetrix_calvin_io::CHPUniversalEntry *argp2 ;
    
    arg1 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg1; 
    argp2 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_calvin_io::CHPUniversalEntry", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_calvin_io::CHPUniversalEntry((affymetrix_calvin_io::CHPUniversalEntry &)result); 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CHPUniversalEntry_GetBackground(void * jarg1) {
    float jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    float result;
    
    arg1 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg1; 
    result = (float)((affymetrix_calvin_io::CHPUniversalEntry const *)arg1)->GetBackground();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPUniversalEntry_SetBackground(void * jarg1, float jarg2) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_calvin_io::CHPUniversalEntry *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XYCoord__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::XYCoord *result;
    
    result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XYCoord__SWIG_1(short jarg1, short jarg2) {
    void * jresult = 0 ;
    int16_t arg1 ;
    int16_t arg2 ;
    affymetrix_calvin_io::XYCoord *result;
    
    arg1 = (int16_t)jarg1; 
    arg2 = (int16_t)jarg2; 
    result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XYCoord(void * jarg1) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_XYCoord_xCoord(void * jarg1, short jarg2) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->xCoord = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_XYCoord_xCoord(void * jarg1) {
    short jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    result = (int16_t) ((arg1)->xCoord);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_XYCoord_yCoord(void * jarg1, short jarg2) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->yCoord = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_XYCoord_yCoord(void * jarg1) {
    short jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    result = (int16_t) ((arg1)->yCoord);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XYCoord_XYCoord_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    affymetrix_calvin_io::XYCoord result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoord *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoord const & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = new affymetrix_calvin_io::XYCoord((affymetrix_calvin_io::XYCoord &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XYCoord_XYCoord_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoord *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoord const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator ==((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XYCoord_XYCoord_not_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoord *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoord const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator !=((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XYCoord_XYCoord_less_than(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::XYCoord *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoord *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoord const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator <((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CelFileData__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CelFileData *result;
    
    result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CelFileData__SWIG_1(char * jarg1) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::CelFileData *result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData((std::string const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CelFileData(void * jarg1) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_Clear(void * jarg1) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CelFileData_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = ((affymetrix_calvin_io::CelFileData const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetIntensityCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetIntensityCount(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetStdDevCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetStdDevCount(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetPixelCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPixelCount(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetOutlierCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetOutlierCount(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetMaskCount(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetMaskCount(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CelFileData_GetFileHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    FileHeader *result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CelFileData_GetVersion(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (u_int8_t)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetArrayType(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetArrayType((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CelFileData_GetArrayType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (arg1)->GetArrayType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetAlgorithmName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetAlgorithmName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CelFileData_GetAlgorithmName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (arg1)->GetAlgorithmName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetRows(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRows(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CelFileData_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (int32_t)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_SetCols(void * jarg1, int jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetCols(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CelFileData_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (int32_t)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CelFileData_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (int32_t)(arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_GetAlgorithmParameters(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    ParameterNameValueTypeVector *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (ParameterNameValueTypeVector *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ParameterNameValueTypeVector & type is null", 0);
        return ;
    } 
    (arg1)->GetAlgorithmParameters(*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_FindAlgorithmParameter(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg3 = (ParameterNameValueType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ParameterNameValueType & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->FindAlgorithmParameter((std::wstring const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_AddAlgorithmParameter(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    ParameterNameValueType *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ParameterNameValueType & type is null", 0);
        return ;
    } 
    (arg1)->AddAlgorithmParameter(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_GetData(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    float *arg3 = 0 ;
    float *arg4 = 0 ;
    int16_t *arg5 = 0 ;
    bool *arg6 = 0 ;
    bool *arg7 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (float *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    arg4 = (float *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    arg5 = (int16_t *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int16_t & type is null", 0);
        return ;
    } 
    arg6 = (bool *)jarg6;
    if(!arg6) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
        return ;
    } 
    arg7 = (bool *)jarg7;
    if(!arg7) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_HasStdev(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (bool)(arg1)->HasStdev();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_HasNumPixels(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    result = (bool)(arg1)->HasNumPixels();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_GetIntensities(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    FloatVector *arg4 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (FloatVector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FloatVector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetIntensities(arg2,arg3,*arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_GetStdev(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    FloatVector *arg4 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (FloatVector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FloatVector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetStdev(arg2,arg3,*arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_GetNumPixels(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    Int16Vector *arg4 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (Int16Vector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Int16Vector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetNumPixels(arg2,arg3,*arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_GetOutliers(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    BoolVector *arg4 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (BoolVector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoolVector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetOutliers(arg2,arg3,*arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CelFileData_GetMasked(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    BoolVector *arg4 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (BoolVector *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoolVector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetMasked(arg2,arg3,*arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_GetOutlierCoords(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoordVector *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoordVector & type is null", 0);
        return ;
    } 
    (arg1)->GetOutlierCoords(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileData_GetMaskedCoords(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileData *)jarg1; 
    arg2 = (affymetrix_calvin_io::XYCoordVector *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::XYCoordVector & type is null", 0);
        return ;
    } 
    (arg1)->GetMaskedCoords(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColumnType(int jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetColumnTypes arg1 ;
    int32_t arg2 ;
    affymetrix_calvin_io::ColumnType *result;
    
    arg1 = (affymetrix_calvin_io::DataSetColumnTypes)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (affymetrix_calvin_io::ColumnType *)new affymetrix_calvin_io::ColumnType(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColumnType_ColumnType_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    arg2 = (affymetrix_calvin_io::ColumnType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::ColumnType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator ==((affymetrix_calvin_io::ColumnType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColumnType_ColumnType_not_equals(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    arg2 = (affymetrix_calvin_io::ColumnType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::ColumnType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator !=((affymetrix_calvin_io::ColumnType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColumnType_GetColumnType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::DataSetColumnTypes result;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    result = (affymetrix_calvin_io::DataSetColumnTypes)((affymetrix_calvin_io::ColumnType const *)arg1)->GetColumnType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColumnType_GetSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColumnType_GetLength(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetLength();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColumnType(void * jarg1) {
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::ColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ByteColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::ByteColumnType *result;
    
    result = (affymetrix_calvin_io::ByteColumnType *)new affymetrix_calvin_io::ByteColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ByteColumnType(void * jarg1) {
    affymetrix_calvin_io::ByteColumnType *arg1 = (affymetrix_calvin_io::ByteColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::ByteColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UByteColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::UByteColumnType *result;
    
    result = (affymetrix_calvin_io::UByteColumnType *)new affymetrix_calvin_io::UByteColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UByteColumnType(void * jarg1) {
    affymetrix_calvin_io::UByteColumnType *arg1 = (affymetrix_calvin_io::UByteColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::UByteColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShortColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::ShortColumnType *result;
    
    result = (affymetrix_calvin_io::ShortColumnType *)new affymetrix_calvin_io::ShortColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShortColumnType(void * jarg1) {
    affymetrix_calvin_io::ShortColumnType *arg1 = (affymetrix_calvin_io::ShortColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::ShortColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UShortColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::UShortColumnType *result;
    
    result = (affymetrix_calvin_io::UShortColumnType *)new affymetrix_calvin_io::UShortColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UShortColumnType(void * jarg1) {
    affymetrix_calvin_io::UShortColumnType *arg1 = (affymetrix_calvin_io::UShortColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::UShortColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::IntColumnType *result;
    
    result = (affymetrix_calvin_io::IntColumnType *)new affymetrix_calvin_io::IntColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntColumnType(void * jarg1) {
    affymetrix_calvin_io::IntColumnType *arg1 = (affymetrix_calvin_io::IntColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::IntColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIntColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::UIntColumnType *result;
    
    result = (affymetrix_calvin_io::UIntColumnType *)new affymetrix_calvin_io::UIntColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIntColumnType(void * jarg1) {
    affymetrix_calvin_io::UIntColumnType *arg1 = (affymetrix_calvin_io::UIntColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::UIntColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FloatColumnType() {
    void * jresult = 0 ;
    affymetrix_calvin_io::FloatColumnType *result;
    
    result = (affymetrix_calvin_io::FloatColumnType *)new affymetrix_calvin_io::FloatColumnType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FloatColumnType(void * jarg1) {
    affymetrix_calvin_io::FloatColumnType *arg1 = (affymetrix_calvin_io::FloatColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FloatColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ASCIIColumnType(int jarg1) {
    void * jresult = 0 ;
    int32_t arg1 ;
    affymetrix_calvin_io::ASCIIColumnType *result;
    
    arg1 = (int32_t)jarg1; 
    result = (affymetrix_calvin_io::ASCIIColumnType *)new affymetrix_calvin_io::ASCIIColumnType(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ASCIIColumnType(void * jarg1) {
    affymetrix_calvin_io::ASCIIColumnType *arg1 = (affymetrix_calvin_io::ASCIIColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::ASCIIColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnicodeColumnType(int jarg1) {
    void * jresult = 0 ;
    int32_t arg1 ;
    affymetrix_calvin_io::UnicodeColumnType *result;
    
    arg1 = (int32_t)jarg1; 
    result = (affymetrix_calvin_io::UnicodeColumnType *)new affymetrix_calvin_io::UnicodeColumnType(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnicodeColumnType(void * jarg1) {
    affymetrix_calvin_io::UnicodeColumnType *arg1 = (affymetrix_calvin_io::UnicodeColumnType *) 0 ;
    
    arg1 = (affymetrix_calvin_io::UnicodeColumnType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSetNotOpenException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::DataSetNotOpenException *result;
    
    result = (affymetrix_calvin_exceptions::DataSetNotOpenException *)new affymetrix_calvin_exceptions::DataSetNotOpenException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataSetNotOpenException(void * jarg1) {
    affymetrix_calvin_exceptions::DataSetNotOpenException *arg1 = (affymetrix_calvin_exceptions::DataSetNotOpenException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::DataSetNotOpenException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColumnIndexOutOfBoundsException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *result;
    
    result = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColumnIndexOutOfBoundsException(void * jarg1) {
    affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RowIndexOutOfBoundsException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *result;
    
    result = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::RowIndexOutOfBoundsException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RowIndexOutOfBoundsException(void * jarg1) {
    affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnexpectedColumnTypeException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::UnexpectedColumnTypeException *result;
    
    result = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *)new affymetrix_calvin_exceptions::UnexpectedColumnTypeException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnexpectedColumnTypeException(void * jarg1) {
    affymetrix_calvin_exceptions::UnexpectedColumnTypeException *arg1 = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroupNotFoundException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::DataGroupNotFoundException *result;
    
    result = (affymetrix_calvin_exceptions::DataGroupNotFoundException *)new affymetrix_calvin_exceptions::DataGroupNotFoundException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataGroupNotFoundException(void * jarg1) {
    affymetrix_calvin_exceptions::DataGroupNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataGroupNotFoundException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::DataGroupNotFoundException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSetNotFoundException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::DataSetNotFoundException *result;
    
    result = (affymetrix_calvin_exceptions::DataSetNotFoundException *)new affymetrix_calvin_exceptions::DataSetNotFoundException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataSetNotFoundException(void * jarg1) {
    affymetrix_calvin_exceptions::DataSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataSetNotFoundException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::DataSetNotFoundException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProbeSetNotFoundException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::ProbeSetNotFoundException *result;
    
    result = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *)new affymetrix_calvin_exceptions::ProbeSetNotFoundException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProbeSetNotFoundException(void * jarg1) {
    affymetrix_calvin_exceptions::ProbeSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFAccessNotSupportedByModeException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *result;
    
    result = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *)new affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFAccessNotSupportedByModeException(void * jarg1) {
    affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *arg1 = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroup(char * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    DataGroupHeader *arg2 = 0 ;
    void *arg3 = (void *) 0 ;
    affymetrix_calvin_io::DataGroup *result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (DataGroupHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DataGroupHeader const & type is null", 0);
        return 0;
    } 
    arg3 = (void *)jarg3; 
    result = (affymetrix_calvin_io::DataGroup *)new affymetrix_calvin_io::DataGroup((std::string const &)*arg1,(DataGroupHeader const &)*arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroup_Header(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroup *)jarg1; 
    {
        affymetrix_calvin_io::DataGroupHeader const &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroup_DataSet__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::DataSet *result;
    
    arg1 = (affymetrix_calvin_io::DataGroup *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroup_DataSet__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    arg1 = (affymetrix_calvin_io::DataGroup *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataGroup(void * jarg1) {
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroup *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroupHeader__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroupHeader__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (std::wstring *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader((std::wstring const &)*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataGroupHeader(void * jarg1) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_Clear(void * jarg1) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_SetName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupHeader_GetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    result = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataGroupHeader_GetDataSetCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_AddDataSetHdr(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    DataSetHeader *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (DataSetHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DataSetHeader const & type is null", 0);
        return ;
    } 
    (arg1)->AddDataSetHdr((DataSetHeader const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupHeader_GetDataSet(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t arg2 ;
    DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        DataSetHeader &_result_ref = (arg1)->GetDataSet(arg2);
        result = (DataSetHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupHeader_GetDataSetConst(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t arg2 ;
    DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        DataSetHeader const &_result_ref = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetConst(arg2);
        result = (DataSetHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_GetDataSetIterators(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    DataSetHdrIt *arg2 = 0 ;
    DataSetHdrIt *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (DataSetHdrIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DataSetHdrIt & type is null", 0);
        return ;
    } 
    arg3 = (DataSetHdrIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DataSetHdrIt & type is null", 0);
        return ;
    } 
    (arg1)->GetDataSetIterators(*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_SetDataSetPos(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetDataSetPos(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataGroupHeader_GetDataSetPos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetPos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeader_SetNextCubePos(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetNextCubePos(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataGroupHeader_GetNextCubePos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetNextCubePos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupHeader_FindDataSetHeader(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetHeader *)(arg1)->FindDataSetHeader((std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSet(char * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
    void *arg3 = (void *) 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    arg2 = (affymetrix_calvin_io::DataSetHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataSetHeader const & type is null", 0);
        return 0;
    } 
    arg3 = (void *)jarg3; 
    result = (affymetrix_calvin_io::DataSet *)new affymetrix_calvin_io::DataSet((std::string const &)*arg1,(affymetrix_calvin_io::DataSetHeader const &)*arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_Delete(void * jarg1) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    (arg1)->Delete();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSet_Open(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    result = (bool)(arg1)->Open();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_Close(void * jarg1) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataSet_Header(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    {
        affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_Rows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    result = (int32_t)(arg1)->Rows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_Cols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    result = (int32_t)(arg1)->Cols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSet_IsOpen(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    result = (bool)(arg1)->IsOpen();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int8_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (u_int8_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int8_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int8_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int8_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int8_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int16_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (u_int16_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int16_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int16_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int16_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int16_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_4(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int32_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (u_int32_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int32_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_5(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_6(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    float *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (float *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_7(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    std::string *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (std::string *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_8(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    std::wstring *arg4 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (std::wstring *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_9(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint8Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Uint8Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint8Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_10(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int8Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Int8Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Int8Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_11(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint16Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Uint16Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint16Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_12(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int16Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Int16Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Int16Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_13(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint32Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Uint32Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Uint32Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_14(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int32Vector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (Int32Vector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Int32Vector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_15(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    FloatVector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (FloatVector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FloatVector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_16(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::vector<std::string > *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (std::vector<std::string > *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<std::string > & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_GetData__SWIG_17(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    WStringVector *arg5 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (WStringVector *)jarg5;
    if(!arg5) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WStringVector & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int8_t *arg5 = (u_int8_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (u_int8_t *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int8_t *arg5 = (int8_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int16_t *arg5 = (u_int16_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (u_int16_t *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int16_t *arg5 = (int16_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (int16_t *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int32_t *arg5 = (u_int32_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (u_int32_t *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_5(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int32_t *arg5 = (int32_t *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (int32_t *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_6(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    float *arg5 = (float *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (float *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_7(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::string *arg5 = (std::string *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (std::string *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_GetDataRaw__SWIG_8(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::wstring *arg5 = (std::wstring *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = (std::wstring *)jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSet_CheckRowColumnAndType(void * jarg1, int jarg2, int jarg3, int jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    affymetrix_calvin_io::DataSetColumnTypes arg4 ;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (affymetrix_calvin_io::DataSetColumnTypes)jarg4; 
    (arg1)->CheckRowColumnAndType(arg2,arg3,arg4);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSet_BytesPerRow(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSet *)jarg1; 
    result = (int32_t)(arg1)->BytesPerRow();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSetHeader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    result = (affymetrix_calvin_io::DataSetHeader *)new affymetrix_calvin_io::DataSetHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataSetHeader(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_Clear(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSetHeader_GetDataSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSetHeader_GetRowSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_SetName(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataSetHeader_GetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSetHeader_GetNameValParamCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValParamCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddNameValParam(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return ;
    } 
    (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_GetNameValIterators(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueTypeConstIt & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueTypeConstIt & type is null", 0);
        return ;
    } 
    ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValIterators(*arg2,*arg3);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSetHeader_FindNameValParam(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType & type is null", 0);
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::DataSetHeader const *)arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddColumnType(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (affymetrix_calvin_io::ColumnType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::ColumnType const & type is null", 0);
        return ;
    } 
    (arg1)->AddColumnType((affymetrix_calvin_io::ColumnType const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddIntColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddIntColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddUIntColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddUIntColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddShortColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddShortColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddUShortColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddUShortColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddByteColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddByteColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddUByteColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddUByteColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddFloatColumnType(void * jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    (arg1)->AddFloatColumnType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddAsciiColumnType(void * jarg1, int jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->AddAsciiColumnType(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_AddUnicodeColumnType(void * jarg1, int jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->AddUnicodeColumnType(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataSetHeader_GetColumnType(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::ColumnType > result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnType(arg2);
    
    jresult = new affymetrix_calvin_io::ColumnType((affymetrix_calvin_io::ColumnType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSetHeader_GetRowCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_SetRowCnt(void * jarg1, int jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRowCnt(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataSetHeader_GetColumnCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_SetHeaderStartFilePos(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetHeaderStartFilePos(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSetHeader_GetHeaderStartFilePos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetHeaderStartFilePos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeader_SetDataStartFilePos(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetDataStartFilePos(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSetHeader_GetDataStartFilePos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataStartFilePos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_MAGIC_NUM() {
    unsigned char jresult = 0 ;
    u_int8_t result;
    
    result = (u_int8_t)(u_int8_t)affymetrix_calvin_io::MAGIC_NUM;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_VERSION() {
    unsigned char jresult = 0 ;
    u_int8_t result;
    
    result = (u_int8_t)(u_int8_t)affymetrix_calvin_io::VERSION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileHeader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *result;
    
    result = (affymetrix_calvin_io::FileHeader *)new affymetrix_calvin_io::FileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileHeader(void * jarg1) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_Clear(void * jarg1) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FileHeader_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FileHeader_GetMagicNumber(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetMagicNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FileHeader_GetVersion(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileHeader_GetDataGroupCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_AddDataGroupHdr(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (affymetrix_calvin_io::DataGroupHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader const & type is null", 0);
        return ;
    } 
    (arg1)->AddDataGroupHdr((affymetrix_calvin_io::DataGroupHeader const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileHeader_GetDataGroup(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        affymetrix_calvin_io::DataGroupHeader &_result_ref = (arg1)->GetDataGroup(arg2);
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileHeader_GetDataGroupConst(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        affymetrix_calvin_io::DataGroupHeader const &_result_ref = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupConst(arg2);
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_GetDataGroupIts(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    affymetrix_calvin_io::DataGroupHdrIt *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHdrIt *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (affymetrix_calvin_io::DataGroupHdrIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHdrIt & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHdrIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHdrIt & type is null", 0);
        return ;
    } 
    (arg1)->GetDataGroupIts(*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_SetGenericDataHdr(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    GenericDataHeader *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (GenericDataHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GenericDataHeader const & type is null", 0);
        return ;
    } 
    (arg1)->SetGenericDataHdr((GenericDataHeader const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileHeader_GetGenericDataHdr(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    GenericDataHeader *result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (GenericDataHeader *)(arg1)->GetGenericDataHdr();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileHeader_FindDataGroupHeader(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileHeader_GetNumDataGroups(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetNumDataGroups();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_SetNumDataGroups(void * jarg1, int jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetNumDataGroups(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileHeader_GetFirstDataGroupFilePos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    result = (u_int32_t)(arg1)->GetFirstDataGroupFilePos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeader_SetFirstDataGroupFilePos(void * jarg1, unsigned int jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int32_t arg2 ;
    
    arg1 = (affymetrix_calvin_io::FileHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetFirstDataGroupFilePos(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GenericData() {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *result;
    
    result = (affymetrix_calvin_io::GenericData *)new affymetrix_calvin_io::GenericData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GenericData(void * jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GenericData_FileIdentifier(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    result = (arg1)->FileIdentifier();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GenericData_ArrayFileIdentifier(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    result = (arg1)->ArrayFileIdentifier();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_Header(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::FileHeader *result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    {
        affymetrix_calvin_io::FileHeader &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::FileHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericData_DataGroupCnt(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::GenericData const *)arg1)->DataGroupCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_DataGroupNames(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::vector<std::wstring > *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::vector<std::wstring > *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<std::wstring > & type is null", 0);
        return ;
    } 
    (arg1)->DataGroupNames(*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericData_DataSetCnt__SWIG_0(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (u_int32_t)(arg1)->DataSetCnt(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericData_DataSetCnt__SWIG_1(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->DataSetCnt((std::wstring const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_DataSetNames__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    std::vector<std::wstring > *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (std::vector<std::wstring > *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<std::wstring > & type is null", 0);
        return ;
    } 
    (arg1)->DataSetNames(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_DataSetNames__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::vector<std::wstring > *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    arg3 = (std::vector<std::wstring > *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<std::wstring > & type is null", 0);
        return ;
    } 
    (arg1)->DataSetNames((std::wstring const &)*arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_DataSet__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    u_int32_t arg3 ;
    affymetrix_calvin_io::DataSet *result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (u_int32_t)jarg3; 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_DataSet__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg3 = (std::wstring *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_DataGroup(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroup > result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (arg1)->DataGroup(arg2);
    
    jresult = new affymetrix_calvin_io::DataGroup((affymetrix_calvin_io::DataGroup &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_Clear(void * jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_ReadFullDataSetHeader(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (affymetrix_calvin_io::DataSetHeader *)jarg2; 
    (arg1)->ReadFullDataSetHeader(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericData_IsDPHPartiallyRead(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (affymetrix_calvin_io::DataSetHeader *)jarg2; 
    result = (bool)(arg1)->IsDPHPartiallyRead((affymetrix_calvin_io::DataSetHeader const *)arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_OpenFStream(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::ifstream *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    (arg1)->OpenFStream(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_FindDataGroupHeader__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_FindDataGroupHeader__SWIG_1(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_FindDataSetHeader__SWIG_0(void * jarg1, unsigned int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericData_FindDataSetHeader__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,(std::wstring const &)*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericData_MapFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    result = (bool)(arg1)->MapFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericData_UnmapFile(void * jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericData *)jarg1; 
    (arg1)->UnmapFile();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GenericDataHeader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *result;
    
    result = (affymetrix_calvin_io::GenericDataHeader *)new affymetrix_calvin_io::GenericDataHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GenericDataHeader(void * jarg1) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_Clear(void * jarg1) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_SetFileTypeId(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFileTypeId((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GenericDataHeader_GetFileTypeId(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileTypeId();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_SetFileId(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFileId((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GenericDataHeader_GetFileId(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileId();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_SetFileCreationTime(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetFileCreationTime((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericDataHeader_GetFileCreationTime(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileCreationTime();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_SetLocale(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return ;
    } 
    (arg1)->SetLocale((std::wstring const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericDataHeader_GetLocale(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetLocale();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_AddNameValParam(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType const & type is null", 0);
        return ;
    } 
    (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericDataHeader_GetNameValParam(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_parameter::ParameterNameValueType result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetNameValParam(arg2);
    
    jresult = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GenericDataHeader_GetNameValParamCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetNameValParamCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_GetNameValIterators(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterNameValueTypeIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueTypeIt & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_parameter::ParameterNameValueTypeIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueTypeIt & type is null", 0);
        return ;
    } 
    (arg1)->GetNameValIterators(*arg2,*arg3);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_GenericDataHeader_GetParentCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParentCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_AddParent(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericDataHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericDataHeader const & type is null", 0);
        return ;
    } 
    (arg1)->AddParent((affymetrix_calvin_io::GenericDataHeader const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericDataHeader_GetParent(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::GenericDataHeader result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParent(arg2);
    
    jresult = new affymetrix_calvin_io::GenericDataHeader((affymetrix_calvin_io::GenericDataHeader &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeader_GetParentIterators(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg2 = 0 ;
    std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator & type is null", 0);
        return ;
    } 
    arg3 = (std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator & type is null", 0);
        return ;
    } 
    (arg1)->GetParentIterators(*arg2,*arg3);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericDataHeader_FindNameValParam(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_parameter::ParameterNameValueType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueType & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericDataHeader_GetNameValParamsBeginsWith(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeVector *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_parameter::ParameterNameValueTypeVector *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_parameter::ParameterNameValueTypeVector & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetNameValParamsBeginsWith((std::wstring const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_SCAN_ACQUISITION_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::SCAN_ACQUISITION_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_INTENSITY_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::INTENSITY_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_EXPRESSION_RESULTS_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::EXPRESSION_RESULTS_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GENOTYPING_RESULTS_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::GENOTYPING_RESULTS_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_RESEQUENCING_RESULTS_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::RESEQUENCING_RESULTS_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_TAG_RESULTS_DATA_TYPE() {
    void * jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::TAG_RESULTS_DATA_TYPE;
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *result;
    
    result = (affymetrix_calvin_io::ArrayFileReader *)new affymetrix_calvin_io::ArrayFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayFileReader(void * jarg1) {
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::ArrayFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayFileReader_Read__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool arg4 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::ArrayFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (affymetrix_calvin_array::ArrayData *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_array::ArrayData & type is null", 0);
        return 0;
    } 
    arg4 = jarg4 ? true : false; 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayFileReader_Read__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::ArrayFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (affymetrix_calvin_array::ArrayData *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_array::ArrayData & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrayFileReader_DataTypeIdentifier__SWIG_0(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_calvin_io::ArrayFileReader *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_calvin_io::ArrayFileReader const *)arg1)->DataTypeIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = SWIG_csharp_string_callback(result->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayFileReader_IsFileType(char * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
    bool result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    result = (bool)affymetrix_calvin_io::ArrayFileReader::IsFileType((std::string const &)*arg1,(std::string const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrayFileReader_DataTypeIdentifier__SWIG_1(char * jarg1) {
    char * jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg1_str(jarg1);
    arg1 = &arg1_str; 
    result = affymetrix_calvin_io::ArrayFileReader::DataTypeIdentifier((std::string const &)*arg1);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_USER_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "User";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_DATE_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "Date";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_TIME_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "Time";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_ACTION_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "Action";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_ARRAY_ID_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "ArrayId";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_INPUT_ID_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "InputId";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_OUTPUT_ID_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "OutputId";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_START_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "#Audit-Start";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_AUDIT_END_TAG() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "#Audit-End";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuditFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::AuditFileReader *result;
    
    result = (affymetrix_calvin_io::AuditFileReader *)new affymetrix_calvin_io::AuditFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AuditFileReader(void * jarg1) {
    affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::AuditFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AuditFileReader_Read(void * jarg1, char * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayAuditEntryList *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_calvin_io::AuditFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (affymetrix_calvin_array::ArrayAuditEntryList *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_array::ArrayAuditEntryList & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDFFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CDFFileReader *result;
    
    result = (affymetrix_calvin_io::CDFFileReader *)new affymetrix_calvin_io::CDFFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDFFileReader(void * jarg1) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CDFFileReader_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CDFFileReader *)jarg1; 
    result = ((affymetrix_calvin_io::CDFFileReader const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFFileReader_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFFileReader_Read__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    affymetrix_calvin_io::CDFData *arg2 = 0 ;
    affymetrix_calvin_io::CDFFileReader::ReadMode arg3 ;
    
    arg1 = (affymetrix_calvin_io::CDFFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::CDFData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CDFData & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::CDFFileReader::ReadMode)jarg3; 
    (arg1)->Read(*arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDFFileReader_Read__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    affymetrix_calvin_io::CDFData *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CDFFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::CDFData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CDFData & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CHPFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CHPFileReader *result;
    
    result = (affymetrix_calvin_io::CHPFileReader *)new affymetrix_calvin_io::CHPFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CHPFileReader(void * jarg1) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CHPFileReader_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CHPFileReader *)jarg1; 
    result = ((affymetrix_calvin_io::CHPFileReader const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPFileReader_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CHPFileReader_Read(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    affymetrix_calvin_io::CHPData *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CHPFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::CHPData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CHPData & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CelFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::CelFileReader *result;
    
    result = (affymetrix_calvin_io::CelFileReader *)new affymetrix_calvin_io::CelFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CelFileReader(void * jarg1) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CelFileReader_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::CelFileReader *)jarg1; 
    result = ((affymetrix_calvin_io::CelFileReader const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileReader_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CelFileReader_Read(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    affymetrix_calvin_io::CelFileData *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::CelFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::CelFileData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::CelFileData & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroupHeaderReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *result;
    
    result = (affymetrix_calvin_io::DataGroupHeaderReader *)new affymetrix_calvin_io::DataGroupHeaderReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeaderReader_ReadAllMinimumInfo(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::FileHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::FileHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::FileHeader & type is null", 0);
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataGroupHeaderReader_ReadAll(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::FileHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::FileHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::FileHeader & type is null", 0);
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAll(*arg2,*arg3,arg4);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataGroupHeaderReader_ReadMinimumInfo(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataGroupHeaderReader_Read(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataGroupHeaderReader_ReadHeader(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadHeader(*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataGroupHeaderReader(void * jarg1) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataGroupReader(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupReader *result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (affymetrix_calvin_io::DataGroupHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupReader *)new affymetrix_calvin_io::DataGroupReader(*arg1,*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataGroupReader(void * jarg1) {
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataGroupReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataGroupReader_GetDataSetCnt(void * jarg1) {
    int jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataGroupReader *)jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataSetCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupReader_GetDataGroupName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::DataGroupReader *)jarg1; 
    result = ((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataGroupName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupReader_GetDataSetReader__SWIG_0(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<DataSetReader > result;
    
    arg1 = (affymetrix_calvin_io::DataGroupReader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetDataSetReader(arg2);
    
    jresult = new DataSetReader((DataSetReader &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataGroupReader_GetDataSetReader__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    std::wstring *arg2 = 0 ;
    SwigValueWrapper<DataSetReader > result;
    
    arg1 = (affymetrix_calvin_io::DataGroupReader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (arg1)->GetDataSetReader((std::wstring const &)*arg2);
    
    jresult = new DataSetReader((DataSetReader &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSetHeaderReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *result;
    
    result = (affymetrix_calvin_io::DataSetHeaderReader *)new affymetrix_calvin_io::DataSetHeaderReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeaderReader_ReadAllMinimumInfo(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetHeaderReader_ReadAll(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::DataGroupHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataGroupHeader & type is null", 0);
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAll(*arg2,*arg3,arg4);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSetHeaderReader_ReadMinimumInfo(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_io::DataSetHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataSetHeader & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataSetHeaderReader_Read(void * jarg1, void * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::DataSetHeaderReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg3 = (affymetrix_calvin_io::DataSetHeader *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataSetHeader & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataSetHeaderReader(void * jarg1) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetHeaderReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataSetReader(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
    affymetrix_calvin_io::DataSetReader *result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (affymetrix_calvin_io::DataSetHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::DataSetHeader & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetReader *)new affymetrix_calvin_io::DataSetReader(*arg1,*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataSetReader(void * jarg1) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataSetReader_GetDataSetName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    result = ((affymetrix_calvin_io::DataSetReader const *)arg1)->GetDataSetName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataSetReader_GetDataSetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    {
        affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->GetDataSetHeader();
        result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_0(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int8_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (int8_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int8_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int8_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (u_int8_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int8_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_2(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int16_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (int16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int16_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_3(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int16_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (u_int16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int16_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_4(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int32_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (int32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_5(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int32_t *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (u_int32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u_int32_t & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_6(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    float *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (float *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_7(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataSetReader_Read__SWIG_8(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::DataSetReader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileNotFoundException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::FileNotFoundException *result;
    
    result = (affymetrix_calvin_exceptions::FileNotFoundException *)new affymetrix_calvin_exceptions::FileNotFoundException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileNotFoundException(void * jarg1) {
    affymetrix_calvin_exceptions::FileNotFoundException *arg1 = (affymetrix_calvin_exceptions::FileNotFoundException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::FileNotFoundException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InvalidVersionException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::InvalidVersionException *result;
    
    result = (affymetrix_calvin_exceptions::InvalidVersionException *)new affymetrix_calvin_exceptions::InvalidVersionException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InvalidVersionException(void * jarg1) {
    affymetrix_calvin_exceptions::InvalidVersionException *arg1 = (affymetrix_calvin_exceptions::InvalidVersionException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::InvalidVersionException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InvalidFileTypeException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::InvalidFileTypeException *result;
    
    result = (affymetrix_calvin_exceptions::InvalidFileTypeException *)new affymetrix_calvin_exceptions::InvalidFileTypeException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InvalidFileTypeException(void * jarg1) {
    affymetrix_calvin_exceptions::InvalidFileTypeException *arg1 = (affymetrix_calvin_exceptions::InvalidFileTypeException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::InvalidFileTypeException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnableToOpenFileException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::UnableToOpenFileException *result;
    
    result = (affymetrix_calvin_exceptions::UnableToOpenFileException *)new affymetrix_calvin_exceptions::UnableToOpenFileException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnableToOpenFileException(void * jarg1) {
    affymetrix_calvin_exceptions::UnableToOpenFileException *arg1 = (affymetrix_calvin_exceptions::UnableToOpenFileException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::UnableToOpenFileException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileNotOpenException() {
    void * jresult = 0 ;
    affymetrix_calvin_exceptions::FileNotOpenException *result;
    
    result = (affymetrix_calvin_exceptions::FileNotOpenException *)new affymetrix_calvin_exceptions::FileNotOpenException();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileNotOpenException(void * jarg1) {
    affymetrix_calvin_exceptions::FileNotOpenException *arg1 = (affymetrix_calvin_exceptions::FileNotOpenException *) 0 ;
    
    arg1 = (affymetrix_calvin_exceptions::FileNotOpenException *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileHeaderReader(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::FileHeader *arg2 = 0 ;
    affymetrix_calvin_io::FileHeaderReader *result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (affymetrix_calvin_io::FileHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::FileHeader & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::FileHeaderReader *)new affymetrix_calvin_io::FileHeaderReader(*arg1,*arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileHeaderReader_Read(void * jarg1) {
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeaderReader *)jarg1; 
    (arg1)->Read();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileHeaderReader_GetDataGroupCnt(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeaderReader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetDataGroupCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileHeaderReader_GetFirstDataGroupFilePos(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::FileHeaderReader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetFirstDataGroupFilePos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileHeaderReader(void * jarg1) {
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FileHeaderReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_FileInput_ReadInt8__SWIG_0(void * jarg1) {
    char jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int8_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_FileInput_ReadInt16__SWIG_0(void * jarg1) {
    short jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int16_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileInput_ReadInt32__SWIG_0(void * jarg1) {
    int jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FileInput_ReadUInt8__SWIG_0(void * jarg1) {
    unsigned char jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int8_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FileInput_ReadUInt16__SWIG_0(void * jarg1) {
    unsigned short jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int16_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileInput_ReadUInt32__SWIG_0(void * jarg1) {
    unsigned int jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int32_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FileInput_ReadFloat__SWIG_0(void * jarg1) {
    float jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    float result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FileInput_ReadInt8__SWIG_1(void * jarg1) {
    char jresult = 0 ;
    char **arg1 = 0 ;
    int8_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_FileInput_ReadInt16__SWIG_1(void * jarg1) {
    short jresult = 0 ;
    char **arg1 = 0 ;
    int16_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileInput_ReadInt32__SWIG_1(void * jarg1) {
    int jresult = 0 ;
    char **arg1 = 0 ;
    int32_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FileInput_ReadUInt8__SWIG_1(void * jarg1) {
    unsigned char jresult = 0 ;
    char **arg1 = 0 ;
    u_int8_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FileInput_ReadUInt16__SWIG_1(void * jarg1) {
    unsigned short jresult = 0 ;
    char **arg1 = 0 ;
    u_int16_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileInput_ReadUInt32__SWIG_1(void * jarg1) {
    unsigned int jresult = 0 ;
    char **arg1 = 0 ;
    u_int32_t result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FileInput_ReadFloat__SWIG_1(void * jarg1) {
    float jresult = 0 ;
    char **arg1 = 0 ;
    float result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInput_ReadString16__SWIG_0(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInput_ReadString16__SWIG_1(void * jarg1) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    std::wstring result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FileInput_ReadString8__SWIG_0(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t arg2 ;
    std::string result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FileInput_ReadString8__SWIG_1(void * jarg1) {
    char * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    std::string result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInput_ReadString16__SWIG_2(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    char **arg1 = 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileInput_ReadString16__SWIG_3(void * jarg1) {
    void * jresult = 0 ;
    char **arg1 = 0 ;
    std::wstring result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FileInput_ReadString8__SWIG_2(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    char **arg1 = 0 ;
    int32_t arg2 ;
    std::string result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FileInput_ReadString8__SWIG_3(void * jarg1) {
    char * jresult = 0 ;
    char **arg1 = 0 ;
    std::string result;
    
    arg1 = (char **)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileInput_ReadBlob(void * jarg1, void * jarg2) {
    int jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    void **arg2 = 0 ;
    int32_t result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    arg2 = (void **)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void const *& type is null", 0);
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadBlob(*arg1,(void const *&)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileInput() {
    void * jresult = 0 ;
    affymetrix_calvin_io::FileInput *result;
    
    result = (affymetrix_calvin_io::FileInput *)new affymetrix_calvin_io::FileInput();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileInput(void * jarg1) {
    affymetrix_calvin_io::FileInput *arg1 = (affymetrix_calvin_io::FileInput *) 0 ;
    
    arg1 = (affymetrix_calvin_io::FileInput *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GenericDataHeaderReader(void * jarg1) {
    void * jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::GenericDataHeaderReader *result;
    
    arg1 = (std::ifstream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return 0;
    } 
    result = (affymetrix_calvin_io::GenericDataHeaderReader *)new affymetrix_calvin_io::GenericDataHeaderReader(*arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericDataHeaderReader_Read(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericDataHeader *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericDataHeader & type is null", 0);
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GenericDataHeaderReader(void * jarg1) {
    affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GenericFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *result;
    
    result = (affymetrix_calvin_io::GenericFileReader *)new affymetrix_calvin_io::GenericFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GenericFileReader(void * jarg1) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GenericFileReader_GetFilename(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    result = ((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetFilename();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_SetFilename(void * jarg1, char * jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_ReadHeader__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    affymetrix_calvin_io::GenericFileReader::ReadHeaderOption arg3 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericData & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::GenericFileReader::ReadHeaderOption)jarg3; 
    (arg1)->ReadHeader(*arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_ReadHeader__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericData & type is null", 0);
        return ;
    } 
    (arg1)->ReadHeader(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_Open__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    affymetrix_calvin_io::GenericFileReader::OpenHint arg3 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericData & type is null", 0);
        return ;
    } 
    arg3 = (affymetrix_calvin_io::GenericFileReader::OpenHint)jarg3; 
    (arg1)->Open(*arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_Open__SWIG_1(void * jarg1, void * jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (affymetrix_calvin_io::GenericData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_io::GenericData & type is null", 0);
        return ;
    } 
    (arg1)->Open(*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericFileReader_GetDataGroupCnt(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetDataGroupCnt();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericFileReader_GetDataGroupReader__SWIG_0(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetDataGroupReader(arg2);
    
    jresult = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericFileReader_GetDataGroupReader__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::wstring *arg2 = 0 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    arg2 = (std::wstring *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
        return 0;
    } 
    result = (arg1)->GetDataGroupReader((std::wstring const &)*arg2);
    
    jresult = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericFileReader_Close(void * jarg1) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GenericFileReader *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_GRD_FILE_TYPE_IDENTIFIER() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-calvin-grid-control";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridControlFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::GridControlFileReader *result;
    
    result = (affymetrix_calvin_io::GridControlFileReader *)new affymetrix_calvin_io::GridControlFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GridControlFileReader(void * jarg1) {
    affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::GridControlFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridControlFileReader_Read(void * jarg1, char * jarg2, void * jarg3) {
    affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_grid_control::GridControlData *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::GridControlFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (affymetrix_grid_control::GridControlData *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_grid_control::GridControlData & type is null", 0);
        return ;
    } 
    (arg1)->Read((std::string const &)*arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TemplateFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::TemplateFileReader *result;
    
    result = (affymetrix_calvin_io::TemplateFileReader *)new affymetrix_calvin_io::TemplateFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TemplateFileReader(void * jarg1) {
    affymetrix_calvin_io::TemplateFileReader *arg1 = (affymetrix_calvin_io::TemplateFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::TemplateFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextFileReader() {
    void * jresult = 0 ;
    affymetrix_calvin_io::TextFileReader *result;
    
    result = (affymetrix_calvin_io::TextFileReader *)new affymetrix_calvin_io::TextFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TextFileReader(void * jarg1) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    
    arg1 = (affymetrix_calvin_io::TextFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextFileReader_ReadFile__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    std::string *arg2 = 0 ;
    std::map<std::string,std::string > *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::TextFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (std::map<std::string,std::string > *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map<std::string,std::string > & type is null", 0);
        return ;
    } 
    (arg1)->ReadFile((std::string const &)*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextFileReader_ReadFile__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    std::map<std::string,std::string > *arg3 = 0 ;
    
    arg1 = (affymetrix_calvin_io::TextFileReader *)jarg1; 
    arg2 = (std::ifstream *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ifstream & type is null", 0);
        return ;
    } 
    arg3 = (std::map<std::string,std::string > *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map<std::string,std::string > & type is null", 0);
        return ;
    } 
    (arg1)->ReadFile(*arg2,*arg3);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_TEMPLATE_FILE_CREATEION_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::TEMPLATE_FILE_CREATEION_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION() {
    int jresult = 0 ;
    int32_t result;
    
    result = (int32_t)(int32_t)affymetrix_calvin_array::TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_TEMPLATE_FILE_TYPE_IDENTIFIER() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "affymetrix-calvin-template";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TemplateData() {
    void * jresult = 0 ;
    affymetrix_calvin_array::TemplateData *result;
    
    result = (affymetrix_calvin_array::TemplateData *)new affymetrix_calvin_array::TemplateData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TemplateData(void * jarg1) {
    affymetrix_calvin_array::TemplateData *arg1 = (affymetrix_calvin_array::TemplateData *) 0 ;
    
    arg1 = (affymetrix_calvin_array::TemplateData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get__AFFY_BASE_TYPE_H() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get___int8_t_defined() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_AFFX_FILEIO_H() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUInt32_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    uint32_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (uint32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint32_t & type is null", 0);
        return ;
    } 
    ReadUInt32_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadInt32_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    int32_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (int32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t & type is null", 0);
        return ;
    } 
    ReadInt32_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFloat_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (float *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    ReadFloat_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUInt16_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    uint16_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (uint16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint16_t & type is null", 0);
        return ;
    } 
    ReadUInt16_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadInt16_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    int16_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (int16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int16_t & type is null", 0);
        return ;
    } 
    ReadInt16_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadCString_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    char **arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (char **)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return ;
    } 
    ReadCString_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadString_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    ReadString_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUIntLenString_I(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    ReadUIntLenString_I(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUInt8(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    uint8_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (uint8_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint8_t & type is null", 0);
        return ;
    } 
    ReadUInt8(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadInt8(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    int8_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (int8_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int8_t & type is null", 0);
        return ;
    } 
    ReadInt8(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUInt32_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    uint32_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (uint32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint32_t & type is null", 0);
        return ;
    } 
    ReadUInt32_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadInt32_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    int32_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (int32_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t & type is null", 0);
        return ;
    } 
    ReadInt32_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFloat_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (float *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    ReadFloat_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUInt16_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    uint16_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (uint16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint16_t & type is null", 0);
        return ;
    } 
    ReadUInt16_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadInt16_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    int16_t *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (int16_t *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int16_t & type is null", 0);
        return ;
    } 
    ReadInt16_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadCString_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    char **arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (char **)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "char *& type is null", 0);
        return ;
    } 
    ReadCString_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadString_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    ReadString_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadUIntLenString_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    ReadUIntLenString_N(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFixedString(void * jarg1, void * jarg2, unsigned int jarg3) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    uint32_t arg3 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    arg3 = (uint32_t)jarg3; 
    ReadFixedString(*arg1,*arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFixedCString(void * jarg1, char * jarg2, unsigned int jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    uint32_t arg3 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = jarg2; 
    arg3 = (uint32_t)jarg3; 
    ReadFixedCString(*arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFixedUCString(void * jarg1, void * jarg2, unsigned int jarg3) {
    std::istream *arg1 = 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    uint32_t arg3 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (unsigned char *)jarg2; 
    arg3 = (uint32_t)jarg3; 
    ReadFixedUCString(*arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadCharacterArray(void * jarg1, char * jarg2, unsigned int jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    uint32_t arg3 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = jarg2; 
    arg3 = (uint32_t)jarg3; 
    ReadCharacterArray(*arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadNextLine(void * jarg1, char * jarg2, int jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    ReadNextLine(*arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReadFloatFromOldBPMAP_N(void * jarg1, void * jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    arg1 = (std::istream *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
        return ;
    } 
    arg2 = (float *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
        return ;
    } 
    ReadFloatFromOldBPMAP_N(*arg1,*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MmGetUInt32_I(void * jarg1) {
    unsigned int jresult = 0 ;
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t result;
    
    arg1 = (uint32_t *)jarg1; 
    result = (uint32_t)MmGetUInt32_I(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MmGetInt32_I(void * jarg1) {
    int jresult = 0 ;
    int32_t *arg1 = (int32_t *) 0 ;
    int32_t result;
    
    arg1 = (int32_t *)jarg1; 
    result = (int32_t)MmGetInt32_I(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MmGetUInt16_I(void * jarg1) {
    unsigned short jresult = 0 ;
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t result;
    
    arg1 = (uint16_t *)jarg1; 
    result = (uint16_t)MmGetUInt16_I(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MmGetInt16_I(void * jarg1) {
    short jresult = 0 ;
    int16_t *arg1 = (int16_t *) 0 ;
    int16_t result;
    
    arg1 = (int16_t *)jarg1; 
    result = (int16_t)MmGetInt16_I(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MmGetUInt8(void * jarg1) {
    unsigned char jresult = 0 ;
    uint8_t *arg1 = (uint8_t *) 0 ;
    uint8_t result;
    
    arg1 = (uint8_t *)jarg1; 
    result = (uint8_t)MmGetUInt8(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_MmGetInt8(char * jarg1) {
    char jresult = 0 ;
    int8_t *arg1 = (int8_t *) 0 ;
    int8_t result;
    
    arg1 = jarg1; 
    result = (int8_t)MmGetInt8(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MmGetUInt32_N(void * jarg1) {
    unsigned int jresult = 0 ;
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t result;
    
    arg1 = (uint32_t *)jarg1; 
    result = (uint32_t)MmGetUInt32_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MmGetUInt16_N(void * jarg1) {
    unsigned short jresult = 0 ;
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t result;
    
    arg1 = (uint16_t *)jarg1; 
    result = (uint16_t)MmGetUInt16_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MmGetFloat_N(void * jarg1) {
    float jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    arg1 = (float *)jarg1; 
    result = (float)MmGetFloat_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MmGetInt32_N(void * jarg1) {
    int jresult = 0 ;
    int32_t *arg1 = (int32_t *) 0 ;
    int32_t result;
    
    arg1 = (int32_t *)jarg1; 
    result = (int32_t)MmGetInt32_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MmGetInt16_N(void * jarg1) {
    short jresult = 0 ;
    int16_t *arg1 = (int16_t *) 0 ;
    int16_t result;
    
    arg1 = (int16_t *)jarg1; 
    result = (int16_t)MmGetInt16_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MmGetFloat_I(void * jarg1) {
    float jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    arg1 = (float *)jarg1; 
    result = (float)MmGetFloat_I(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MmGetFloatFromOldBPMAP_N(void * jarg1) {
    float jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    arg1 = (float *)jarg1; 
    result = (float)MmGetFloatFromOldBPMAP_N(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetUInt32_I(void * jarg1, unsigned int jarg2) {
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t arg2 ;
    
    arg1 = (uint32_t *)jarg1; 
    arg2 = (uint32_t)jarg2; 
    MmSetUInt32_I(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetUInt16_I(void * jarg1, unsigned short jarg2) {
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t arg2 ;
    
    arg1 = (uint16_t *)jarg1; 
    arg2 = (uint16_t)jarg2; 
    MmSetUInt16_I(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetUInt8(void * jarg1, unsigned char jarg2) {
    uint8_t *arg1 = (uint8_t *) 0 ;
    uint8_t arg2 ;
    
    arg1 = (uint8_t *)jarg1; 
    arg2 = (uint8_t)jarg2; 
    MmSetUInt8(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetFloat_I(void * jarg1, float jarg2) {
    float *arg1 = (float *) 0 ;
    float arg2 ;
    
    arg1 = (float *)jarg1; 
    arg2 = (float)jarg2; 
    MmSetFloat_I(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetUInt32_N(void * jarg1, unsigned int jarg2) {
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t arg2 ;
    
    arg1 = (uint32_t *)jarg1; 
    arg2 = (uint32_t)jarg2; 
    MmSetUInt32_N(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetUInt16_N(void * jarg1, unsigned short jarg2) {
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t arg2 ;
    
    arg1 = (uint16_t *)jarg1; 
    arg2 = (uint16_t)jarg2; 
    MmSetUInt16_N(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_MmSetFloat_N(void * jarg1, float jarg2) {
    float *arg1 = (float *) 0 ;
    float arg2 ;
    
    arg1 = (float *)jarg1; 
    arg2 = (float)jarg2; 
    MmSetFloat_N(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CoordinatePoint_x(void * jarg1, int jarg2) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t arg2 ;
    
    arg1 = (CoordinatePoint *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CoordinatePoint_x(void * jarg1) {
    int jresult = 0 ;
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t result;
    
    arg1 = (CoordinatePoint *)jarg1; 
    result = (int32_t) ((arg1)->x);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CoordinatePoint_y(void * jarg1, int jarg2) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t arg2 ;
    
    arg1 = (CoordinatePoint *)jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CoordinatePoint_y(void * jarg1) {
    int jresult = 0 ;
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t result;
    
    arg1 = (CoordinatePoint *)jarg1; 
    result = (int32_t) ((arg1)->y);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoordinatePoint() {
    void * jresult = 0 ;
    CoordinatePoint *result;
    
    result = (CoordinatePoint *)new CoordinatePoint();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoordinatePoint(void * jarg1) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    
    arg1 = (CoordinatePoint *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GridCoordinatesType_upperleft(void * jarg1, void * jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    arg2 = (CoordinatePoint *)jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GridCoordinatesType_upperleft(void * jarg1) {
    void * jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    result = (CoordinatePoint *)& ((arg1)->upperleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GridCoordinatesType_upperright(void * jarg1, void * jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    arg2 = (CoordinatePoint *)jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GridCoordinatesType_upperright(void * jarg1) {
    void * jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    result = (CoordinatePoint *)& ((arg1)->upperright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GridCoordinatesType_lowerright(void * jarg1, void * jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    arg2 = (CoordinatePoint *)jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GridCoordinatesType_lowerright(void * jarg1) {
    void * jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    result = (CoordinatePoint *)& ((arg1)->lowerright);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GridCoordinatesType_lowerleft(void * jarg1, void * jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    arg2 = (CoordinatePoint *)jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GridCoordinatesType_lowerleft(void * jarg1) {
    void * jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    result = (CoordinatePoint *)& ((arg1)->lowerleft);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridCoordinatesType() {
    void * jresult = 0 ;
    GridCoordinatesType *result;
    
    result = (GridCoordinatesType *)new GridCoordinatesType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GridCoordinatesType(void * jarg1) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    
    arg1 = (GridCoordinatesType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_TagValuePairType_Tag(void * jarg1, void * jarg2) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (TagValuePairType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->Tag = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_TagValuePairType_Tag(void * jarg1) {
    void * jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *result;
    
    arg1 = (TagValuePairType *)jarg1; 
    result = (std::string *)& ((arg1)->Tag);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_TagValuePairType_Value(void * jarg1, void * jarg2) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (TagValuePairType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->Value = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_TagValuePairType_Value(void * jarg1) {
    void * jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *result;
    
    arg1 = (TagValuePairType *)jarg1; 
    result = (std::string *)& ((arg1)->Value);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TagValuePairType__TagValuePairType_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    _TagValuePairType arg2 ;
    _TagValuePairType result;
    _TagValuePairType *argp2 ;
    
    arg1 = (TagValuePairType *)jarg1; 
    argp2 = (_TagValuePairType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null _TagValuePairType", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new _TagValuePairType((_TagValuePairType &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagValuePairType__TagValuePairType_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    _TagValuePairType arg2 ;
    bool result;
    _TagValuePairType *argp2 ;
    
    arg1 = (TagValuePairType *)jarg1; 
    argp2 = (_TagValuePairType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null _TagValuePairType", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TagValuePairType__TagValuePairType_equals_tag(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (TagValuePairType *)jarg1; 
    arg2 = jarg2; 
    result = (bool)(arg1)->operator ==((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TagValuePairType() {
    void * jresult = 0 ;
    TagValuePairType *result;
    
    result = (TagValuePairType *)new TagValuePairType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagValuePairType(void * jarg1) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    
    arg1 = (TagValuePairType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_MAX_PROBE_SET_NAME_LENGTH() {
    int jresult = 0 ;
    int result;
    
    result = (int) 64;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFFileHeader_GetCols(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFFileHeader_GetRows(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFFileHeader_GetNumProbeSets(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFFileHeader_GetNumQCProbeSets(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumQCProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCDFFileHeader_GetReference(void * jarg1) {
    void * jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    std::string *result;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    {
        std::string &_result_ref = (arg1)->GetReference();
        result = (std::string *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFFileHeader() {
    void * jresult = 0 ;
    affxcdf::CCDFFileHeader *result;
    
    result = (affxcdf::CCDFFileHeader *)new affxcdf::CCDFFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFFileHeader(void * jarg1) {
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    
    arg1 = (affxcdf::CCDFFileHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeInformation_GetListIndex(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeInformation_GetExpos(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeInformation_GetX(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeInformation_GetY(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CCDFProbeInformation_GetPBase(void * jarg1) {
    char jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    char result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CCDFProbeInformation_GetTBase(void * jarg1) {
    char jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    char result;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFProbeInformation() {
    void * jresult = 0 ;
    affxcdf::CCDFProbeInformation *result;
    
    result = (affxcdf::CCDFProbeInformation *)new affxcdf::CCDFProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFProbeInformation(void * jarg1) {
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    
    arg1 = (affxcdf::CCDFProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PROBE_SIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) (4+4+2+2+1+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    affxcdf::DirectionType result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (affxcdf::DirectionType)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetNumLists(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetNumCellsPerList(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetStart(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStart();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetStop(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStop();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetName(void * jarg1) {
    char * jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    result = (arg1)->GetName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFProbeGroupInformation_GetCell(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcdf::CCDFProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFProbeGroupInformation() {
    void * jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *result;
    
    result = (affxcdf::CCDFProbeGroupInformation *)new affxcdf::CCDFProbeGroupInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFProbeGroupInformation(void * jarg1) {
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    
    arg1 = (affxcdf::CCDFProbeGroupInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PROBE_GROUP_SIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) (64+4+4+4+4+1+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetProbeSetType(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    affxcdf::GeneChipProbeSetType result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    affxcdf::DirectionType result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (affxcdf::DirectionType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetNumLists(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetNumGroups(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetNumCellsPerList(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetProbeSetNumber(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFProbeSetInformation_GetGroupInformation(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeGroupInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcdf::CCDFProbeGroupInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFProbeGroupInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFProbeSetInformation() {
    void * jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *result;
    
    result = (affxcdf::CCDFProbeSetInformation *)new affxcdf::CCDFProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFProbeSetInformation(void * jarg1) {
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    
    arg1 = (affxcdf::CCDFProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PROBE_SET_SIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) (4+4+4+4+2+1+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFProbeSetNames() {
    void * jresult = 0 ;
    affxcdf::CCDFProbeSetNames *result;
    
    result = (affxcdf::CCDFProbeSetNames *)new affxcdf::CCDFProbeSetNames();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFProbeSetNames(void * jarg1) {
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    
    arg1 = (affxcdf::CCDFProbeSetNames *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFProbeSetNames_Clear(void * jarg1) {
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    
    arg1 = (affxcdf::CCDFProbeSetNames *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFProbeSetNames_GetName(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFProbeSetNames *)jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxcdf::CCDFProbeSetNames const *)arg1)->GetName(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFQCProbeInformation() {
    void * jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *result;
    
    result = (affxcdf::CCDFQCProbeInformation *)new affxcdf::CCDFQCProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFQCProbeInformation_GetX(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFQCProbeInformation_GetY(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFQCProbeInformation_GetPLen(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFQCProbeInformation_IsPerfectMatchProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFQCProbeInformation_IsBackgroundProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFQCProbeInformation(void * jarg1) {
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    
    arg1 = (affxcdf::CCDFQCProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_QC_PROBE_SIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) (2+2+1+1+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFQCProbeSetInformation_GetQCProbeSetType(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    affxcdf::GeneChipQCProbeSetType result;
    
    arg1 = (affxcdf::CCDFQCProbeSetInformation *)jarg1; 
    result = (affxcdf::GeneChipQCProbeSetType)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFQCProbeSetInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affxcdf::CCDFQCProbeSetInformation *)jarg1; 
    result = (int)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFQCProbeSetInformation_GetProbeInformation(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFQCProbeInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFQCProbeSetInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcdf::CCDFQCProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFQCProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFQCProbeSetInformation() {
    void * jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *result;
    
    result = (affxcdf::CCDFQCProbeSetInformation *)new affxcdf::CCDFQCProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFQCProbeSetInformation(void * jarg1) {
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    
    arg1 = (affxcdf::CCDFQCProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_QC_PROBE_SET_SIZE() {
    int jresult = 0 ;
    int result;
    
    result = (int) (4+2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFFileData_SetFileName(void * jarg1, char * jarg2) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCDFFileData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    affxcdf::CCDFFileHeader *result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    {
        affxcdf::CCDFFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affxcdf::CCDFFileHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFFileData_GetProbeSetName(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCDFFileData_GetChipType(void * jarg1) {
    char * jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetChipType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFFileData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFFileData_Close(void * jarg1) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCDFFileData_IsXDACompatibleFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCDFFileData_GetProbeSetType(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::GeneChipProbeSetType result;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFFileData const *)arg1)->GetProbeSetType(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFFileData_GetProbeSetInformation(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcdf::CCDFProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFFileData_GetQCProbeSetInformation(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcdf::CCDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCDFFileData_GetQCProbeSetInformation_By_Type(void * jarg1, int jarg2, void * jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    affxcdf::GeneChipQCProbeSetType arg2 ;
    affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    arg2 = (affxcdf::GeneChipQCProbeSetType)jarg2; 
    arg3 = (affxcdf::CCDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcdf::CCDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCDFFileData() {
    void * jresult = 0 ;
    affxcdf::CCDFFileData *result;
    
    result = (affxcdf::CCDFFileData *)new affxcdf::CCDFFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCDFFileData(void * jarg1) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    
    arg1 = (affxcdf::CCDFFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileEntryType_Intensity(void * jarg1, float jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float arg2 ;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CELFileEntryType_Intensity(void * jarg1) {
    float jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float result;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    result = (float) ((arg1)->Intensity);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileEntryType_Stdv(void * jarg1, float jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float arg2 ;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CELFileEntryType_Stdv(void * jarg1) {
    float jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float result;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    result = (float) ((arg1)->Stdv);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileEntryType_Pixels(void * jarg1, short jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    short arg2 ;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_CELFileEntryType_Pixels(void * jarg1) {
    short jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    short result;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    result = (short) ((arg1)->Pixels);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CELFileEntryType() {
    void * jresult = 0 ;
    affxcel::CELFileEntryType *result;
    
    result = (affxcel::CELFileEntryType *)new affxcel::CELFileEntryType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CELFileEntryType(void * jarg1) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    
    arg1 = (affxcel::CELFileEntryType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileTranscriptomeEntryType_Intensity(void * jarg1, unsigned short jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_CELFileTranscriptomeEntryType_Intensity(void * jarg1) {
    unsigned short jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short result;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    result = (unsigned short) ((arg1)->Intensity);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileTranscriptomeEntryType_Stdv(void * jarg1, unsigned short jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_CELFileTranscriptomeEntryType_Stdv(void * jarg1) {
    unsigned short jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short result;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    result = (unsigned short) ((arg1)->Stdv);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CELFileTranscriptomeEntryType_Pixels(void * jarg1, unsigned char jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_CELFileTranscriptomeEntryType_Pixels(void * jarg1) {
    unsigned char jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned char result;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    result = (unsigned char) ((arg1)->Pixels);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CELFileTranscriptomeEntryType() {
    void * jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *result;
    
    result = (affxcel::CELFileTranscriptomeEntryType *)new affxcel::CELFileTranscriptomeEntryType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CELFileTranscriptomeEntryType(void * jarg1) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    arg1 = (affxcel::CELFileTranscriptomeEntryType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCELFileHeaderData() {
    void * jresult = 0 ;
    affxcel::CCELFileHeaderData *result;
    
    result = (affxcel::CCELFileHeaderData *)new affxcel::CCELFileHeaderData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCELFileHeaderData(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_Clear(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetMagic(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMagic(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetMagic(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetMagic();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetVersion(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetVersion(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetCols(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCols(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetCols(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetRows(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetRows(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetRows(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetCells(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCells(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetCells(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_AppendHeader(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->AppendHeader((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetHeader(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetHeader((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetHeader(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetHeader();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetAlg(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetAlg((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetAlg(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetParams(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetParams((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetParams(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetParams();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_ParseChipType(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->ParseChipType();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetChipType(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetChipType((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetChipType(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_ParseDatHeader(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->ParseDatHeader();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetDatHeader__SWIG_0(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->SetDatHeader();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetDatHeader__SWIG_1(void * jarg1, char * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetDatHeader((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetDatHeader(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetDatHeader();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetMargin(void * jarg1, int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetMargin(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetMargin();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetOutliers(void * jarg1, unsigned int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (uint32_t)jarg2; 
    (arg1)->SetOutliers(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileHeaderData_GetOutliers(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (uint32_t)(arg1)->GetOutliers();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_IncrementOutliers(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->IncrementOutliers();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_DecrementOutliers(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->DecrementOutliers();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetMasked(void * jarg1, unsigned int jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t arg2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (uint32_t)jarg2; 
    (arg1)->SetMasked(arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileHeaderData_GetMasked(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (uint32_t)(arg1)->GetMasked();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_IncrementMasked(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->IncrementMasked();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_DecrementMasked(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->DecrementMasked();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_ParseAlgorithmParameters(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->ParseAlgorithmParameters();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_AddAlgorithmParameter__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (std::string *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    arg3 = (std::string *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
        return ;
    } 
    (arg1)->AddAlgorithmParameter(*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_AddAlgorithmParameter__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetAlgorithmParameter(void * jarg1, char * jarg2, char * jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    (arg1)->SetAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetAlgorithmParameter(void * jarg1, char * jarg2) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetAlgorithmParameterTag(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileHeaderData_GetNumberAlgorithmParameters(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileHeaderData_GetAlgorithmParameters(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_SetGridCorners(void * jarg1, void * jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    GridCoordinatesType arg2 ;
    GridCoordinatesType *argp2 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    argp2 = (GridCoordinatesType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GridCoordinatesType", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->SetGridCorners(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileHeaderData_ParseCorners(void * jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    (arg1)->ParseCorners();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCELFileHeaderData_GetGridCorners(void * jarg1) {
    void * jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    GridCoordinatesType result;
    
    arg1 = (affxcel::CCELFileHeaderData *)jarg1; 
    result = (arg1)->GetGridCorners();
    
    jresult = new GridCoordinatesType((GridCoordinatesType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_TEXT_CEL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::TEXT_CEL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_XDA_BCEL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::XDA_BCEL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_TRANSCRIPTOME_BCEL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::TRANSCRIPTOME_BCEL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_COMPACT_BCEL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::COMPACT_BCEL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_CEL_ALL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::CEL_ALL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_CEL_DATA() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::CEL_DATA;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_CEL_OUTLIER() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::CEL_OUTLIER;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_CCELFileData_CEL_MASK() {
    int jresult = 0 ;
    int result;
    
    result = (int)affxcel::CCELFileData::CEL_MASK;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCELFileData() {
    void * jresult = 0 ;
    affxcel::CCELFileData *result;
    
    result = (affxcel::CCELFileData *)new affxcel::CCELFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCELFileData(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetError(void * jarg1, char * jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetError((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCELFileData_GetThisPtr(void * jarg1) {
    void * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    affxcel::CCELFileData *result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (affxcel::CCELFileData *)(arg1)->GetThisPtr();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetFileName(void * jarg1, char * jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = ((affxcel::CCELFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetHeaderKey(void * jarg1, char * jarg2) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->GetHeaderKey((char const *)arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetCols(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetRows(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetHeaderString(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetHeaderString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCELFileData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    affxcel::CCELFileHeaderData *result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    {
        affxcel::CCELFileHeaderData &_result_ref = (arg1)->GetHeader();
        result = (affxcel::CCELFileHeaderData *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetAlg(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetParams(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetParams();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetAlgorithmParameter(void * jarg1, char * jarg2) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetAlgorithmParameterTag(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetNumberAlgorithmParameters(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetAlgorithmParameters(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetDatHeader(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetDatHeader();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCELFileData_GetChipType(void * jarg1) {
    char * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetCellMargin(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_GetNumOutliers(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (uint32_t)(arg1)->GetNumOutliers();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_GetNumMasked(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (uint32_t)(arg1)->GetNumMasked();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCELFileData_GetGridCorners(void * jarg1) {
    void * jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    GridCoordinatesType result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (arg1)->GetGridCorners();
    
    jresult = new GridCoordinatesType((GridCoordinatesType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_IndexToX(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_IndexToY(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_XYToIndex__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_XYToIndex__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
    int jresult = 0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int result;
    
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    result = (int)affxcel::CCELFileData::XYToIndex(arg1,arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_GetEntry__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileEntryType *arg3 = 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcel::CELFileEntryType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcel::CELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_GetEntry__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileEntryType *arg4 = 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxcel::CELFileEntryType *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcel::CELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_GetTranscriptomeEntry__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileTranscriptomeEntryType *arg3 = 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcel::CELFileTranscriptomeEntryType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcel::CELFileTranscriptomeEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetTranscriptomeEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_GetTranscriptomeEntry__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileTranscriptomeEntryType *arg4 = 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxcel::CELFileTranscriptomeEntryType *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxcel::CELFileTranscriptomeEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetTranscriptomeEntry(arg2,arg3,*arg4);
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCELFileData_GetIntensity__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCELFileData_GetIntensity__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCELFileData_GetStdv__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCELFileData_GetStdv__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_CCELFileData_GetPixels__SWIG_0(void * jarg1, int jarg2) {
    short jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    short result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_CCELFileData_GetPixels__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    short jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsMasked__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsMasked__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsOutlier__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsOutlier__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_Close(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_GetFileSize(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (uint32_t)(arg1)->GetFileSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_Read__SWIG_0(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool arg2 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_Read__SWIG_1(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsXDACompatibleFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsTranscriptomeBcelFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->IsTranscriptomeBcelFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_IsCompactCelFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->IsCompactCelFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_ReadEx__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_ReadEx__SWIG_1(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    result = (bool)(arg1)->ReadEx((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCELFileData_ReadEx__SWIG_2(void * jarg1) {
    unsigned int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (bool)(arg1)->ReadEx();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetReadState(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_Clear(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCELFileData_GetFileFormat(void * jarg1) {
    int jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    result = (int)(arg1)->GetFileFormat();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetFileFormat(void * jarg1, int jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetFileFormat(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetAlgorithmName(void * jarg1, char * jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetAlgorithmName((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_AddAlgorithmParameter(void * jarg1, char * jarg2, char * jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetDimensions(void * jarg1, int jarg2, int jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetChipType(void * jarg1, char * jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetChipType((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetMargin(void * jarg1, int jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetGridCorners(void * jarg1, void * jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    GridCoordinatesType arg2 ;
    GridCoordinatesType *argp2 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    argp2 = (GridCoordinatesType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GridCoordinatesType", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->SetGridCorners(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetCellEntry__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileEntryType *arg4 = (affxcel::CELFileEntryType *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxcel::CELFileEntryType *)jarg4; 
    (arg1)->SetCellEntry(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetCellEntry__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileEntryType *arg3 = (affxcel::CELFileEntryType *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcel::CELFileEntryType *)jarg3; 
    (arg1)->SetCellEntry(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_AllocateEntries(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->AllocateEntries();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetTranscriptomeCellEntry__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileTranscriptomeEntryType *arg4 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxcel::CELFileTranscriptomeEntryType *)jarg4; 
    (arg1)->SetTranscriptomeCellEntry(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetTranscriptomeCellEntry__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileTranscriptomeEntryType *arg3 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxcel::CELFileTranscriptomeEntryType *)jarg3; 
    (arg1)->SetTranscriptomeCellEntry(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_AllocateTranscriptomeEntries(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->AllocateTranscriptomeEntries();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetIntensity__SWIG_0(void * jarg1, int jarg2, float jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetIntensity(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetIntensity__SWIG_1(void * jarg1, int jarg2, int jarg3, float jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (float)jarg4; 
    (arg1)->SetIntensity(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetStdv__SWIG_0(void * jarg1, int jarg2, float jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetStdv(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetStdv__SWIG_1(void * jarg1, int jarg2, int jarg3, float jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (float)jarg4; 
    (arg1)->SetStdv(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetPixels__SWIG_0(void * jarg1, int jarg2, short jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    short arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (short)jarg3; 
    (arg1)->SetPixels(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetPixels__SWIG_1(void * jarg1, int jarg2, int jarg3, short jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    short arg4 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (short)jarg4; 
    (arg1)->SetPixels(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetMask__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    (arg1)->SetMask(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetMask__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = jarg4 ? true : false; 
    (arg1)->SetMask(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetOutlier__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    (arg1)->SetOutlier(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_SetOutlier__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = jarg4 ? true : false; 
    (arg1)->SetOutlier(arg2,arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_Munmap(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->Munmap();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCELFileData_EnsureNotMmapped(void * jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    arg1 = (affxcel::CCELFileData *)jarg1; 
    (arg1)->EnsureNotMmapped();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneType_centerx(void * jarg1, float jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->centerx = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_BackgroundZoneType_centerx(void * jarg1) {
    float jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    result = (float) ((arg1)->centerx);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneType_centery(void * jarg1, float jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->centery = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_BackgroundZoneType_centery(void * jarg1) {
    float jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    result = (float) ((arg1)->centery);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneType_background(void * jarg1, float jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->background = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_BackgroundZoneType_background(void * jarg1) {
    float jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    result = (float) ((arg1)->background);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackgroundZoneType__BackgroundZoneType_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    affxchp::_BackgroundZoneType arg2 ;
    affxchp::_BackgroundZoneType result;
    affxchp::_BackgroundZoneType *argp2 ;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    argp2 = (affxchp::_BackgroundZoneType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affxchp::_BackgroundZoneType", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affxchp::_BackgroundZoneType((affxchp::_BackgroundZoneType &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BackgroundZoneType() {
    void * jresult = 0 ;
    affxchp::BackgroundZoneType *result;
    
    result = (affxchp::BackgroundZoneType *)new affxchp::BackgroundZoneType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BackgroundZoneType(void * jarg1) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    
    arg1 = (affxchp::BackgroundZoneType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneInfo_number_zones(void * jarg1, int jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->number_zones = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_BackgroundZoneInfo_number_zones(void * jarg1) {
    int jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    int result;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    result = (int) ((arg1)->number_zones);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneInfo_smooth_factor(void * jarg1, float jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->smooth_factor = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_BackgroundZoneInfo_smooth_factor(void * jarg1) {
    float jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    float result;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    result = (float) ((arg1)->smooth_factor);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BackgroundZoneInfo_zones(void * jarg1, void * jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = (affxchp::BackgroundZoneTypeList *) 0 ;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    arg2 = (affxchp::BackgroundZoneTypeList *)jarg2; 
    if (arg1) (arg1)->zones = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_BackgroundZoneInfo_zones(void * jarg1) {
    void * jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    affxchp::BackgroundZoneTypeList *result;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    result = (affxchp::BackgroundZoneTypeList *)& ((arg1)->zones);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BackgroundZoneInfo() {
    void * jresult = 0 ;
    affxchp::BackgroundZoneInfo *result;
    
    result = (affxchp::BackgroundZoneInfo *)new affxchp::BackgroundZoneInfo();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BackgroundZoneInfo(void * jarg1) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    
    arg1 = (affxchp::BackgroundZoneInfo *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCHPFileHeader() {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *result;
    
    result = (affxchp::CCHPFileHeader *)new affxchp::CCHPFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCHPFileHeader(void * jarg1) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetCols(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetRows(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetNumProbeSets(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetAssayType(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::CCHPFileHeader::GeneChipAssayType result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (affxchp::CCHPFileHeader::GeneChipAssayType)((affxchp::CCHPFileHeader const *)arg1)->GetAssayType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetChipType(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetChipType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetAlgName(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetAlgVersion(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgVersion();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileHeader_AlgorithmParameters(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    TagValuePairTypeList *result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->AlgorithmParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileHeader_SummaryParameters(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    TagValuePairTypeList *result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->SummaryParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetParentCellFile(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetParentCellFile();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetProgID(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetProgID();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetAlgorithmParameter(void * jarg1, char * jarg2) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileHeader_GetSummaryParameter(void * jarg1, char * jarg2) {
    char * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    result = (arg1)->GetSummaryParameter((char const *)arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileHeader_GetBackgroundZoneInfo(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::BackgroundZoneInfo *result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    {
        affxchp::BackgroundZoneInfo &_result_ref = (arg1)->GetBackgroundZoneInfo();
        result = (affxchp::BackgroundZoneInfo *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileHeader_GetBackgroundZones(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::BackgroundZoneTypeList *result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    {
        affxchp::BackgroundZoneTypeList &_result_ref = (arg1)->GetBackgroundZones();
        result = (affxchp::BackgroundZoneTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileHeader_GetBackgroundZone(void * jarg1, int jarg2, int jarg3) {
    void * jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    int arg3 ;
    affxchp::BackgroundZoneType result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (arg1)->GetBackgroundZone(arg2,arg3);
    
    jresult = new affxchp::BackgroundZoneType((affxchp::BackgroundZoneType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetMagicNumber(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetMagicNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCHPFileHeader_GetVersionNumber(void * jarg1) {
    int jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetVersionNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetCols(void * jarg1, int jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCols(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetRows(void * jarg1, int jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetRows(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetNumProbeSets(void * jarg1, int jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumProbeSets(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetAssayType(void * jarg1, int jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::CCHPFileHeader::GeneChipAssayType arg2 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = (affxchp::CCHPFileHeader::GeneChipAssayType)jarg2; 
    (arg1)->SetAssayType(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetChipType(void * jarg1, char * jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetChipType((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetAlgName(void * jarg1, char * jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetAlgName((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetAlgVersion(void * jarg1, char * jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetAlgVersion((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetParentCellFile(void * jarg1, char * jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetParentCellFile((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileHeader_SetProgID(void * jarg1, char * jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileHeader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetProgID((char const *)arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProbeSetResults() {
    void * jresult = 0 ;
    affxchp::CProbeSetResults *result;
    
    result = (affxchp::CProbeSetResults *)new affxchp::CProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProbeSetResults(void * jarg1) {
    affxchp::CProbeSetResults *arg1 = (affxchp::CProbeSetResults *) 0 ;
    
    arg1 = (affxchp::CProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ABS_PRESENT_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ABS_MARGINAL_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ABS_ABSENT_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 2;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ABS_NO_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 3;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_INCREASE_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_DECREASE_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 2;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_MOD_INCREASE_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 3;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_MOD_DECREASE_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 4;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_NO_CHANGE_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 5;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_COMP_NO_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 6;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_DetectionPValue(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->DetectionPValue = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_DetectionPValue(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->DetectionPValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_Signal(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Signal = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_Signal(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->Signal);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_NumPairs(void * jarg1, unsigned short jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumPairs = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_NumPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (unsigned short) ((arg1)->NumPairs);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_NumUsedPairs(void * jarg1, unsigned short jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumUsedPairs = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_NumUsedPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (unsigned short) ((arg1)->NumUsedPairs);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_Detection(void * jarg1, unsigned char jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Detection = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_Detection(void * jarg1) {
    unsigned char jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (unsigned char) ((arg1)->Detection);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_m_HasCompResults(void * jarg1, unsigned int jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    bool arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = jarg2 ? true : false; 
    if (arg1) (arg1)->m_HasCompResults = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_m_HasCompResults(void * jarg1) {
    unsigned int jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    bool result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (bool) ((arg1)->m_HasCompResults);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_ChangePValue(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->ChangePValue = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_ChangePValue(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->ChangePValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_SignalLogRatio(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatio = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_SignalLogRatio(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->SignalLogRatio);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_SignalLogRatioLow(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatioLow = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_SignalLogRatioLow(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->SignalLogRatioLow);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_SignalLogRatioHigh(void * jarg1, float jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatioHigh = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_SignalLogRatioHigh(void * jarg1) {
    float jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (float) ((arg1)->SignalLogRatioHigh);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_NumCommonPairs(void * jarg1, unsigned short jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumCommonPairs = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_NumCommonPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (unsigned short) ((arg1)->NumCommonPairs);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CExpressionProbeSetResults_Change(void * jarg1, unsigned char jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Change = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_CExpressionProbeSetResults_Change(void * jarg1) {
    unsigned char jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (unsigned char) ((arg1)->Change);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CExpressionProbeSetResults_GetDetectionString(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (arg1)->GetDetectionString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CExpressionProbeSetResults_GetChangeString(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    result = (arg1)->GetChangeString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CExpressionProbeSetResults_CExpressionProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    affxchp::CExpressionProbeSetResults *arg2 = 0 ;
    affxchp::CExpressionProbeSetResults result;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    arg2 = (affxchp::CExpressionProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::CExpressionProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affxchp::CExpressionProbeSetResults((affxchp::CExpressionProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CExpressionProbeSetResults() {
    void * jresult = 0 ;
    affxchp::CExpressionProbeSetResults *result;
    
    result = (affxchp::CExpressionProbeSetResults *)new affxchp::CExpressionProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CExpressionProbeSetResults(void * jarg1) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    
    arg1 = (affxchp::CExpressionProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ALLELE_A_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 6;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ALLELE_B_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 7;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ALLELE_AB_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 8;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ALLELE_NO_CALL() {
    int jresult = 0 ;
    int result;
    
    result = (int) 11;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_AlleleCall(void * jarg1, unsigned char jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->AlleleCall = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_AlleleCall(void * jarg1) {
    unsigned char jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    unsigned char result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (unsigned char) ((arg1)->AlleleCall);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_Confidence(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Confidence = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_Confidence(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->Confidence);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_RAS1(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->RAS1 = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_RAS1(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->RAS1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_RAS2(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->RAS2 = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_RAS2(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->RAS2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_pvalue_AA(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_AA = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_pvalue_AA(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->pvalue_AA);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_pvalue_AB(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_AB = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_pvalue_AB(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->pvalue_AB);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_pvalue_BB(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_BB = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_pvalue_BB(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->pvalue_BB);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_CGenotypeProbeSetResults_pvalue_NoCall(void * jarg1, float jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_NoCall = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_CGenotypeProbeSetResults_pvalue_NoCall(void * jarg1) {
    float jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (float) ((arg1)->pvalue_NoCall);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGenotypeProbeSetResults_GetAlleleCallString(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    result = (arg1)->GetAlleleCallString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    affxchp::CGenotypeProbeSetResults *arg2 = 0 ;
    affxchp::CGenotypeProbeSetResults result;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    arg2 = (affxchp::CGenotypeProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::CGenotypeProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affxchp::CGenotypeProbeSetResults((affxchp::CGenotypeProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGenotypeProbeSetResults() {
    void * jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *result;
    
    result = (affxchp::CGenotypeProbeSetResults *)new affxchp::CGenotypeProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGenotypeProbeSetResults(void * jarg1) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    
    arg1 = (affxchp::CGenotypeProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_CUniversalProbeSetResults_GetBackground(void * jarg1) {
    float jresult = 0 ;
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affxchp::CUniversalProbeSetResults *)jarg1; 
    result = (float)((affxchp::CUniversalProbeSetResults const *)arg1)->GetBackground();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CUniversalProbeSetResults_SetBackground(void * jarg1, float jarg2) {
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affxchp::CUniversalProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CUniversalProbeSetResults_CUniversalProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    affxchp::CUniversalProbeSetResults *arg2 = 0 ;
    affxchp::CUniversalProbeSetResults result;
    
    arg1 = (affxchp::CUniversalProbeSetResults *)jarg1; 
    arg2 = (affxchp::CUniversalProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::CUniversalProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affxchp::CUniversalProbeSetResults((affxchp::CUniversalProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CUniversalProbeSetResults() {
    void * jresult = 0 ;
    affxchp::CUniversalProbeSetResults *result;
    
    result = (affxchp::CUniversalProbeSetResults *)new affxchp::CUniversalProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CUniversalProbeSetResults(void * jarg1) {
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    
    arg1 = (affxchp::CUniversalProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ForceCallType_position(void * jarg1, int jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->position = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ForceCallType_position(void * jarg1) {
    int jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    int result;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    result = (int) ((arg1)->position);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ForceCallType_call(void * jarg1, char jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    char arg2 ;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->call = arg2;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_ForceCallType_call(void * jarg1) {
    char jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    char result;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    result = (char) ((arg1)->call);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ForceCallType_reason(void * jarg1, unsigned char jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->reason = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_ForceCallType_reason(void * jarg1) {
    unsigned char jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    unsigned char result;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    result = (unsigned char) ((arg1)->reason);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceCallType() {
    void * jresult = 0 ;
    affxchp::ForceCallType *result;
    
    result = (affxchp::ForceCallType *)new affxchp::ForceCallType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForceCallType(void * jarg1) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    
    arg1 = (affxchp::ForceCallType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_NO_SIGNAL_THR_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'N';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_WEAK_SIGNAL_THR_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'W';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_SATURATION_LEVEL_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'S';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_QUALITY_SCORE_THR_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'Q';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'F';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_RELIABILITY_THR_FORCE_CALL() {
    char jresult = 0 ;
    char result;
    
    result = (char) 'B';
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BaseCallType_position(void * jarg1, int jarg2) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::BaseCallType *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->position = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_BaseCallType_position(void * jarg1) {
    int jresult = 0 ;
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    int result;
    
    arg1 = (affxchp::BaseCallType *)jarg1; 
    result = (int) ((arg1)->position);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BaseCallType_call(void * jarg1, char jarg2) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    char arg2 ;
    
    arg1 = (affxchp::BaseCallType *)jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->call = arg2;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_BaseCallType_call(void * jarg1) {
    char jresult = 0 ;
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    char result;
    
    arg1 = (affxchp::BaseCallType *)jarg1; 
    result = (char) ((arg1)->call);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseCallType() {
    void * jresult = 0 ;
    affxchp::BaseCallType *result;
    
    result = (affxchp::BaseCallType *)new affxchp::BaseCallType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseCallType(void * jarg1) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    
    arg1 = (affxchp::BaseCallType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CResequencingResults() {
    void * jresult = 0 ;
    affxchp::CResequencingResults *result;
    
    result = (affxchp::CResequencingResults *)new affxchp::CResequencingResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CResequencingResults(void * jarg1) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_Clear(void * jarg1) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetCalledBases(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<char > *result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    {
        std::vector<char > const &_result_ref = (arg1)->GetCalledBases();
        result = (std::vector<char > *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CResequencingResults_GetCalledBase(void * jarg1, int jarg2) {
    char jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    char result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    result = (char)(arg1)->GetCalledBase(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResequencingResults_GetCalledBasesSize(void * jarg1) {
    int jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetCalledBasesSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_ResizeCalledBases(void * jarg1, int jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeCalledBases(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_SetCalledBase(void * jarg1, int jarg2, char jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    char arg3 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (char)jarg3; 
    (arg1)->SetCalledBase(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetScores(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<float > *result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    {
        std::vector<float > const &_result_ref = (arg1)->GetScores();
        result = (std::vector<float > *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CResequencingResults_GetScore(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetScore(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResequencingResults_GetScoresSize(void * jarg1) {
    int jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetScoresSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_ResizeScores(void * jarg1, int jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeScores(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_SetScore(void * jarg1, int jarg2, float jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    float arg3 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetScore(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetForceCalls(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<affxchp::ForceCallType > *result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    {
        std::vector<affxchp::ForceCallType > const &_result_ref = (arg1)->GetForceCalls();
        result = (std::vector<affxchp::ForceCallType > *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetForceCall(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::ForceCallType result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetForceCall(arg2);
    
    jresult = new affxchp::ForceCallType((affxchp::ForceCallType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResequencingResults_GetForceCallsSize(void * jarg1) {
    int jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetForceCallsSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_ResizeForceCalls(void * jarg1, int jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeForceCalls(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_SetForceCall(void * jarg1, int jarg2, void * jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::ForceCallType arg3 ;
    affxchp::ForceCallType *argp3 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    argp3 = (affxchp::ForceCallType *)jarg3; 
    if (!argp3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affxchp::ForceCallType", 0);
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetForceCall(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetOrigCalls(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<affxchp::BaseCallType > *result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    {
        std::vector<affxchp::BaseCallType > const &_result_ref = (arg1)->GetOrigCalls();
        result = (std::vector<affxchp::BaseCallType > *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResequencingResults_GetOrigCall(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::BaseCallType result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetOrigCall(arg2);
    
    jresult = new affxchp::BaseCallType((affxchp::BaseCallType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResequencingResults_GetOrigCallsSize(void * jarg1) {
    int jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetOrigCallsSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_ResizeOrigCalls(void * jarg1, int jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeOrigCalls(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResequencingResults_SetOrigCall(void * jarg1, int jarg2, void * jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::BaseCallType arg3 ;
    affxchp::BaseCallType *argp3 ;
    
    arg1 = (affxchp::CResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    argp3 = (affxchp::BaseCallType *)jarg3; 
    if (!argp3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affxchp::BaseCallType", 0);
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetOrigCall(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCHPFileData() {
    void * jresult = 0 ;
    affxchp::CCHPFileData *result;
    
    result = (affxchp::CCHPFileData *)new affxchp::CCHPFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCHPFileData(void * jarg1) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    affxchp::CCHPFileHeader *result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    {
        affxchp::CCHPFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affxchp::CCHPFileHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileData_GetExpressionResults(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CExpressionProbeSetResults *result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CExpressionProbeSetResults *)(arg1)->GetExpressionResults(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileData_GetGenotypingResults(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CGenotypeProbeSetResults *result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CGenotypeProbeSetResults *)(arg1)->GetGenotypingResults(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileData_GetUniversalResults(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CUniversalProbeSetResults *result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CUniversalProbeSetResults *)(arg1)->GetUniversalResults(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCHPFileData_GetResequencingResults(void * jarg1) {
    void * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    affxchp::CResequencingResults *result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = (affxchp::CResequencingResults *)(arg1)->GetResequencingResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = ((affxchp::CCHPFileData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCHPFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCHPFileData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCHPFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCHPFileData_IsXDACompatibleFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileData_SetFileName(void * jarg1, char * jarg2) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCHPFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    result = ((affxchp::CCHPFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCHPFileData_Clear(void * jarg1) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    
    arg1 = (affxchp::CCHPFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_dValue(void * jarg1, double jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    double arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (double)jarg2; 
    if (arg1) (arg1)->dValue = arg2;
    
}


SWIGEXPORT double SWIGSTDCALL CSharp_get_BarSequenceResultData_dValue(void * jarg1) {
    double jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    double result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (double) ((arg1)->dValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_fValue(void * jarg1, float jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    float arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->fValue = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_BarSequenceResultData_fValue(void * jarg1) {
    float jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    float result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (float) ((arg1)->fValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_iValue(void * jarg1, int jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    int arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->iValue = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_BarSequenceResultData_iValue(void * jarg1) {
    int jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    int result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (int) ((arg1)->iValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_sValue(void * jarg1, short jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    short arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->sValue = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_BarSequenceResultData_sValue(void * jarg1) {
    short jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    short result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (short) ((arg1)->sValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_cValue(void * jarg1, char jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    char arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->cValue = arg2;
    
}


SWIGEXPORT char SWIGSTDCALL CSharp_get_BarSequenceResultData_cValue(void * jarg1) {
    char jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    char result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (char) ((arg1)->cValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_uiValue(void * jarg1, unsigned int jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->uiValue = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_BarSequenceResultData_uiValue(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned int result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (unsigned int) ((arg1)->uiValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_usValue(void * jarg1, unsigned short jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned short arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->usValue = arg2;
    
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_get_BarSequenceResultData_usValue(void * jarg1) {
    unsigned short jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned short result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (unsigned short) ((arg1)->usValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_BarSequenceResultData_ucValue(void * jarg1, unsigned char jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->ucValue = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_BarSequenceResultData_ucValue(void * jarg1) {
    unsigned char jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned char result;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    result = (unsigned char) ((arg1)->ucValue);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BarSequenceResultData() {
    void * jresult = 0 ;
    affxbar::BarSequenceResultData *result;
    
    result = (affxbar::BarSequenceResultData *)new affxbar::BarSequenceResultData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BarSequenceResultData(void * jarg1) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    
    arg1 = (affxbar::BarSequenceResultData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGDACSequenceResultItem() {
    void * jresult = 0 ;
    affxbar::CGDACSequenceResultItem *result;
    
    result = (affxbar::CGDACSequenceResultItem *)new affxbar::CGDACSequenceResultItem();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGDACSequenceResultItem(void * jarg1) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetName(void * jarg1) {
    char * jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetVersion(void * jarg1) {
    char * jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetVersion();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetGroupName(void * jarg1) {
    char * jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetGroupName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetNumberDataPoints(void * jarg1) {
    int jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberDataPoints();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetNumberColumns(void * jarg1) {
    int jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberColumns();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetColumnType(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    affxbar::GDACFILES_BAR_DATA_TYPE result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxbar::GDACFILES_BAR_DATA_TYPE)((affxbar::CGDACSequenceResultItem const *)arg1)->GetColumnType(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetData(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    int arg3 ;
    affxbar::BarSequenceResultData *arg4 = 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxbar::BarSequenceResultData *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbar::BarSequenceResultData & type is null", 0);
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetNumberParameters(void * jarg1) {
    int jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGDACSequenceResultItem_GetParameter(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    TagValuePairType *result;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = (int)jarg2; 
    {
        TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
        result = (TagValuePairType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_SetName(void * jarg1, char * jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetName((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_SetVersion(void * jarg1, char * jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetVersion((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_SetGroupName(void * jarg1, char * jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetGroupName((char const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_SetNumberDataPoints(void * jarg1, int jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumberDataPoints(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_SetDataPoint(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    int arg3 ;
    affxbar::BarSequenceResultData *arg4 = 0 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affxbar::BarSequenceResultData *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbar::BarSequenceResultData & type is null", 0);
        return ;
    } 
    (arg1)->SetDataPoint(arg2,arg3,*arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceResultItem_AddParameter(void * jarg1, char * jarg2, char * jarg3) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    
    arg1 = (affxbar::CGDACSequenceResultItem *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    arg2 = std::string(jarg2); 
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    arg3 = std::string(jarg3); 
    (arg1)->AddParameter(arg2,arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CBARFileData() {
    void * jresult = 0 ;
    affxbar::CBARFileData *result;
    
    result = (affxbar::CBARFileData *)new affxbar::CBARFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CBARFileData(void * jarg1) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_SetFileName(void * jarg1, char * jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBARFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    std::string result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = ((affxbar::CBARFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBARFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBARFileData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBARFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_Close(void * jarg1) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBARFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    std::string result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = ((affxbar::CBARFileData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CBARFileData_GetVersion(void * jarg1) {
    float jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    float result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (float)((affxbar::CBARFileData const *)arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBARFileData_GetNumberSequences(void * jarg1) {
    int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberSequences();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBARFileData_GetNumberColumns(void * jarg1) {
    int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberColumns();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBARFileData_GetNumberParameters(void * jarg1) {
    int jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBARFileData_GetParameter(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    TagValuePairType *result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (int)jarg2; 
    {
        TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
        result = (TagValuePairType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBARFileData_GetColumnTypes(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::GDACFILES_BAR_DATA_TYPE *result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (int)jarg2; 
    {
        affxbar::GDACFILES_BAR_DATA_TYPE &_result_ref = (arg1)->GetColumnTypes(arg2);
        result = (affxbar::GDACFILES_BAR_DATA_TYPE *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_GetResults(void * jarg1, int jarg2, void * jarg3) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::CGDACSequenceResultItem *arg3 = 0 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxbar::CGDACSequenceResultItem *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbar::CGDACSequenceResultItem & type is null", 0);
        return ;
    } 
    (arg1)->GetResults(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_AddAlgorithmParameter(void * jarg1, char * jarg2, char * jarg3) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_AddColumn(void * jarg1, int jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    affxbar::GDACFILES_BAR_DATA_TYPE arg2 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (affxbar::GDACFILES_BAR_DATA_TYPE)jarg2; 
    (arg1)->AddColumn(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBARFileData_SetNumberSequences(void * jarg1, int jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumberSequences(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBARFileData_GetResultsPtr(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::CGDACSequenceResultItem *result;
    
    arg1 = (affxbar::CBARFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxbar::CGDACSequenceResultItem *)(arg1)->GetResultsPtr(arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_BPMAP_FILE_HEADER_BYTES() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "PHT7\r\n\32\n";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_BPMAP_FILE_HEADER_LEN() {
    int jresult = 0 ;
    int result;
    
    result = (int) 8;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PM_ONLY() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PM_MM() {
    int jresult = 0 ;
    int result;
    
    result = (int) 0;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_PROBE_STORAGE_BUFFER_LENGTH() {
    int jresult = 0 ;
    int result;
    
    result = (int) 7;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_PMX(void * jarg1, unsigned int jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->PMX = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_PMX(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned int) ((arg1)->PMX);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_PMY(void * jarg1, unsigned int jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->PMY = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_PMY(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned int) ((arg1)->PMY);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_MMX(void * jarg1, unsigned int jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->MMX = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_MMX(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned int) ((arg1)->MMX);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_MMY(void * jarg1, unsigned int jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->MMY = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_MMY(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned int) ((arg1)->MMY);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_MatchScore(void * jarg1, float jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    float arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->MatchScore = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_MatchScore(void * jarg1) {
    float jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    float result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (float) ((arg1)->MatchScore);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_Position(void * jarg1, unsigned int jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->Position = arg2;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_Position(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned int) ((arg1)->Position);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_PMProbe(void * jarg1, void * jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->PMProbe = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_PMProbe(void * jarg1) {
    void * jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    std::string *result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (std::string *)& ((arg1)->PMProbe);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_ProbeLength(void * jarg1, unsigned char jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->ProbeLength = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_ProbeLength(void * jarg1) {
    unsigned char jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned char) ((arg1)->ProbeLength);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_TopStrand(void * jarg1, unsigned char jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->TopStrand = arg2;
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_TopStrand(void * jarg1) {
    unsigned char jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (unsigned char) ((arg1)->TopStrand);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GDACSequenceHitItemType__GDACSequenceHitItemType_less_than(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    affxbpmap::_GDACSequenceHitItemType *arg2 = 0 ;
    bool result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = (affxbpmap::_GDACSequenceHitItemType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbpmap::_GDACSequenceHitItemType const & type is null", 0);
        return 0;
    } 
    result = (bool)((affxbpmap::GDACSequenceHitItemType const *)arg1)->operator <((affxbpmap::_GDACSequenceHitItemType const &)*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_GDACSequenceHitItemType_PackedPMProbe(void * jarg1, char * jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    char *arg2 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    arg2 = jarg2; 
    {
        if (arg2) strncpy(arg1->PackedPMProbe,arg2,7+1);
        else arg1->PackedPMProbe[0] = 0;
    }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_GDACSequenceHitItemType_PackedPMProbe(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    char *result;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    result = (char *)(char *) ((arg1)->PackedPMProbe);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GDACSequenceHitItemType() {
    void * jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *result;
    
    result = (affxbpmap::GDACSequenceHitItemType *)new affxbpmap::GDACSequenceHitItemType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GDACSequenceHitItemType(void * jarg1) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    
    arg1 = (affxbpmap::GDACSequenceHitItemType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_HIT_ITEM_SIZE_WITH_PROBE_PAIRS() {
    int jresult = 0 ;
    int result;
    
    result = (int) (4+4+4+4+1+7+4+4+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_HIT_ITEM_SIZE_WITH_PM_ONLY() {
    int jresult = 0 ;
    int result;
    
    result = (int) (4+4+1+7+4+4+1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGDACSequenceItem() {
    void * jresult = 0 ;
    affxbpmap::CGDACSequenceItem *result;
    
    result = (affxbpmap::CGDACSequenceItem *)new affxbpmap::CGDACSequenceItem();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGDACSequenceItem(void * jarg1) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceItem_GetName(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceItem_GroupName(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GroupName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGDACSequenceItem_GetSeqVersion(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetSeqVersion();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceItem_GetProbeMapping(void * jarg1) {
    int jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetProbeMapping();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceItem_GetNumber(void * jarg1) {
    int jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceItem_GetNumberHits(void * jarg1) {
    int jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberHits();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGDACSequenceItem_GetNumberParameters(void * jarg1) {
    int jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGDACSequenceItem_GetParameter(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    TagValuePairType result;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetParameter(arg2);
    
    jresult = new TagValuePairType((TagValuePairType &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceItem_GetHitItem__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
    bool arg4 ;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxbpmap::GDACSequenceHitItemType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbpmap::GDACSequenceHitItemType & type is null", 0);
        return ;
    } 
    arg4 = jarg4 ? true : false; 
    (arg1)->GetHitItem(arg2,*arg3,arg4);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGDACSequenceItem_GetHitItem__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
    
    arg1 = (affxbpmap::CGDACSequenceItem *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxbpmap::GDACSequenceHitItemType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbpmap::GDACSequenceHitItemType & type is null", 0);
        return ;
    } 
    (arg1)->GetHitItem(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CBPMAPFileData() {
    void * jresult = 0 ;
    affxbpmap::CBPMAPFileData *result;
    
    result = (affxbpmap::CBPMAPFileData *)new affxbpmap::CBPMAPFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CBPMAPFileData(void * jarg1) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBPMAPFileData_SetFileName(void * jarg1, char * jarg2) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBPMAPFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBPMAPFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBPMAPFileData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBPMAPFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBPMAPFileData_Close(void * jarg1) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBPMAPFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBPMAPFileData_GetNumberSequences(void * jarg1) {
    int jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    int result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = (int)((affxbpmap::CBPMAPFileData const *)arg1)->GetNumberSequences();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CBPMAPFileData_GetVersion(void * jarg1) {
    float jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    float result;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    result = (float)((affxbpmap::CBPMAPFileData const *)arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBPMAPFileData_GetSequenceItem(void * jarg1, int jarg2, void * jarg3) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    int arg2 ;
    affxbpmap::CGDACSequenceItem *arg3 = 0 ;
    
    arg1 = (affxbpmap::CBPMAPFileData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affxbpmap::CGDACSequenceItem *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxbpmap::CGDACSequenceItem & type is null", 0);
        return ;
    } 
    (arg1)->GetSequenceItem(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CEXPFileData() {
    void * jresult = 0 ;
    affxexp::CEXPFileData *result;
    
    result = (affxexp::CEXPFileData *)new affxexp::CEXPFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEXPFileData(void * jarg1) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEXPFileData_SetFileName(void * jarg1, char * jarg2) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEXPFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    result = ((affxexp::CEXPFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEXPFileData_GetArrayType(void * jarg1) {
    char * jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    std::string result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    result = ((affxexp::CEXPFileData const *)arg1)->GetArrayType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEXPFileData_SetArrayType(void * jarg1, char * jarg2) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetArrayType((char const *)arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEXPFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    bool result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEXPFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    bool result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEXPFileData_Clear(void * jarg1) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEXPFileData_GetScanParameters(void * jarg1) {
    void * jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetScanParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEXPFileData_GetHybParameters(void * jarg1) {
    void * jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetHybParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEXPFileData_GetSampleParameters(void * jarg1) {
    void * jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    arg1 = (affxexp::CEXPFileData *)jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetSampleParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_GRC_VERSION() {
    int jresult = 0 ;
    int result;
    
    result = (int) 1;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_GRC_MAGIC() {
    int jresult = 0 ;
    int result;
    
    result = (int) 129;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGRCFileData() {
    void * jresult = 0 ;
    affxgrc::CGRCFileData *result;
    
    result = (affxgrc::CGRCFileData *)new affxgrc::CGRCFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGRCFileData(void * jarg1) {
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    
    arg1 = (affxgrc::CGRCFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGRCFileData_SetFileName(void * jarg1, char * jarg2) {
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxgrc::CGRCFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGRCFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    std::string *result;
    
    arg1 = (affxgrc::CGRCFileData *)jarg1; 
    {
        std::string const &_result_ref = ((affxgrc::CGRCFileData const *)arg1)->GetFileName();
        result = (std::string *) &_result_ref;
    }
    
    jresult = SWIG_csharp_string_callback(result->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGRCFileData_Read(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    affymetrix_grid_control::GridControlData *arg2 = 0 ;
    bool result;
    
    arg1 = (affxgrc::CGRCFileData *)jarg1; 
    arg2 = (affymetrix_grid_control::GridControlData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_grid_control::GridControlData & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->Read(*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGRCFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    bool result;
    
    arg1 = (affxgrc::CGRCFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ProbeSetIndiciesType_probeSetName(void * jarg1, void * jarg2) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affxmsk::ProbeSetIndiciesType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->probeSetName = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ProbeSetIndiciesType_probeSetName(void * jarg1) {
    void * jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::string *result;
    
    arg1 = (affxmsk::ProbeSetIndiciesType *)jarg1; 
    result = (std::string *)& ((arg1)->probeSetName);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ProbeSetIndiciesType_indicies(void * jarg1, void * jarg2) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::list<int > arg2 ;
    std::list<int > *argp2 ;
    
    arg1 = (affxmsk::ProbeSetIndiciesType *)jarg1; 
    argp2 = (std::list<int > *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list<int >", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->indicies = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ProbeSetIndiciesType_indicies(void * jarg1) {
    void * jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::list<int > result;
    
    arg1 = (affxmsk::ProbeSetIndiciesType *)jarg1; 
    result =  ((arg1)->indicies);
    
    jresult = new std::list<int >((std::list<int > &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProbeSetIndiciesType() {
    void * jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *result;
    
    result = (affxmsk::ProbeSetIndiciesType *)new affxmsk::ProbeSetIndiciesType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProbeSetIndiciesType(void * jarg1) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    
    arg1 = (affxmsk::ProbeSetIndiciesType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMSKFileData() {
    void * jresult = 0 ;
    affxmsk::CMSKFileData *result;
    
    result = (affxmsk::CMSKFileData *)new affxmsk::CMSKFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMSKFileData(void * jarg1) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMSKFileData_SetFileName(void * jarg1, char * jarg2) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CMSKFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CMSKFileData_GetArrayType(void * jarg1) {
    char * jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetArrayType();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CMSKFileData_GetProbeSetIndiciesListCount(void * jarg1) {
    int jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    int result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetIndiciesListCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CMSKFileData_GetProbeSetListCount(void * jarg1) {
    int jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    int result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetListCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CMSKFileData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    std::string result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = ((affxmsk::CMSKFileData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMSKFileData_GetProbeSetIndiciesIterators(void * jarg1, void * jarg2, void * jarg3) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    affxmsk::ProbeSetIndiciesListConstIt *arg2 = 0 ;
    affxmsk::ProbeSetIndiciesListConstIt *arg3 = 0 ;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    arg2 = (affxmsk::ProbeSetIndiciesListConstIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxmsk::ProbeSetIndiciesListConstIt & type is null", 0);
        return ;
    } 
    arg3 = (affxmsk::ProbeSetIndiciesListConstIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxmsk::ProbeSetIndiciesListConstIt & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetIndiciesIterators(*arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMSKFileData_GetProbeSetIterators(void * jarg1, void * jarg2, void * jarg3) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    affxmsk::ProbeSetListConstIt *arg2 = 0 ;
    affxmsk::ProbeSetListConstIt *arg3 = 0 ;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    arg2 = (affxmsk::ProbeSetListConstIt *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxmsk::ProbeSetListConstIt & type is null", 0);
        return ;
    } 
    arg3 = (affxmsk::ProbeSetListConstIt *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxmsk::ProbeSetListConstIt & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetIterators(*arg2,*arg3);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMSKFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    bool result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMSKFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    bool result;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMSKFileData_Clear(void * jarg1) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    
    arg1 = (affxmsk::CMSKFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ProbeSetInfo_probeSetName(void * jarg1, void * jarg2) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affxpsi::ProbeSetInfo *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->probeSetName = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_ProbeSetInfo_probeSetName(void * jarg1) {
    void * jresult = 0 ;
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    std::string *result;
    
    arg1 = (affxpsi::ProbeSetInfo *)jarg1; 
    result = (std::string *)& ((arg1)->probeSetName);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_ProbeSetInfo_numberPairs(void * jarg1, int jarg2) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    int arg2 ;
    
    arg1 = (affxpsi::ProbeSetInfo *)jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->numberPairs = arg2;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_ProbeSetInfo_numberPairs(void * jarg1) {
    int jresult = 0 ;
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    int result;
    
    arg1 = (affxpsi::ProbeSetInfo *)jarg1; 
    result = (int) ((arg1)->numberPairs);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProbeSetInfo() {
    void * jresult = 0 ;
    affxpsi::ProbeSetInfo *result;
    
    result = (affxpsi::ProbeSetInfo *)new affxpsi::ProbeSetInfo();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProbeSetInfo(void * jarg1) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    
    arg1 = (affxpsi::ProbeSetInfo *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPSIFileData() {
    void * jresult = 0 ;
    affxpsi::CPSIFileData *result;
    
    result = (affxpsi::CPSIFileData *)new affxpsi::CPSIFileData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPSIFileData(void * jarg1) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPSIFileData_SetFileName(void * jarg1, char * jarg2) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPSIFileData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    char *result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    result = (char *)((affxpsi::CPSIFileData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPSIFileData_GetProbeSetCount(void * jarg1) {
    int jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbeSetCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPSIFileData_GetProbeSetName(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxpsi::CPSIFileData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPSIFileData_GetProbePairs(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbePairs(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPSIFileData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    bool result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPSIFileData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    bool result;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPSIFileData_Clear(void * jarg1) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    
    arg1 = (affxpsi::CPSIFileData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_GCOS_SAMPLE_NAME_PARAMETER_NAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "GCOS Sample Name";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_GCOS_SAMPLE_TYPE_PARAMETER_NAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "GCOS Sample Type";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_get_GCOS_SAMPLE_PROJECT_PARAMETER_NAME() {
    char * jresult = 0 ;
    char *result;
    
    result = (char *) "GCOS Sample Project";
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_AttributeNameValueType_name(void * jarg1, void * jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->name = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_AttributeNameValueType_name(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    result = (std::string *)& ((arg1)->name);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_AttributeNameValueType_value(void * jarg1, void * jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->value = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_AttributeNameValueType_value(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    result = (std::string *)& ((arg1)->value);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_AttributeNameValueType_type(void * jarg1, void * jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    arg2 = (std::string *)jarg2; 
    if (arg1) (arg1)->type = *arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_AttributeNameValueType_type(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    result = (std::string *)& ((arg1)->type);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttributeNameValueType() {
    void * jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *result;
    
    result = (affymetrix_dttarray::AttributeNameValueType *)new affymetrix_dttarray::AttributeNameValueType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AttributeNameValueType(void * jarg1) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    
    arg1 = (affymetrix_dttarray::AttributeNameValueType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DttArrayData() {
    void * jresult = 0 ;
    affymetrix_dttarray::DttArrayData *result;
    
    result = (affymetrix_dttarray::DttArrayData *)new affymetrix_dttarray::DttArrayData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DttArrayData(void * jarg1) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DttArrayData_GetArrayType(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetArrayType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DttArrayData_SetArrayType(void * jarg1, char * jarg2) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetArrayType((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DttArrayData_GetExperimentName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetExperimentName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DttArrayData_SetExperimentName(void * jarg1, char * jarg2) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetExperimentName((std::string const &)*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DttArrayData_Attributes(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    affymetrix_dttarray::AttributeNameValueTypeList *result;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    {
        affymetrix_dttarray::AttributeNameValueTypeList &_result_ref = (arg1)->Attributes();
        result = (affymetrix_dttarray::AttributeNameValueTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DttArrayData_Clear(void * jarg1) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DttArrayFileReader() {
    void * jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *result;
    
    result = (affymetrix_dttarray::DttArrayFileReader *)new affymetrix_dttarray::DttArrayFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DttArrayFileReader(void * jarg1) {
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DttArrayFileReader_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_dttarray::DttArrayFileReader *)jarg1; 
    result = ((affymetrix_dttarray::DttArrayFileReader const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DttArrayFileReader_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affymetrix_dttarray::DttArrayFileReader *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DttArrayFileReader_Read(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    affymetrix_dttarray::DttArrayData *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_dttarray::DttArrayFileReader *)jarg1; 
    arg2 = (affymetrix_dttarray::DttArrayData *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_dttarray::DttArrayData & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->Read(*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DttArrayFileReader_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    bool result;
    
    arg1 = (affymetrix_dttarray::DttArrayFileReader *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FusionTagValuePairType_Tag(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Tag = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FusionTagValuePairType_Tag(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    result =  ((arg1)->Tag);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FusionTagValuePairType_Value(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    argp2 = (std::wstring *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_FusionTagValuePairType_Value(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    result =  ((arg1)->Value);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionTagValuePairType_FusionTagValuePairType_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairType arg2 ;
    affymetrix_fusion_io::FusionTagValuePairType result;
    affymetrix_fusion_io::FusionTagValuePairType const *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    argp2 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionTagValuePairType const", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    jresult = new affymetrix_fusion_io::FusionTagValuePairType((affymetrix_fusion_io::FusionTagValuePairType &)result); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionTagValuePairType_FusionTagValuePairType_equals_obj(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairType arg2 ;
    bool result;
    affymetrix_fusion_io::FusionTagValuePairType const *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    argp2 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionTagValuePairType const", 0);
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionTagValuePairType_FusionTagValuePairType_equals_tag(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (bool)(arg1)->operator ==((wchar_t const *)arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionTagValuePairType_DetailedType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValueType &_result_ref = (arg1)->DetailedType();
        result = (affymetrix_calvin_parameter::ParameterNameValueType *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionTagValuePairType() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *result;
    
    result = (affymetrix_fusion_io::FusionTagValuePairType *)new affymetrix_fusion_io::FusionTagValuePairType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionTagValuePairType(void * jarg1) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionArrayFileReader() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *result;
    
    result = (affymetrix_fusion_io::FusionArrayFileReader *)new affymetrix_fusion_io::FusionArrayFileReader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionArrayFileReader(void * jarg1) {
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionArrayFileReader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionArrayFileReader_Read(void * jarg1, char * jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionArrayFileReader *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    arg3 = (affymetrix_calvin_array::ArrayData *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_calvin_array::ArrayData & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionArrayFileReader_DataTypeIdentifier(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    arg1 = (affymetrix_fusion_io::FusionArrayFileReader *)jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_fusion_io::FusionArrayFileReader const *)arg1)->DataTypeIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = SWIG_csharp_string_callback(result->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionProbeSetResults() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionProbeSetResults *result;
    
    result = (affymetrix_fusion_io::FusionProbeSetResults *)new affymetrix_fusion_io::FusionProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionProbeSetResults(void * jarg1) {
    affymetrix_fusion_io::FusionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetDetectionPValue(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetectionPValue();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetSignal(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignal();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetNumPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumPairs();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetNumUsedPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumUsedPairs();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetDetection(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_HasCompResults(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->HasCompResults();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetChangePValue(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChangePValue();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetSignalLogRatio(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatio();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetSignalLogRatioLow(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioLow();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetSignalLogRatioHigh(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioHigh();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetNumCommonPairs(void * jarg1) {
    unsigned short jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumCommonPairs();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetChange(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChange();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetDetectionPValue(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetDetectionPValue(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetSignal(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignal(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetNumPairs(void * jarg1, unsigned short jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairs(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetNumUsedPairs(void * jarg1, unsigned short jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumUsedPairs(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetDetection(void * jarg1, unsigned char jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetDetection(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetHasCompResults(void * jarg1, unsigned int jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    bool arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->SetHasCompResults(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetChangePValue(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetChangePValue(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetSignalLogRatio(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatio(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetSignalLogRatioLow(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatioLow(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetSignalLogRatioHigh(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatioHigh(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetNumCommonPairs(void * jarg1, unsigned short jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumCommonPairs(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_SetChange(void * jarg1, unsigned char jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetChange(arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetDetectionString(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (arg1)->GetDetectionString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_GetChangeString(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    result = (arg1)->GetChangeString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults result;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affymetrix_fusion_io::FusionExpressionProbeSetResults((affymetrix_fusion_io::FusionExpressionProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionExpressionProbeSetResults() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *result;
    
    result = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)new affymetrix_fusion_io::FusionExpressionProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionExpressionProbeSetResults(void * jarg1) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetAlleleCall(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (u_int8_t)(arg1)->GetAlleleCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetConfidence(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetConfidence();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetRAS1(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetRAS1();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetRAS2(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetRAS2();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetPValueAA(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetPValueAA();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetPValueAB(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetPValueAB();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetPValueBB(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetPValueBB();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetPValueNoCall(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (float)(arg1)->GetPValueNoCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetAlleleCall(void * jarg1, unsigned char jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetAlleleCall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetConfidence(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetConfidence(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetRAS1(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS1(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetRAS2(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS2(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetPValueAA(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueAA(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetPValueAB(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueAB(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetPValueBB(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueBB(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_SetPValueNoCall(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueNoCall(arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_GetAlleleCallString(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    result = (arg1)->GetAlleleCallString();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults result;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affymetrix_fusion_io::FusionGenotypeProbeSetResults((affymetrix_fusion_io::FusionGenotypeProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionGenotypeProbeSetResults() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *result;
    
    result = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)new affymetrix_fusion_io::FusionGenotypeProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionGenotypeProbeSetResults(void * jarg1) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionUniversalProbeSetResults_GetBackground(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg1; 
    result = (float)((affymetrix_fusion_io::FusionUniversalProbeSetResults const *)arg1)->GetBackground();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionUniversalProbeSetResults_SetBackground(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionUniversalProbeSetResults_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults result;
    
    arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    jresult = new affymetrix_fusion_io::FusionUniversalProbeSetResults((affymetrix_fusion_io::FusionUniversalProbeSetResults &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionUniversalProbeSetResults() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *result;
    
    result = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)new affymetrix_fusion_io::FusionUniversalProbeSetResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionUniversalProbeSetResults(void * jarg1) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionForceCallType__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *result;
    
    result = (affymetrix_fusion_io::FusionForceCallType *)new affymetrix_fusion_io::FusionForceCallType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionForceCallType__SWIG_1(int jarg1, char jarg2, unsigned char jarg3) {
    void * jresult = 0 ;
    int32_t arg1 ;
    int8_t arg2 ;
    u_int8_t arg3 ;
    affymetrix_fusion_io::FusionForceCallType *result;
    
    arg1 = (int32_t)jarg1; 
    arg2 = (int8_t)jarg2; 
    arg3 = (u_int8_t)jarg3; 
    result = (affymetrix_fusion_io::FusionForceCallType *)new affymetrix_fusion_io::FusionForceCallType(arg1,arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionForceCallType(void * jarg1) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionForceCallType_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionForceCallType_GetPosition(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    result = (int32_t)(arg1)->GetPosition();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FusionForceCallType_GetCall(void * jarg1) {
    char jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    result = (int8_t)(arg1)->GetCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_FusionForceCallType_GetReason(void * jarg1) {
    unsigned char jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    u_int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    result = (u_int8_t)(arg1)->GetReason();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionForceCallType_SetPosition(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPosition(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionForceCallType_SetCall(void * jarg1, char jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionForceCallType_SetReason(void * jarg1, unsigned char jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    u_int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionForceCallType *)jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetReason(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionBaseCallType__SWIG_0() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *result;
    
    result = (affymetrix_fusion_io::FusionBaseCallType *)new affymetrix_fusion_io::FusionBaseCallType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionBaseCallType__SWIG_1(int jarg1, char jarg2) {
    void * jresult = 0 ;
    int32_t arg1 ;
    int8_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType *result;
    
    arg1 = (int32_t)jarg1; 
    arg2 = (int8_t)jarg2; 
    result = (affymetrix_fusion_io::FusionBaseCallType *)new affymetrix_fusion_io::FusionBaseCallType(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionBaseCallType(void * jarg1) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionBaseCallType_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionBaseCallType_GetPosition(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    result = (int32_t)(arg1)->GetPosition();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FusionBaseCallType_GetCall(void * jarg1) {
    char jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    result = (int8_t)(arg1)->GetCall();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionBaseCallType_SetPosition(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPosition(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionBaseCallType_SetCall(void * jarg1, char jarg2) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionBaseCallType *)jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionResequencingResults() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *result;
    
    result = (affymetrix_fusion_io::FusionResequencingResults *)new affymetrix_fusion_io::FusionResequencingResults();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionResequencingResults(void * jarg1) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetCalledBases(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    Int8Vector *result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    {
        Int8Vector const &_result_ref = (arg1)->GetCalledBases();
        result = (Int8Vector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FusionResequencingResults_GetCalledBase(void * jarg1, int jarg2) {
    char jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int arg2 ;
    int8_t result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int8_t)(arg1)->GetCalledBase(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionResequencingResults_GetCalledBasesSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetCalledBasesSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_ResizeCalledBases(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeCalledBases(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_SetCalledBase(void * jarg1, int jarg2, char jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    int8_t arg3 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int8_t)jarg3; 
    (arg1)->SetCalledBase(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_AddCalledBase(void * jarg1, char jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int8_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->AddCalledBase(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetScores(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    FloatVector *result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    {
        FloatVector const &_result_ref = (arg1)->GetScores();
        result = (FloatVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionResequencingResults_GetScore(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (float)(arg1)->GetScore(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionResequencingResults_GetScoresSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetScoresSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_ResizeScores(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeScores(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_SetScore(void * jarg1, int jarg2, float jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int arg2 ;
    float arg3 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetScore(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_AddScore(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->AddScore(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetForceCalls(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionForceCallVector *result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    {
        affymetrix_fusion_io::FusionForceCallVector const &_result_ref = (arg1)->GetForceCalls();
        result = (affymetrix_fusion_io::FusionForceCallVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetForceCall(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionForceCallType result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetForceCall(arg2);
    
    jresult = new affymetrix_fusion_io::FusionForceCallType((affymetrix_fusion_io::FusionForceCallType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionResequencingResults_GetForceCallsSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetForceCallsSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_ResizeForceCalls(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeForceCalls(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_SetForceCall(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionForceCallType arg3 ;
    affymetrix_fusion_io::FusionForceCallType *argp3 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    argp3 = (affymetrix_fusion_io::FusionForceCallType *)jarg3; 
    if (!argp3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionForceCallType", 0);
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetForceCall(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_AddForceCall(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionForceCallType arg2 ;
    affymetrix_fusion_io::FusionForceCallType *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    argp2 = (affymetrix_fusion_io::FusionForceCallType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionForceCallType", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->AddForceCall(arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetOrigCalls(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionBaseCallVector *result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    {
        affymetrix_fusion_io::FusionBaseCallVector const &_result_ref = (arg1)->GetOrigCalls();
        result = (affymetrix_fusion_io::FusionBaseCallVector *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionResequencingResults_GetOrigCall(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetOrigCall(arg2);
    
    jresult = new affymetrix_fusion_io::FusionBaseCallType((affymetrix_fusion_io::FusionBaseCallType &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionResequencingResults_GetOrigCallsSize(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetOrigCallsSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_ResizeOrigCalls(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeOrigCalls(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_SetOrigCall(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType arg3 ;
    affymetrix_fusion_io::FusionBaseCallType *argp3 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    arg2 = (int32_t)jarg2; 
    argp3 = (affymetrix_fusion_io::FusionBaseCallType *)jarg3; 
    if (!argp3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionBaseCallType", 0);
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetOrigCall(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionResequencingResults_AddOrigCall(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionBaseCallType arg2 ;
    affymetrix_fusion_io::FusionBaseCallType *argp2 ;
    
    arg1 = (affymetrix_fusion_io::FusionResequencingResults *)jarg1; 
    argp2 = (affymetrix_fusion_io::FusionBaseCallType *)jarg2; 
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null affymetrix_fusion_io::FusionBaseCallType", 0);
        return ;
    }
    arg2 = *argp2; 
    (arg1)->AddOrigCall(arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFFileHeader_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFFileHeader_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFFileHeader_GetNumProbeSets(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFFileHeader_GetNumQCProbeSets(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumQCProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCDFFileHeader_GetReference(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    std::string *result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    {
        std::string &_result_ref = (arg1)->GetReference();
        result = (std::string *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFFileHeader() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *result;
    
    result = (affymetrix_fusion_io::FusionCDFFileHeader *)new affymetrix_fusion_io::FusionCDFFileHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFFileHeader(void * jarg1) {
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetListIndex(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetExpos(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetX(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetY(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetPBase(void * jarg1) {
    char jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    char result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FusionCDFProbeInformation_GetTBase(void * jarg1) {
    char jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    char result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFProbeInformation() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *result;
    
    result = (affymetrix_fusion_io::FusionCDFProbeInformation *)new affymetrix_fusion_io::FusionCDFProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFProbeInformation(void * jarg1) {
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    affxcdf::DirectionType result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetNumLists(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetNumCellsPerList(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetStart(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStart();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetStop(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStop();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    result = (arg1)->GetName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFProbeGroupInformation_GetCell(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFProbeGroupInformation() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *result;
    
    result = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)new affymetrix_fusion_io::FusionCDFProbeGroupInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFProbeGroupInformation(void * jarg1) {
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetProbeSetType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    affxcdf::GeneChipProbeSetType result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetDirection(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    affxcdf::DirectionType result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetNumLists(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetNumGroups(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetNumCellsPerList(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetProbeSetNumber(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFProbeSetInformation_GetGroupInformation(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFProbeGroupInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFProbeSetInformation() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *result;
    
    result = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)new affymetrix_fusion_io::FusionCDFProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFProbeSetInformation(void * jarg1) {
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFQCProbeInformation() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *result;
    
    result = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)new affymetrix_fusion_io::FusionCDFQCProbeInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFQCProbeInformation(void * jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFQCProbeInformation_GetX(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFQCProbeInformation_GetY(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFQCProbeInformation_GetPLen(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFQCProbeInformation_IsPerfectMatchProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFQCProbeInformation_IsBackgroundProbe(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFQCProbeSetInformation_GetQCProbeSetType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    affxcdf::GeneChipQCProbeSetType result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg1; 
    result = (affxcdf::GeneChipQCProbeSetType)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFQCProbeSetInformation_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFQCProbeSetInformation_GetProbeInformation(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFQCProbeInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFQCProbeSetInformation() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *result;
    
    result = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)new affymetrix_fusion_io::FusionCDFQCProbeSetInformation();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFQCProbeSetInformation(void * jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFData() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *result;
    
    result = (affymetrix_fusion_io::FusionCDFData *)new affymetrix_fusion_io::FusionCDFData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFData(void * jarg1) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFData_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCDFData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCDFData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    {
        affymetrix_fusion_io::FusionCDFFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::FusionCDFFileHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCDFData_GetError(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetError();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCDFData_GetProbeSetName(void * jarg1, int jarg2) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = (int)jarg2; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCDFData_GetChipType(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetChipType();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFData_Close(void * jarg1) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFData_IsXDACompatibleFile(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)affymetrix_fusion_io::FusionCDFData::IsXDACompatibleFile((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCDFData_IsCalvinCompatibleFile(char * jarg1) {
    unsigned int jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    arg1 = jarg1; 
    result = (bool)affymetrix_fusion_io::FusionCDFData::IsCalvinCompatibleFile((char const *)arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCDFData_GetProbeSetType(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affxcdf::GeneChipProbeSetType result;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetType(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFData_GetProbeSetInformation(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFData_GetQCProbeSetInformation(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCDFData_FusionGetQCProbeSetInformation_By_Type(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    affxcdf::GeneChipQCProbeSetType arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFData *)jarg1; 
    arg2 = (affxcdf::GeneChipQCProbeSetType)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCDFQCProbeSetInformation & type is null", 0);
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCDFQCProbeSetNames_GetStaticCDFQCProbeSetName(int jarg1) {
    void * jresult = 0 ;
    affxcdf::GeneChipQCProbeSetType arg1 ;
    std::wstring result;
    
    arg1 = (affxcdf::GeneChipQCProbeSetType)jarg1; 
    result = affymetrix_fusion_io::FusionCDFQCProbeSetNames::GetStaticCDFQCProbeSetName(arg1);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCDFQCProbeSetNames() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetNames *result;
    
    result = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *)new affymetrix_fusion_io::FusionCDFQCProbeSetNames();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCDFQCProbeSetNames(void * jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeSetNames *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_FusionCELData_CEL_ALL() {
    int jresult = 0 ;
    int result;
    
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_ALL;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_FusionCELData_CEL_DATA() {
    int jresult = 0 ;
    int result;
    
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_DATA;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_FusionCELData_CEL_OUTLIER() {
    int jresult = 0 ;
    int result;
    
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_OUTLIER;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_get_FusionCELData_CEL_MASK() {
    int jresult = 0 ;
    int result;
    
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_MASK;
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCELData() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *result;
    
    result = (affymetrix_fusion_io::FusionCELData *)new affymetrix_fusion_io::FusionCELData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCELData(void * jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCELData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCELData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetError(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetError((wchar_t const *)arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetError(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetError();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetHeaderKey(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetHeader();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetAlg(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetParams(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetParams();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetAlgorithmParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetAlgorithmParameterTag(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetNumberAlgorithmParameters(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetAlgorithmParameters(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetParameters(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    {
        affymetrix_fusion_io::FusionTagValuePairTypeList &_result_ref = (arg1)->GetParameters();
        result = (affymetrix_fusion_io::FusionTagValuePairTypeList *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCELData_GetChipType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetCellMargin(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_GetNumOutliers(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (unsigned int)(arg1)->GetNumOutliers();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_GetNumMasked(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (unsigned int)(arg1)->GetNumMasked();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_IndexToX(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_IndexToY(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_XYToIndex__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_XYToIndex__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
    int jresult = 0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int result;
    
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    result = (int)affymetrix_fusion_io::FusionCELData::XYToIndex(arg1,arg2,arg3,arg4);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_GetEntry__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    FusionCELFileEntryType *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (FusionCELFileEntryType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FusionCELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_GetEntry__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    FusionCELFileEntryType *arg4 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (FusionCELFileEntryType *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FusionCELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionCELData_GetIntensity__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionCELData_GetIntensity__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionCELData_GetStdv__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FusionCELData_GetStdv__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_FusionCELData_GetPixels__SWIG_0(void * jarg1, int jarg2) {
    short jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    short result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_FusionCELData_GetPixels__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    short jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_IsMasked__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_IsMasked__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_IsOutlier__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_IsOutlier__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_Close(void * jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_GetFileSize(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (unsigned int)(arg1)->GetFileSize();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_Read__SWIG_0(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_Read__SWIG_1(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_ReadEx__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_ReadEx__SWIG_1(void * jarg1, char * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = jarg2; 
    result = (bool)(arg1)->ReadEx((char const *)arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCELData_ReadEx__SWIG_2(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (bool)(arg1)->ReadEx();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCELData_GetReadState(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetAlgorithmName(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetAlgorithmName((wchar_t const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_AddAlgorithmParameter(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wchar_t *arg3 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    arg3 = (wchar_t *)jarg3; 
    (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetDimensions(void * jarg1, int jarg2, int jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetChipType(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetChipType((wchar_t const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCELData_SetMargin(void * jarg1, int jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELData *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FusionCELFileEntryType_Intensity(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_FusionCELFileEntryType_Intensity(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    result = (float) ((arg1)->Intensity);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FusionCELFileEntryType_Stdv(void * jarg1, float jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_get_FusionCELFileEntryType_Stdv(void * jarg1) {
    float jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    result = (float) ((arg1)->Stdv);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_set_FusionCELFileEntryType_Pixels(void * jarg1, short jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    short arg2 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


SWIGEXPORT short SWIGSTDCALL CSharp_get_FusionCELFileEntryType_Pixels(void * jarg1) {
    short jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    short result;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    result = (short) ((arg1)->Pixels);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCELFileEntryType() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *result;
    
    result = (affymetrix_fusion_io::FusionCELFileEntryType *)new affymetrix_fusion_io::FusionCELFileEntryType();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCELFileEntryType(void * jarg1) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_CanReadFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (bool)(arg1)->CanReadFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFileName((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCELDataAdapter const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetError(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetError((wchar_t const *)arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetError(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetError();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetHeaderKey(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetNumCells(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetHeader();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetAlg(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetParams(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetParams();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetAlgorithmParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetAlgorithmParameterTag(void * jarg1, int jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetNumberAlgorithmParameters(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetAlgorithmParameters(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetParameters(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    (arg1)->GetParameters(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetChipType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetCellMargin(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetNumOutliers(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    unsigned int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (unsigned int)(arg1)->GetNumOutliers();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetNumMasked(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    unsigned int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (unsigned int)(arg1)->GetNumMasked();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IndexToX(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IndexToY(void * jarg1, int jarg2) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_XYToIndex(void * jarg1, int jarg2, int jarg3) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetEntry__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg3 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetEntry__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg4 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (affymetrix_fusion_io::FusionCELFileEntryType *)jarg4;
    if(!arg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionCELFileEntryType & type is null", 0);
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


SWIGEXPORT float SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetIntensity__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetIntensity__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetStdv__SWIG_0(void * jarg1, int jarg2) {
    float jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetStdv__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    float jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetPixels__SWIG_0(void * jarg1, int jarg2) {
    short jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    short result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetPixels__SWIG_1(void * jarg1, int jarg2, int jarg3) {
    short jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IsMasked__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IsMasked__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IsOutlier__SWIG_0(void * jarg1, int jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_IsOutlier__SWIG_1(void * jarg1, int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_Close(void * jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    (arg1)->Close();
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_Read(void * jarg1, unsigned int jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool arg2 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCELDataAdapter_ReadEx(void * jarg1, char * jarg2, int jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCELDataAdapter_GetReadState(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_Clear(void * jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetAlgorithmName(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetAlgorithmName((wchar_t const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_AddAlgorithmParameter(void * jarg1, void * jarg2, void * jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wchar_t *arg3 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    arg3 = (wchar_t *)jarg3; 
    (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetDimensions(void * jarg1, int jarg2, int jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetChipType(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    (arg1)->SetChipType((wchar_t const *)arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCELDataAdapter_SetMargin(void * jarg1, int jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFusionCELDataAdapter(void * jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvertFusion(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg1 = 0 ;
    TagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    arg2 = (TagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TagValuePairTypeList & type is null", 0);
        return ;
    } 
    affymetrix_fusion_io::ConvertFusion(*arg1,*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvertGCOS(void * jarg1, void * jarg2) {
    TagValuePairTypeList *arg1 = 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (TagValuePairTypeList *)jarg1;
    if(!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TagValuePairTypeList & type is null", 0);
        return ;
    } 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    affymetrix_fusion_io::ConvertGCOS(*arg1,*arg2);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetNumProbeSets(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetNumProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAssayType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::AssayType result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAssayType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetChipType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetChipType();
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAlgName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgName();
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAlgVersion(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgVersion();
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAlgorithmParameters(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    (arg1)->GetAlgorithmParameters(*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAlgorithmParameterCount(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (u_int32_t)(arg1)->GetAlgorithmParameterCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetSummaryParameters(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    (arg1)->GetSummaryParameters(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetParentCellFile(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetParentCellFile();
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetProgID(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetProgID();
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetAlgorithmParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetSummaryParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wstring result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
    
    jresult = new wstring((wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetBackgroundZoneInfo(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneInfo *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (affxchp::BackgroundZoneInfo *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneInfo & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZoneInfo(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetBackgroundZones(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (affxchp::BackgroundZoneTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneTypeList & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZones(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetBackgroundZone(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneType *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    arg2 = (affxchp::BackgroundZoneType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneType & type is null", 0);
        return ;
    } 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetMagic(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetMagic();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFusionCHPHeaderAdapter_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFusionCHPHeaderAdapter(void * jarg1) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_CanReadFile(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    result = (bool)(arg1)->CanReadFile();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetExpressionResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetExpressionResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetGenotypingResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetGenotypingResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetUniversalResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetUniversalResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetResequencingResults(void * jarg1, void * jarg2) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg2 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionResequencingResults *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionResequencingResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetResequencingResults(*arg2);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFusionCHPDataAdapter_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPDataAdapter_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    std::string *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return ;
    }
    std::string arg2_str(jarg2);
    arg2 = &arg2_str; 
    (arg1)->SetFileName((std::string const &)*arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IFusionCHPDataAdapter_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPDataAdapter const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFusionCHPDataAdapter_Clear(void * jarg1) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFusionCHPDataAdapter(void * jarg1) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    
    arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCHPHeader() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *result;
    
    result = (affymetrix_fusion_io::FusionCHPHeader *)new affymetrix_fusion_io::FusionCHPHeader();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCHPHeader(void * jarg1) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetCols(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetCols();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetRows(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetRows();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetNumProbeSets(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetNumProbeSets();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetAssayType(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::AssayType result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAssayType();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetChipType(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetChipType();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetAlgName(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgName();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetAlgVersion(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgVersion();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_AlgorithmParameters(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    (arg1)->AlgorithmParameters(*arg2);
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPHeader_AlgorithmParameterCount(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    u_int32_t result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (u_int32_t)(arg1)->AlgorithmParameterCount();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_SummaryParameters(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (affymetrix_fusion_io::FusionTagValuePairTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionTagValuePairTypeList & type is null", 0);
        return ;
    } 
    (arg1)->SummaryParameters(*arg2);
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetParentCellFile(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetParentCellFile();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetProgID(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetProgID();
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetAlgorithmParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPHeader_GetSummaryParameter(void * jarg1, void * jarg2) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (wchar_t *)jarg2; 
    result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
    
    jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_GetBackgroundZoneInfo(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneInfo *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (affxchp::BackgroundZoneInfo *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneInfo & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZoneInfo(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_GetBackgroundZones(void * jarg1, void * jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (affxchp::BackgroundZoneTypeList *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneTypeList & type is null", 0);
        return ;
    } 
    (arg1)->GetBackgroundZones(*arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_GetBackgroundZone(void * jarg1, void * jarg2, int jarg3, int jarg4) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneType *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    arg2 = (affxchp::BackgroundZoneType *)jarg2;
    if(!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affxchp::BackgroundZoneType & type is null", 0);
        return ;
    } 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
    
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetMagic(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetMagic();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FusionCHPHeader_GetVersion(void * jarg1) {
    int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetVersion();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPHeader_CheckAdapter(void * jarg1) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPHeader *)jarg1; 
    ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->CheckAdapter();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FusionCHPData() {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *result;
    
    result = (affymetrix_fusion_io::FusionCHPData *)new affymetrix_fusion_io::FusionCHPData();
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FusionCHPData(void * jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    delete arg1;
    
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_GetExpressionResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetExpressionResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_GetGenotypingResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetGenotypingResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_GetUniversalResults(void * jarg1, int jarg2, void * jarg3) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg3 = 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)jarg3;
    if(!arg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & type is null", 0);
        return 0;
    } 
    result = (bool)(arg1)->GetUniversalResults(arg2,*arg3);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_Read(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_ReadHeader(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FusionCHPData_Exists(void * jarg1) {
    unsigned int jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPData_SetFileName(void * jarg1, char * jarg2) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    arg2 = jarg2; 
    (arg1)->SetFileName((char const *)arg2);
    
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FusionCHPData_GetFileName(void * jarg1) {
    char * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    std::string result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPData const *)arg1)->GetFileName();
    
    jresult = SWIG_csharp_string_callback((&result)->c_str()); 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPData_Clear(void * jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    (arg1)->Clear();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPData_CheckAdapter(void * jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    ((affymetrix_fusion_io::FusionCHPData const *)arg1)->CheckAdapter();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPData_CreateAdapter(void * jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    (arg1)->CreateAdapter();
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_FusionCHPData_DeleteAdapter(void * jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    (arg1)->DeleteAdapter();
    
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FusionCHPData_GetHeader(void * jarg1) {
    void * jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    affymetrix_fusion_io::FusionCHPHeader *result;
    
    arg1 = (affymetrix_fusion_io::FusionCHPData *)jarg1; 
    {
        affymetrix_fusion_io::FusionCHPHeader &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::FusionCHPHeader *) &_result_ref;
    }
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_NotImplementedExceptionUpcast(affymetrix_calvin_exceptions::NotImplementedException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_FormatExceptionUpcast(affymetrix_calvin_exceptions::FormatException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_ParameterMismatchExceptionUpcast(affymetrix_calvin_exceptions::ParameterMismatchException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_UnexpectedParameterExceptionUpcast(affymetrix_calvin_exceptions::UnexpectedParameterException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_OutOfRangeParameterExceptionUpcast(affymetrix_calvin_exceptions::OutOfRangeParameterException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_ByteColumnTypeUpcast(affymetrix_calvin_io::ByteColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_UByteColumnTypeUpcast(affymetrix_calvin_io::UByteColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_ShortColumnTypeUpcast(affymetrix_calvin_io::ShortColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_UShortColumnTypeUpcast(affymetrix_calvin_io::UShortColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_IntColumnTypeUpcast(affymetrix_calvin_io::IntColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_UIntColumnTypeUpcast(affymetrix_calvin_io::UIntColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_FloatColumnTypeUpcast(affymetrix_calvin_io::FloatColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_ASCIIColumnTypeUpcast(affymetrix_calvin_io::ASCIIColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ColumnType * SWIGSTDCALL CSharp_UnicodeColumnTypeUpcast(affymetrix_calvin_io::UnicodeColumnType *objectRef) {
    return (affymetrix_calvin_io::ColumnType *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_DataSetNotOpenExceptionUpcast(affymetrix_calvin_exceptions::DataSetNotOpenException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_ColumnIndexOutOfBoundsExceptionUpcast(affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_RowIndexOutOfBoundsExceptionUpcast(affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_UnexpectedColumnTypeExceptionUpcast(affymetrix_calvin_exceptions::UnexpectedColumnTypeException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_DataGroupNotFoundExceptionUpcast(affymetrix_calvin_exceptions::DataGroupNotFoundException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_DataSetNotFoundExceptionUpcast(affymetrix_calvin_exceptions::DataSetNotFoundException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_ProbeSetNotFoundExceptionUpcast(affymetrix_calvin_exceptions::ProbeSetNotFoundException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_CDFAccessNotSupportedByModeExceptionUpcast(affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_FileNotFoundExceptionUpcast(affymetrix_calvin_exceptions::FileNotFoundException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_InvalidVersionExceptionUpcast(affymetrix_calvin_exceptions::InvalidVersionException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_InvalidFileTypeExceptionUpcast(affymetrix_calvin_exceptions::InvalidFileTypeException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_UnableToOpenFileExceptionUpcast(affymetrix_calvin_exceptions::UnableToOpenFileException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_exceptions::CalvinException * SWIGSTDCALL CSharp_FileNotOpenExceptionUpcast(affymetrix_calvin_exceptions::FileNotOpenException *objectRef) {
    return (affymetrix_calvin_exceptions::CalvinException *)objectRef;
}

SWIGEXPORT affymetrix_calvin_io::ArrayFileReader * SWIGSTDCALL CSharp_TemplateFileReaderUpcast(affymetrix_calvin_io::TemplateFileReader *objectRef) {
    return (affymetrix_calvin_io::ArrayFileReader *)objectRef;
}

SWIGEXPORT affymetrix_calvin_array::ArrayData * SWIGSTDCALL CSharp_TemplateDataUpcast(affymetrix_calvin_array::TemplateData *objectRef) {
    return (affymetrix_calvin_array::ArrayData *)objectRef;
}

SWIGEXPORT affxchp::CProbeSetResults * SWIGSTDCALL CSharp_CExpressionProbeSetResultsUpcast(affxchp::CExpressionProbeSetResults *objectRef) {
    return (affxchp::CProbeSetResults *)objectRef;
}

SWIGEXPORT affxchp::CProbeSetResults * SWIGSTDCALL CSharp_CGenotypeProbeSetResultsUpcast(affxchp::CGenotypeProbeSetResults *objectRef) {
    return (affxchp::CProbeSetResults *)objectRef;
}

SWIGEXPORT affxchp::CProbeSetResults * SWIGSTDCALL CSharp_CUniversalProbeSetResultsUpcast(affxchp::CUniversalProbeSetResults *objectRef) {
    return (affxchp::CProbeSetResults *)objectRef;
}

SWIGEXPORT affymetrix_fusion_io::FusionProbeSetResults * SWIGSTDCALL CSharp_FusionExpressionProbeSetResultsUpcast(affymetrix_fusion_io::FusionExpressionProbeSetResults *objectRef) {
    return (affymetrix_fusion_io::FusionProbeSetResults *)objectRef;
}

SWIGEXPORT affymetrix_fusion_io::FusionProbeSetResults * SWIGSTDCALL CSharp_FusionGenotypeProbeSetResultsUpcast(affymetrix_fusion_io::FusionGenotypeProbeSetResults *objectRef) {
    return (affymetrix_fusion_io::FusionProbeSetResults *)objectRef;
}

SWIGEXPORT affymetrix_fusion_io::FusionProbeSetResults * SWIGSTDCALL CSharp_FusionUniversalProbeSetResultsUpcast(affymetrix_fusion_io::FusionUniversalProbeSetResults *objectRef) {
    return (affymetrix_fusion_io::FusionProbeSetResults *)objectRef;
}

#ifdef __cplusplus
}
#endif

