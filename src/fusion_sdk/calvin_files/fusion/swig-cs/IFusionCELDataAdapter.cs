/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IFusionCELDataAdapter : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IFusionCELDataAdapter(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IFusionCELDataAdapter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IFusionCELDataAdapter() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_IFusionCELDataAdapter(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public virtual bool CanReadFile() {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_CanReadFile(swigCPtr);
    return ret;
  }

  public virtual void SetFileName(string value) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetFileName(swigCPtr, value);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetFileName() {
    string ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetFileName(swigCPtr);
    return ret;
  }

  public virtual void SetError(SWIGTYPE_p_wchar_t value) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetError(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(value));
  }

  public virtual SWIGTYPE_p_std__wstring GetError() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetError(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetHeaderKey(SWIGTYPE_p_wchar_t key) {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetHeaderKey(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(key)), true);
    return ret;
  }

  public virtual int GetVersion() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetVersion(swigCPtr);
    return ret;
  }

  public virtual int GetCols() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetCols(swigCPtr);
    return ret;
  }

  public virtual int GetRows() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetRows(swigCPtr);
    return ret;
  }

  public virtual int GetNumCells() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetNumCells(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetHeader() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetHeader(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetAlg() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetAlg(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetParams() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetParams(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetAlgorithmParameter(SWIGTYPE_p_wchar_t tag) {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetAlgorithmParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag)), true);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetAlgorithmParameterTag(int index) {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetAlgorithmParameterTag(swigCPtr, index), true);
    return ret;
  }

  public virtual int GetNumberAlgorithmParameters() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetNumberAlgorithmParameters(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_std__wstring GetAlgorithmParameters() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetAlgorithmParameters(swigCPtr), true);
    return ret;
  }

  public virtual void GetParameters(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t values) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_GetParameters(swigCPtr, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(values));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_std__wstring GetChipType() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.IFusionCELDataAdapter_GetChipType(swigCPtr), true);
    return ret;
  }

  public virtual int GetCellMargin() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetCellMargin(swigCPtr);
    return ret;
  }

  public virtual uint GetNumOutliers() {
    uint ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetNumOutliers(swigCPtr);
    return ret;
  }

  public virtual uint GetNumMasked() {
    uint ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetNumMasked(swigCPtr);
    return ret;
  }

  public virtual int IndexToX(int index) {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IndexToX(swigCPtr, index);
    return ret;
  }

  public virtual int IndexToY(int index) {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IndexToY(swigCPtr, index);
    return ret;
  }

  public virtual int XYToIndex(int x, int y) {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_XYToIndex(swigCPtr, x, y);
    return ret;
  }

  public virtual void GetEntry(int index, FusionCELFileEntryType entry) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_GetEntry__SWIG_0(swigCPtr, index, FusionCELFileEntryType.getCPtr(entry));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetEntry(int x, int y, FusionCELFileEntryType entry) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_GetEntry__SWIG_1(swigCPtr, x, y, FusionCELFileEntryType.getCPtr(entry));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float GetIntensity(int index) {
    float ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetIntensity__SWIG_0(swigCPtr, index);
    return ret;
  }

  public virtual float GetIntensity(int x, int y) {
    float ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetIntensity__SWIG_1(swigCPtr, x, y);
    return ret;
  }

  public virtual float GetStdv(int index) {
    float ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetStdv__SWIG_0(swigCPtr, index);
    return ret;
  }

  public virtual float GetStdv(int x, int y) {
    float ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetStdv__SWIG_1(swigCPtr, x, y);
    return ret;
  }

  public virtual short GetPixels(int index) {
    short ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetPixels__SWIG_0(swigCPtr, index);
    return ret;
  }

  public virtual short GetPixels(int x, int y) {
    short ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetPixels__SWIG_1(swigCPtr, x, y);
    return ret;
  }

  public virtual bool IsMasked(int x, int y) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IsMasked__SWIG_0(swigCPtr, x, y);
    return ret;
  }

  public virtual bool IsMasked(int index) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IsMasked__SWIG_1(swigCPtr, index);
    return ret;
  }

  public virtual bool IsOutlier(int x, int y) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IsOutlier__SWIG_0(swigCPtr, x, y);
    return ret;
  }

  public virtual bool IsOutlier(int index) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_IsOutlier__SWIG_1(swigCPtr, index);
    return ret;
  }

  public virtual void Close() {
    affx_fusionPINVOKE.IFusionCELDataAdapter_Close(swigCPtr);
  }

  public virtual bool ReadHeader() {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_ReadHeader(swigCPtr);
    return ret;
  }

  public virtual bool Read(bool bIncludeMaskAndOutliers) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_Read(swigCPtr, bIncludeMaskAndOutliers);
    return ret;
  }

  public virtual bool ReadEx(string filename, int state) {
    bool ret = affx_fusionPINVOKE.IFusionCELDataAdapter_ReadEx(swigCPtr, filename, state);
    return ret;
  }

  public virtual int GetReadState() {
    int ret = affx_fusionPINVOKE.IFusionCELDataAdapter_GetReadState(swigCPtr);
    return ret;
  }

  public virtual void Clear() {
    affx_fusionPINVOKE.IFusionCELDataAdapter_Clear(swigCPtr);
  }

  public virtual void SetAlgorithmName(SWIGTYPE_p_wchar_t str) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetAlgorithmName(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(str));
  }

  public virtual void AddAlgorithmParameter(SWIGTYPE_p_wchar_t tag, SWIGTYPE_p_wchar_t value) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_AddAlgorithmParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag), SWIGTYPE_p_wchar_t.getCPtr(value));
  }

  public virtual void SetDimensions(int rows, int cols) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetDimensions(swigCPtr, rows, cols);
  }

  public virtual void SetChipType(SWIGTYPE_p_wchar_t str) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetChipType(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(str));
  }

  public virtual void SetMargin(int margin) {
    affx_fusionPINVOKE.IFusionCELDataAdapter_SetMargin(swigCPtr, margin);
  }

}
