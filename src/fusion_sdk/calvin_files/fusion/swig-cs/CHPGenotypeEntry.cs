/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CHPGenotypeEntry : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CHPGenotypeEntry(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CHPGenotypeEntry obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CHPGenotypeEntry() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_CHPGenotypeEntry(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public CHPGenotypeEntry() : this(affx_fusionPINVOKE.new_CHPGenotypeEntry__SWIG_0(), true) {
  }

  public CHPGenotypeEntry(SWIGTYPE_p_std__wstring probeSetname, byte call, float confidence, float RAS1, float RAS2, float AACall, float ABCall, float BBCall, float NoCall) : this(affx_fusionPINVOKE.new_CHPGenotypeEntry__SWIG_1(SWIGTYPE_p_std__wstring.getCPtr(probeSetname), call, confidence, RAS1, RAS2, AACall, ABCall, BBCall, NoCall), true) {
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    affx_fusionPINVOKE.CHPGenotypeEntry_Clear(swigCPtr);
  }

  public CHPGenotypeEntry CHPGenotypeEntry_assign(CHPGenotypeEntry zn) {
    CHPGenotypeEntry ret = new CHPGenotypeEntry(affx_fusionPINVOKE.CHPGenotypeEntry_CHPGenotypeEntry_assign(swigCPtr, CHPGenotypeEntry.getCPtr(zn)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__wstring GetProbeSetName() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPGenotypeEntry_GetProbeSetName(swigCPtr), true);
    return ret;
  }

  public byte GetCall() {
    byte ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetCall(swigCPtr);
    return ret;
  }

  public float GetConfidence() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetConfidence(swigCPtr);
    return ret;
  }

  public float GetRAS1() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetRAS1(swigCPtr);
    return ret;
  }

  public float GetRAS2() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetRAS2(swigCPtr);
    return ret;
  }

  public float GetAACall() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetAACall(swigCPtr);
    return ret;
  }

  public float GetABCall() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetABCall(swigCPtr);
    return ret;
  }

  public float GetBBCall() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetBBCall(swigCPtr);
    return ret;
  }

  public float GetNoCall() {
    float ret = affx_fusionPINVOKE.CHPGenotypeEntry_GetNoCall(swigCPtr);
    return ret;
  }

  public void SetProbeSetName(SWIGTYPE_p_std__wstring p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetProbeSetName(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(p));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCall(byte p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetCall(swigCPtr, p);
  }

  public void SetConfidence(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetConfidence(swigCPtr, p);
  }

  public void SetRAS1(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetRAS1(swigCPtr, p);
  }

  public void SetRAS2(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetRAS2(swigCPtr, p);
  }

  public void SetAACall(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetAACall(swigCPtr, p);
  }

  public void SetABCall(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetABCall(swigCPtr, p);
  }

  public void SetBBCall(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetBBCall(swigCPtr, p);
  }

  public void SetNoCall(float p) {
    affx_fusionPINVOKE.CHPGenotypeEntry_SetNoCall(swigCPtr, p);
  }

}
