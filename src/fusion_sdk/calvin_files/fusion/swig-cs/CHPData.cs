/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CHPData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CHPData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CHPData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CHPData() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_CHPData(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public CHPData() : this(affx_fusionPINVOKE.new_CHPData__SWIG_0(), true) {
  }

  public CHPData(string filename, string type) : this(affx_fusionPINVOKE.new_CHPData__SWIG_1(filename, type), true) {
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    affx_fusionPINVOKE.CHPData_Clear(swigCPtr);
  }

  public void SetFilename(string p) {
    affx_fusionPINVOKE.CHPData_SetFilename(swigCPtr, p);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFilename() {
    string ret = affx_fusionPINVOKE.CHPData_GetFilename(swigCPtr);
    return ret;
  }

  public byte GetVersion() {
    byte ret = affx_fusionPINVOKE.CHPData_GetVersion(swigCPtr);
    return ret;
  }

  public byte GetMagic() {
    byte ret = affx_fusionPINVOKE.CHPData_GetMagic(swigCPtr);
    return ret;
  }

  public int GetRows() {
    int ret = affx_fusionPINVOKE.CHPData_GetRows(swigCPtr);
    return ret;
  }

  public void SetRows(int value) {
    affx_fusionPINVOKE.CHPData_SetRows(swigCPtr, value);
  }

  public int GetCols() {
    int ret = affx_fusionPINVOKE.CHPData_GetCols(swigCPtr);
    return ret;
  }

  public void SetCols(int value) {
    affx_fusionPINVOKE.CHPData_SetCols(swigCPtr, value);
  }

  public SWIGTYPE_p_std__wstring GetProgId() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPData_GetProgId(swigCPtr), true);
    return ret;
  }

  public void SetProgId(SWIGTYPE_p_std__wstring value) {
    affx_fusionPINVOKE.CHPData_SetProgId(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(value));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetArrayType() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPData_GetArrayType(swigCPtr), true);
    return ret;
  }

  public string GetAssayType() {
    string ret = affx_fusionPINVOKE.CHPData_GetAssayType(swigCPtr);
    return ret;
  }

  public void SetArrayType(SWIGTYPE_p_std__wstring value) {
    affx_fusionPINVOKE.CHPData_SetArrayType(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(value));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetAlgName() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPData_GetAlgName(swigCPtr), true);
    return ret;
  }

  public void SetAlgName(SWIGTYPE_p_std__wstring value) {
    affx_fusionPINVOKE.CHPData_SetAlgName(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(value));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetParentCell() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPData_GetParentCell(swigCPtr), true);
    return ret;
  }

  public void SetParentCell(SWIGTYPE_p_std__wstring value) {
    affx_fusionPINVOKE.CHPData_SetParentCell(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(value));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__wstring GetAlgVersion() {
    SWIGTYPE_p_std__wstring ret = new SWIGTYPE_p_std__wstring(affx_fusionPINVOKE.CHPData_GetAlgVersion(swigCPtr), true);
    return ret;
  }

  public void SetAlgVersion(SWIGTYPE_p_std__wstring value) {
    affx_fusionPINVOKE.CHPData_SetAlgVersion(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(value));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddAlgParam(SWIGTYPE_p_std__wstring name, SWIGTYPE_p_std__wstring param) {
    affx_fusionPINVOKE.CHPData_AddAlgParam(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name), SWIGTYPE_p_std__wstring.getCPtr(param));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public ParameterNameValueType GetAlgParam(SWIGTYPE_p_std__wstring tag) {
    ParameterNameValueType ret = new ParameterNameValueType(affx_fusionPINVOKE.CHPData_GetAlgParam(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(tag)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddChipSum(SWIGTYPE_p_std__wstring name, SWIGTYPE_p_std__wstring param) {
    affx_fusionPINVOKE.CHPData_AddChipSum(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name), SWIGTYPE_p_std__wstring.getCPtr(param));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t GetChipSums() {
    SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t ret = new SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t(affx_fusionPINVOKE.CHPData_GetChipSums(swigCPtr), true);
    return ret;
  }

  public ParameterNameValueType GetChipSum(SWIGTYPE_p_std__wstring tag) {
    ParameterNameValueType ret = new ParameterNameValueType(affx_fusionPINVOKE.CHPData_GetChipSum(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(tag)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FileHeader GetFileHeader() {
    IntPtr cPtr = affx_fusionPINVOKE.CHPData_GetFileHeader(swigCPtr);
    FileHeader ret = (cPtr == IntPtr.Zero) ? null : new FileHeader(cPtr, false);
    return ret;
  }

  public GenericData GetGenericData() {
    GenericData ret = new GenericData(affx_fusionPINVOKE.CHPData_GetGenericData(swigCPtr), false);
    return ret;
  }

  public void SetEntryCount(int ln) {
    affx_fusionPINVOKE.CHPData_SetEntryCount(swigCPtr, ln);
  }

  public int GetEntryCount() {
    int ret = affx_fusionPINVOKE.CHPData_GetEntryCount(swigCPtr);
    return ret;
  }

  public void GetExpressionEntry(int row, CHPExpressionEntry e) {
    affx_fusionPINVOKE.CHPData_GetExpressionEntry(swigCPtr, row, CHPExpressionEntry.getCPtr(e));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetGenotypeEntry(int row, CHPGenotypeEntry e) {
    affx_fusionPINVOKE.CHPData_GetGenotypeEntry(swigCPtr, row, CHPGenotypeEntry.getCPtr(e));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetUniversalEntry(int row, CHPUniversalEntry e) {
    affx_fusionPINVOKE.CHPData_GetUniversalEntry(swigCPtr, row, CHPUniversalEntry.getCPtr(e));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetBackgroundZoneCnt() {
    int ret = affx_fusionPINVOKE.CHPData_GetBackgroundZoneCnt(swigCPtr);
    return ret;
  }

  public void SetBackgroundZoneCnt(int ln) {
    affx_fusionPINVOKE.CHPData_SetBackgroundZoneCnt(swigCPtr, ln);
  }

  public void GetBackgroundZone(int row, CHPBackgroundZone zone) {
    affx_fusionPINVOKE.CHPData_GetBackgroundZone(swigCPtr, row, CHPBackgroundZone.getCPtr(zone));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBackgroundZones(int row, int rowCnt, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t zones) {
    affx_fusionPINVOKE.CHPData_GetBackgroundZones(swigCPtr, row, rowCnt, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t.getCPtr(zones));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

}
