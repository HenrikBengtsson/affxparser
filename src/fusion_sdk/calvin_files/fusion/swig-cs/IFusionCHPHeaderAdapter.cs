/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IFusionCHPHeaderAdapter : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IFusionCHPHeaderAdapter(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IFusionCHPHeaderAdapter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IFusionCHPHeaderAdapter() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_IFusionCHPHeaderAdapter(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  public virtual int GetCols() {
    int ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetCols(swigCPtr);
    return ret;
  }

  public virtual int GetRows() {
    int ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetRows(swigCPtr);
    return ret;
  }

  public virtual int GetNumProbeSets() {
    int ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetNumProbeSets(swigCPtr);
    return ret;
  }

  public virtual AssayType GetAssayType() {
    AssayType ret = (AssayType)affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAssayType(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetChipType() {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetChipType(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetAlgName() {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAlgName(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetAlgVersion() {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAlgVersion(swigCPtr), true);
    return ret;
  }

  public virtual void GetAlgorithmParameters(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t values) {
    affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAlgorithmParameters(swigCPtr, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(values));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint GetAlgorithmParameterCount() {
    uint ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAlgorithmParameterCount(swigCPtr);
    return ret;
  }

  public virtual void GetSummaryParameters(SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t values) {
    affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetSummaryParameters(swigCPtr, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t.getCPtr(values));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_wstring GetParentCellFile() {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetParentCellFile(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetProgID() {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetProgID(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetAlgorithmParameter(SWIGTYPE_p_wchar_t tag) {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetAlgorithmParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag)), true);
    return ret;
  }

  public virtual SWIGTYPE_p_wstring GetSummaryParameter(SWIGTYPE_p_wchar_t tag) {
    SWIGTYPE_p_wstring ret = new SWIGTYPE_p_wstring(affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetSummaryParameter(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(tag)), true);
    return ret;
  }

  public virtual void GetBackgroundZoneInfo(BackgroundZoneInfo info) {
    affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetBackgroundZoneInfo(swigCPtr, BackgroundZoneInfo.getCPtr(info));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetBackgroundZones(SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t zones) {
    affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetBackgroundZones(swigCPtr, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t.getCPtr(zones));
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetBackgroundZone(BackgroundZoneType type, int x, int y) {
    affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetBackgroundZone(swigCPtr, BackgroundZoneType.getCPtr(type), x, y);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetMagic() {
    int ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetMagic(swigCPtr);
    return ret;
  }

  public virtual int GetVersion() {
    int ret = affx_fusionPINVOKE.IFusionCHPHeaderAdapter_GetVersion(swigCPtr);
    return ret;
  }

}
