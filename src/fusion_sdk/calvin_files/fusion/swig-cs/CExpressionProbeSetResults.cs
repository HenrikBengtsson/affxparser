/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CExpressionProbeSetResults : CProbeSetResults {
  private HandleRef swigCPtr;

  internal CExpressionProbeSetResults(IntPtr cPtr, bool cMemoryOwn) : base(affx_fusionPINVOKE.CExpressionProbeSetResultsUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CExpressionProbeSetResults obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExpressionProbeSetResults() {
    Dispose();
  }

  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionPINVOKE.delete_CExpressionProbeSetResults(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  public float DetectionPValue {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_DetectionPValue(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_DetectionPValue(swigCPtr);
      return ret;
    } 
  }

  public float Signal {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_Signal(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_Signal(swigCPtr);
      return ret;
    } 
  }

  public ushort NumPairs {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_NumPairs(swigCPtr, value);
    } 
    get {
      ushort ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_NumPairs(swigCPtr);
      return ret;
    } 
  }

  public ushort NumUsedPairs {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_NumUsedPairs(swigCPtr, value);
    } 
    get {
      ushort ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_NumUsedPairs(swigCPtr);
      return ret;
    } 
  }

  public byte Detection {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_Detection(swigCPtr, value);
    } 
    get {
      byte ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_Detection(swigCPtr);
      return ret;
    } 
  }

  public bool m_HasCompResults {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_m_HasCompResults(swigCPtr, value);
    } 
    get {
      bool ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_m_HasCompResults(swigCPtr);
      return ret;
    } 
  }

  public float ChangePValue {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_ChangePValue(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_ChangePValue(swigCPtr);
      return ret;
    } 
  }

  public float SignalLogRatio {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_SignalLogRatio(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_SignalLogRatio(swigCPtr);
      return ret;
    } 
  }

  public float SignalLogRatioLow {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_SignalLogRatioLow(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_SignalLogRatioLow(swigCPtr);
      return ret;
    } 
  }

  public float SignalLogRatioHigh {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_SignalLogRatioHigh(swigCPtr, value);
    } 
    get {
      float ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_SignalLogRatioHigh(swigCPtr);
      return ret;
    } 
  }

  public ushort NumCommonPairs {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_NumCommonPairs(swigCPtr, value);
    } 
    get {
      ushort ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_NumCommonPairs(swigCPtr);
      return ret;
    } 
  }

  public byte Change {
    set {
      affx_fusionPINVOKE.set_CExpressionProbeSetResults_Change(swigCPtr, value);
    } 
    get {
      byte ret = affx_fusionPINVOKE.get_CExpressionProbeSetResults_Change(swigCPtr);
      return ret;
    } 
  }

  public string GetDetectionString() {
    string ret = affx_fusionPINVOKE.CExpressionProbeSetResults_GetDetectionString(swigCPtr);
    return ret;
  }

  public string GetChangeString() {
    string ret = affx_fusionPINVOKE.CExpressionProbeSetResults_GetChangeString(swigCPtr);
    return ret;
  }

  public CExpressionProbeSetResults CExpressionProbeSetResults_assign(CExpressionProbeSetResults src) {
    CExpressionProbeSetResults ret = new CExpressionProbeSetResults(affx_fusionPINVOKE.CExpressionProbeSetResults_CExpressionProbeSetResults_assign(swigCPtr, CExpressionProbeSetResults.getCPtr(src)), true);
    if (affx_fusionPINVOKE.SWIGPendingException.Pending) throw affx_fusionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CExpressionProbeSetResults() : this(affx_fusionPINVOKE.new_CExpressionProbeSetResults(), true) {
  }

}
