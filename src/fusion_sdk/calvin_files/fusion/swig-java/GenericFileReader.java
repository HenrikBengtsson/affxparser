/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class GenericFileReader {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected GenericFileReader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GenericFileReader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionJNI.delete_GenericFileReader(swigCPtr);
    }
    swigCPtr = 0;
  }

  public GenericFileReader() {
    this(affx_fusionJNI.new_GenericFileReader(), true);
  }

  public String GetFilename() {
    return affx_fusionJNI.GenericFileReader_GetFilename(swigCPtr);
  }

  public void SetFilename(String name) {
    affx_fusionJNI.GenericFileReader_SetFilename(swigCPtr, name);
  }

  public void ReadHeader(GenericData data, GenericFileReader.ReadHeaderOption option) {
    affx_fusionJNI.GenericFileReader_ReadHeader__SWIG_0(swigCPtr, GenericData.getCPtr(data), option.swigValue());
  }

  public void ReadHeader(GenericData data) {
    affx_fusionJNI.GenericFileReader_ReadHeader__SWIG_1(swigCPtr, GenericData.getCPtr(data));
  }

  public void Open(GenericData data, GenericFileReader.OpenHint hint) {
    affx_fusionJNI.GenericFileReader_Open__SWIG_0(swigCPtr, GenericData.getCPtr(data), hint.swigValue());
  }

  public void Open(GenericData data) {
    affx_fusionJNI.GenericFileReader_Open__SWIG_1(swigCPtr, GenericData.getCPtr(data));
  }

  public long GetDataGroupCnt() {
    return affx_fusionJNI.GenericFileReader_GetDataGroupCnt(swigCPtr);
  }

  public DataGroupReader GetDataGroupReader(int index) {
    return new DataGroupReader(affx_fusionJNI.GenericFileReader_GetDataGroupReader__SWIG_0(swigCPtr, index), true);
  }

  public DataGroupReader GetDataGroupReader(SWIGTYPE_p_std__wstring name) {
    return new DataGroupReader(affx_fusionJNI.GenericFileReader_GetDataGroupReader__SWIG_1(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name)), true);
  }

  public void Close() {
    affx_fusionJNI.GenericFileReader_Close(swigCPtr);
  }

  public final static class OpenHint {
    public final static OpenHint All = new OpenHint("All");
    public final static OpenHint Sequential = new OpenHint("Sequential");
    public final static OpenHint None = new OpenHint("None");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static OpenHint swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + OpenHint.class + " with value " + swigValue);
    }

    private OpenHint(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private OpenHint(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static OpenHint[] swigValues = { All, Sequential, None };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ReadHeaderOption {
    public final static ReadHeaderOption ReadAllHeaders = new ReadHeaderOption("ReadAllHeaders");
    public final static ReadHeaderOption ReadMinDataGroupHeader = new ReadHeaderOption("ReadMinDataGroupHeader");
    public final static ReadHeaderOption ReadNoDataGroupHeader = new ReadHeaderOption("ReadNoDataGroupHeader");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ReadHeaderOption swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ReadHeaderOption.class + " with value " + swigValue);
    }

    private ReadHeaderOption(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ReadHeaderOption(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static ReadHeaderOption[] swigValues = { ReadAllHeaders, ReadMinDataGroupHeader, ReadNoDataGroupHeader };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
