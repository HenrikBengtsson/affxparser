/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif

/* fix for 'jlong' on x86_64 */
#if defined(__x86_64)
#ifdef _LP64 /* 64-bit Solaris */
#undef _LP64
#endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}
#define SWIG_exception(nullreturn, code, msg) { SWIG_JavaException(jenv, code, msg); return nullreturn; }


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>



#include "../../portability/src/AffymetrixBaseTypes.h"

#include "../../utils/src/AffymetrixGuid.h"
#include "../../utils/src/AffyStlCollectionTypes.h"
#include "../../utils/src/checksum.h"
#include "../../utils/src/Coords.h"
#include "../../utils/src/DateTime.h"
#include "../../utils/src/FileUtils.h"
#include "../../utils/src/StringUtils.h"
#include "../../utils/src/Subgrids.h"

#include "../../exception/src/ExceptionBase.h"
#include "../../exception/src/DevelopmentException.h"
#include "../../exception/src/InterpretationException.h"

#include "../../parameter/src/ParameterException.h"
#include "../../parameter/src/Parameter.h"
#include "../../parameter/src/AffymetrixParameterConsts.h"
#include "../../parameter/src/ParameterNameValueType.h"

#include "../../Array/src/ArrayAttributes.h"
#include "../../Array/src/ArrayAudit.h"
#include "../../Array/src/ArrayAuditActionTypes.h"
#include "../../Array/src/ArrayId.h"
#include "../../Array/src/ArrayData.h"

#include "../../data/src/CDFData.h"
#include "../../data/src/CDFProbeGroupInformation.h"
#include "../../data/src/CDFProbeInformation.h"
#include "../../data/src/CDFProbeSetInformation.h"
#include "../../data/src/CDFQCProbeInformation.h"
#include "../../data/src/CDFQCProbeSetInformation.h"
#include "../../data/src/CHPBackgroundZone.h"
#include "../../data/src/CHPData.h"
#include "../../data/src/CHPExpressionEntry.h"
#include "../../data/src/CHPGenotypeEntry.h"
#include "../../data/src/CHPUniversalEntry.h"
#include "../../data/src/CELData.h"
#include "../../data/src/ColumnTypes.h"
#include "../../data/src/DataException.h"
#include "../../data/src/DataGroup.h"
#include "../../data/src/DataGroupHeader.h"
#include "../../data/src/DataSet.h"
#include "../../data/src/DataSetHeader.h"
#include "../../data/src/FileHeader.h"
#include "../../data/src/GenericData.h"
#include "../../data/src/GenericDataHeader.h"
#include "../../data/src/GenericDataTypes.h"
#include "../../data/src/cdfdatatypes.h"

#include "../../parsers/src/ArrayFileReader.h"
#include "../../parsers/src/AuditFileConstants.h"
#include "../../parsers/src/AuditFileReader.h"
#include "../../parsers/src/CDFFileReader.h"
#include "../../parsers/src/CHPFileReader.h"
#include "../../parsers/src/CelFileReader.h"
#include "../../parsers/src/DataGroupHeaderReader.h"
#include "../../parsers/src/DataGroupReader.h"
#include "../../parsers/src/DataSetHeaderReader.h"
#include "../../parsers/src/DataSetReader.h"
#include "../../parsers/src/FileException.h"
#include "../../parsers/src/FileHeaderReader.h"
#include "../../parsers/src/FileInput.h"
#include "../../parsers/src/GenericDataHeaderReader.h"
#include "../../parsers/src/GenericFileReader.h"
#include "../../parsers/src/GridControlFileReader.h"
#include "../../parsers/src/TemplateFileReader.h"
#include "../../parsers/src/TextFileReader.h"

#include "../../template/src/TemplateAuditActionTypes.h"
#include "../../template/src/TemplateData.h"

#include "../../../portability/affy-base-types.h"
#include "../../../file/FileIO.h"
#include "../../../file/GridCoordinates.h"
#include "../../../file/TagValuePair.h"
#include "../../../file/CDFFileData.h"
#include "../../../file/CELFileData.h"
#include "../../../file/CHPFileData.h"
#include "../../../file/BARFileData.h"
#include "../../../file/BPMAPFileData.h"
#include "../../../file/EXPFileData.h"
#include "../../../file/GRCFileData.h"
#include "../../../file/MSKFileData.h"
#include "../../../file/PSIFileData.h"
#include "../../../file/DttArrayFileReader.h"

#include "../src/CalvinAdapter/CalvinCELDataAdapter.h"
#include "../src/CalvinAdapter/CalvinCHPDataAdapter.h"

#include "../src/FusionTagValuePairType.h"
#include "../src/FusionArrayFileReader.h"
#include "../src/FusionProbeSetResults.h"
#include "../src/FusionCDFData.h"
#include "../src/FusionCDFQCProbeSetNames.h"
#include "../src/FusionCELDataAdapterInterface.h"
#include "../src/FusionCELData.h"
#include "../src/FusionCHPDataAdapterInterface.h"
#include "../src/FusionCHPData.h"

using namespace affymetrix_fusion_io;



#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1AffymetrixGuid(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuid *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuid *)new affymetrix_calvin_utilities::AffymetrixGuid();
    
    *(affymetrix_calvin_utilities::AffymetrixGuid **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1AffymetrixGuid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::AffymetrixGuid *arg1 = (affymetrix_calvin_utilities::AffymetrixGuid *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::AffymetrixGuid **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_AffymetrixGuid_1GenerateNewGuid(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    (void)jenv;
    (void)jcls;
    result = affymetrix_calvin_utilities::AffymetrixGuid::GenerateNewGuid();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CheckSum_1OnesComplementCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    void *arg1 = (void *) 0 ;
    size_t arg2 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(void **)(void *)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (u_int16_t)affymetrix_calvin_utilities::CheckSum::OnesComplementCheckSum(arg1,arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CheckSum(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::CheckSum *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::CheckSum *)new affymetrix_calvin_utilities::CheckSum();
    
    *(affymetrix_calvin_utilities::CheckSum **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::CheckSum *arg1 = (affymetrix_calvin_utilities::CheckSum *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::CheckSum **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1UpperLeft(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::RectanglePositions result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::RectanglePositions)affymetrix_calvin_utilities::UpperLeft;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FPoint_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1FPoint_1x(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    result = (float) ((arg1)->x);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FPoint_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1FPoint_1y(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    result = (float) ((arg1)->y);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FPoint_1FPoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::FPoint const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator ==((affymetrix_calvin_utilities::FPoint const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FPoint_1FPoint_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::FPoint const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator !=((affymetrix_calvin_utilities::FPoint const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FPoint(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::FPoint *)new affymetrix_calvin_utilities::FPoint();
    
    *(affymetrix_calvin_utilities::FPoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FRegion_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRegion **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FRegion_1pts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    std::vector<affymetrix_calvin_utilities::FPoint > *arg2 = (std::vector<affymetrix_calvin_utilities::FPoint > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRegion **)(void *)&jarg1; 
    arg2 = *(std::vector<affymetrix_calvin_utilities::FPoint > **)(void *)&jarg2; 
    if (arg1) (arg1)->pts = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FRegion_1pts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    std::vector<affymetrix_calvin_utilities::FPoint > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRegion **)(void *)&jarg1; 
    result = (std::vector<affymetrix_calvin_utilities::FPoint > *)& ((arg1)->pts);
    
    *(std::vector<affymetrix_calvin_utilities::FPoint > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FRegion(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::FRegion *)new affymetrix_calvin_utilities::FRegion();
    
    *(affymetrix_calvin_utilities::FRegion **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRegion **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect();
    
    *(affymetrix_calvin_utilities::FRect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRegion *arg1 = 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRegion **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::FRegion const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect((affymetrix_calvin_utilities::FRegion const &)*arg1);
    
    *(affymetrix_calvin_utilities::FRect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FRect_1op_1FRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FRegion result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (arg1)->operator affymetrix_calvin_utilities::FRegion();
    
    *(affymetrix_calvin_utilities::FRegion **)(void *)&jresult = new affymetrix_calvin_utilities::FRegion((affymetrix_calvin_utilities::FRegion &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FRect_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (bool)((affymetrix_calvin_utilities::FRect const *)arg1)->IsEmpty();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FRect_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FRect_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperleft);
    
    *(affymetrix_calvin_utilities::FPoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FRect_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FRect_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperright);
    
    *(affymetrix_calvin_utilities::FPoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FRect_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FRect_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerright);
    
    *(affymetrix_calvin_utilities::FPoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FRect_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FPoint **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FRect_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    affymetrix_calvin_utilities::FPoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerleft);
    
    *(affymetrix_calvin_utilities::FPoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Point_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1Point_1x(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->x);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Point_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1Point_1y(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->y);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_Point_1Point_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::Point const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator ==((affymetrix_calvin_utilities::Point const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_Point_1Point_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::Point const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator !=((affymetrix_calvin_utilities::Point const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1Point(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::Point *)new affymetrix_calvin_utilities::Point();
    
    *(affymetrix_calvin_utilities::Point **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1PointU16_1t_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PointU16_1t_1x(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jarg1; 
    result = (u_int16_t) ((arg1)->x);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1PointU16_1t_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PointU16_1t_1y(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jarg1; 
    result = (u_int16_t) ((arg1)->y);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1PointU16_1t(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::PointU16_t *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::PointU16_t *)new affymetrix_calvin_utilities::PointU16_t();
    
    *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1PointU16_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::PointU16_t **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_Region_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Region **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Region_1pts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    std::vector<affymetrix_calvin_utilities::Point > *arg2 = (std::vector<affymetrix_calvin_utilities::Point > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Region **)(void *)&jarg1; 
    arg2 = *(std::vector<affymetrix_calvin_utilities::Point > **)(void *)&jarg2; 
    if (arg1) (arg1)->pts = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Region_1pts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    std::vector<affymetrix_calvin_utilities::Point > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Region **)(void *)&jarg1; 
    result = (std::vector<affymetrix_calvin_utilities::Point > *)& ((arg1)->pts);
    
    *(std::vector<affymetrix_calvin_utilities::Point > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1Region(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Region *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::Region *)new affymetrix_calvin_utilities::Region();
    
    *(affymetrix_calvin_utilities::Region **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Region **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1Rect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect();
    
    *(affymetrix_calvin_utilities::Rect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1Rect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Region *arg1 = 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Region **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_utilities::Region const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect((affymetrix_calvin_utilities::Region const &)*arg1);
    
    *(affymetrix_calvin_utilities::Rect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_Rect_1op_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Region result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (arg1)->operator affymetrix_calvin_utilities::Region();
    
    *(affymetrix_calvin_utilities::Region **)(void *)&jresult = new affymetrix_calvin_utilities::Region((affymetrix_calvin_utilities::Region &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_Rect_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (bool)((affymetrix_calvin_utilities::Rect const *)arg1)->IsEmpty();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Rect_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Rect_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperleft);
    
    *(affymetrix_calvin_utilities::Point **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Rect_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Rect_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperright);
    
    *(affymetrix_calvin_utilities::Point **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Rect_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Rect_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerright);
    
    *(affymetrix_calvin_utilities::Point **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Rect_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Point **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Rect_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    affymetrix_calvin_utilities::Point *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerleft);
    
    *(affymetrix_calvin_utilities::Point **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1Rect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DateTime(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::DateTime *)new affymetrix_calvin_utilities::DateTime();
    
    *(affymetrix_calvin_utilities::DateTime **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DateTime_1Date_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Date();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DateTime_1Date_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Date(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DateTime_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Time();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DateTime_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Time(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DateTime_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DateTime_1GetCurrentDateTime(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::DateTime result;
    
    (void)jenv;
    (void)jcls;
    result = affymetrix_calvin_utilities::DateTime::GetCurrentDateTime();
    
    *(affymetrix_calvin_utilities::DateTime **)(void *)&jresult = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DateTime_1IsUTC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    result = (bool)(arg1)->IsUTC();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DateTime_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::DateTime **)(void *)&jarg1; 
    result = (arg1)->ToString();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DateTime_1Parse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::wstring arg1 ;
    affymetrix_calvin_utilities::DateTime result;
    std::wstring *argp1 ;
    
    (void)jenv;
    (void)jcls;
    argp1 = *(std::wstring **)(void *)&jarg1; 
    if (!argp1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg1 = *argp1; 
    result = affymetrix_calvin_utilities::DateTime::Parse(arg1);
    
    *(affymetrix_calvin_utilities::DateTime **)(void *)&jresult = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FileUtils_1Exists(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (bool)affymetrix_calvin_utilities::FileUtils::Exists((char const *)arg1);
    
    jresult = (jboolean)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FileUtils_1LockFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (bool)affymetrix_calvin_utilities::FileUtils::LockFile((char const *)arg1);
    
    jresult = (jboolean)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FileUtils_1UnlockFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (bool)affymetrix_calvin_utilities::FileUtils::UnlockFile((char const *)arg1);
    
    jresult = (jboolean)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileUtils_1ListFiles(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    SwigValueWrapper<std::list<std::string > > result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = affymetrix_calvin_utilities::FileUtils::ListFiles((char const *)arg1,(char const *)arg2);
    
    *(std::list<std::string > **)(void *)&jresult = new std::list<std::string >((std::list<std::string > &)result); 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileUtils(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::FileUtils *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::FileUtils *)new affymetrix_calvin_utilities::FileUtils();
    
    *(affymetrix_calvin_utilities::FileUtils **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileUtils(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::FileUtils *arg1 = (affymetrix_calvin_utilities::FileUtils *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::FileUtils **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimLeft_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    std::string *arg1 = 0 ;
    char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::string **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    arg2 = (char)jarg2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimLeft_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    std::string *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::string **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimRight_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    std::string *arg1 = 0 ;
    char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::string **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    arg2 = (char)jarg2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimRight_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    std::string *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::string **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimLeft_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::wstring *arg1 = 0 ;
    wchar_t arg2 ;
    wchar_t *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    argp2 = *(wchar_t **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar_t");
        return ;
    }
    arg2 = *argp2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimLeft_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    std::wstring *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimRight_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::wstring *arg1 = 0 ;
    wchar_t arg2 ;
    wchar_t *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    argp2 = *(wchar_t **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar_t");
        return ;
    }
    arg2 = *argp2; 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_StringUtils_1STLTrimRight_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    std::wstring *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_StringUtils_1ConvertWCSToMBS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    std::wstring *arg1 = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = affymetrix_calvin_utilities::StringUtils::ConvertWCSToMBS((std::wstring const &)*arg1);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_StringUtils_1ConvertMBSToWCS(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    result = affymetrix_calvin_utilities::StringUtils::ConvertMBSToWCS((std::string const &)*arg1);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1StringUtils(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::StringUtils *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::StringUtils *)new affymetrix_calvin_utilities::StringUtils();
    
    *(affymetrix_calvin_utilities::StringUtils **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1StringUtils(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::StringUtils *arg1 = (affymetrix_calvin_utilities::StringUtils *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::StringUtils **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Subgrid_1row(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->row = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1Subgrid_1row(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->row);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Subgrid_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->col = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1Subgrid_1col(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->col);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Subgrid_1pixelgrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::FRect *arg2 = (affymetrix_calvin_utilities::FRect *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::FRect **)(void *)&jarg2; 
    if (arg1) (arg1)->pixelgrid = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Subgrid_1pixelgrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::FRect *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::FRect *)& ((arg1)->pixelgrid);
    
    *(affymetrix_calvin_utilities::FRect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1Subgrid_1cellgrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::Rect *arg2 = (affymetrix_calvin_utilities::Rect *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_utilities::Rect **)(void *)&jarg2; 
    if (arg1) (arg1)->cellgrid = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1Subgrid_1cellgrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    affymetrix_calvin_utilities::Rect *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    result = (affymetrix_calvin_utilities::Rect *)& ((arg1)->cellgrid);
    
    *(affymetrix_calvin_utilities::Rect **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1Subgrid(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::Subgrid *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::Subgrid *)new affymetrix_calvin_utilities::Subgrid();
    
    *(affymetrix_calvin_utilities::Subgrid **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1Subgrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_utilities::Subgrid **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CalvinException_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException();
    
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CalvinException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jint jarg5, jobject jarg6) {
    jlong jresult = 0 ;
    std::wstring arg1 ;
    std::wstring arg2 ;
    std::wstring arg3 ;
    std::string arg4 ;
    u_int16_t arg5 ;
    u_int64_t arg6 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    std::wstring *argp2 ;
    std::wstring *argp3 ;
    
    (void)jenv;
    (void)jcls;
    argp1 = *(std::wstring **)(void *)&jarg1; 
    if (!argp1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg1 = *argp1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg2 = *argp2; 
    argp3 = *(std::wstring **)(void *)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg3 = *argp3; 
    if(!jarg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    } 
    const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
    if (!arg4_pstr) return 0;
    arg4 =  std::string(arg4_pstr);
    jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
    arg5 = (u_int16_t)jarg5; 
    {
        jclass clazz;
        jmethodID mid;
        jbyteArray ba;
        jbyte* bae;
        jsize sz;
        int i;
        
        if (!jarg6) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
            return 0;
        }
        clazz = jenv->GetObjectClass(jarg6);
        mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
        ba = (jbyteArray)jenv->CallObjectMethod(jarg6, mid);
        bae = jenv->GetByteArrayElements(ba, 0);
        sz = jenv->GetArrayLength(ba);
        arg6 = 0;
        if (bae[0] == 0) {
            for(i=sz-1; i>0; i-- ) {
                arg6 = (arg6 << 8) | (unsigned char)bae[sz-i];
            }
        } 
        else {
            for(i=sz; i>=0; i-- ) {
                arg6 = (arg6 << 8) | (unsigned char)bae[sz-1-i];
            }
        }
        jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3,arg4,arg5,arg6);
    
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CalvinException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
    jlong jresult = 0 ;
    std::wstring arg1 ;
    std::wstring arg2 ;
    u_int64_t arg3 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    argp1 = *(std::wstring **)(void *)&jarg1; 
    if (!argp1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg1 = *argp1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg2 = *argp2; 
    {
        jclass clazz;
        jmethodID mid;
        jbyteArray ba;
        jbyte* bae;
        jsize sz;
        int i;
        
        if (!jarg3) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
            return 0;
        }
        clazz = jenv->GetObjectClass(jarg3);
        mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
        ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
        bae = jenv->GetByteArrayElements(ba, 0);
        sz = jenv->GetArrayLength(ba);
        arg3 = 0;
        if (bae[0] == 0) {
            for(i=sz-1; i>0; i-- ) {
                arg3 = (arg3 << 8) | (unsigned char)bae[sz-i];
            }
        } 
        else {
            for(i=sz; i>=0; i-- ) {
                arg3 = (arg3 << 8) | (unsigned char)bae[sz-1-i];
            }
        }
        jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3);
    
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CalvinException_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
    jlong jresult = 0 ;
    std::wstring arg1 ;
    u_int64_t arg2 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    std::wstring *argp1 ;
    
    (void)jenv;
    (void)jcls;
    argp1 = *(std::wstring **)(void *)&jarg1; 
    if (!argp1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return 0;
    }
    arg1 = *argp1; 
    {
        jclass clazz;
        jmethodID mid;
        jbyteArray ba;
        jbyte* bae;
        jsize sz;
        int i;
        
        if (!jarg2) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
            return 0;
        }
        clazz = jenv->GetObjectClass(jarg2);
        mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
        ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
        bae = jenv->GetByteArrayElements(ba, 0);
        sz = jenv->GetArrayLength(ba);
        arg2 = 0;
        if (bae[0] == 0) {
            for(i=sz-1; i>0; i-- ) {
                arg2 = (arg2 << 8) | (unsigned char)bae[sz-i];
            }
        } 
        else {
            for(i=sz; i>=0; i-- ) {
                arg2 = (arg2 << 8) | (unsigned char)bae[sz-1-i];
            }
        }
        jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2);
    
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CalvinException_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jobject jarg1) {
    jlong jresult = 0 ;
    u_int64_t arg1 ;
    affymetrix_calvin_exceptions::CalvinException *result;
    
    (void)jenv;
    (void)jcls;
    {
        jclass clazz;
        jmethodID mid;
        jbyteArray ba;
        jbyte* bae;
        jsize sz;
        int i;
        
        if (!jarg1) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
            return 0;
        }
        clazz = jenv->GetObjectClass(jarg1);
        mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
        ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
        bae = jenv->GetByteArrayElements(ba, 0);
        sz = jenv->GetArrayLength(ba);
        arg1 = 0;
        if (bae[0] == 0) {
            for(i=sz-1; i>0; i-- ) {
                arg1 = (arg1 << 8) | (unsigned char)bae[sz-i];
            }
        } 
        else {
            for(i=sz; i>=0; i-- ) {
                arg1 = (arg1 << 8) | (unsigned char)bae[sz-1-i];
            }
        }
        jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
    result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1);
    
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CalvinException_1Source_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (arg1)->Source();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1Source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Source(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CalvinException_1Description_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (arg1)->Description();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1Description_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->Description(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CalvinException_1TimeStamp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (arg1)->TimeStamp();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1TimeStamp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->TimeStamp(arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CalvinException_1SourceFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (arg1)->SourceFile();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1SourceFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::string arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    } 
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    arg2 =  std::string(arg2_pstr);
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SourceFile(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CalvinException_1LineNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (u_int16_t)(arg1)->LineNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1LineNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->LineNumber(arg2);
    
}


JNIEXPORT jobject JNICALL Java_affx_1fusionJNI_CalvinException_1ErrorCode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jobject jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int64_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (u_int64_t)(arg1)->ErrorCode();
    
    {
        jbyteArray ba = jenv->NewByteArray(9);
        jbyte* bae = jenv->GetByteArrayElements(ba, 0);
        jclass clazz = jenv->FindClass("java/math/BigInteger");
        jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
        jobject bigint;
        int i;
        
        bae[0] = 0;
        for(i=1; i<9; i++ ) {
            bae[i] = (jbyte)(result>>8*(8-i));
        }
        
        jenv->ReleaseByteArrayElements(ba, bae, 0);
        bigint = jenv->NewObject(clazz, mid, ba);
        jresult = bigint;
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CalvinException_1ErrorCode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    u_int64_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    {
        jclass clazz;
        jmethodID mid;
        jbyteArray ba;
        jbyte* bae;
        jsize sz;
        int i;
        
        if (!jarg2) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
            return ;
        }
        clazz = jenv->GetObjectClass(jarg2);
        mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
        ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
        bae = jenv->GetByteArrayElements(ba, 0);
        sz = jenv->GetArrayLength(ba);
        arg2 = 0;
        if (bae[0] == 0) {
            for(i=sz-1; i>0; i-- ) {
                arg2 = (arg2 << 8) | (unsigned char)bae[sz-i];
            }
        } 
        else {
            for(i=sz; i>=0; i-- ) {
                arg2 = (arg2 << 8) | (unsigned char)bae[sz-1-i];
            }
        }
        jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
    (arg1)->ErrorCode(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CalvinException_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    result = (arg1)->ToString();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CalvinException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CalvinException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1NotImplementedException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::NotImplementedException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::NotImplementedException *)new affymetrix_calvin_exceptions::NotImplementedException();
    
    *(affymetrix_calvin_exceptions::NotImplementedException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1NotImplementedException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::NotImplementedException *arg1 = (affymetrix_calvin_exceptions::NotImplementedException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::NotImplementedException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FormatException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::FormatException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::FormatException *)new affymetrix_calvin_exceptions::FormatException();
    
    *(affymetrix_calvin_exceptions::FormatException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FormatException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::FormatException *arg1 = (affymetrix_calvin_exceptions::FormatException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::FormatException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterMismatchException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::ParameterMismatchException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::ParameterMismatchException *)new affymetrix_calvin_exceptions::ParameterMismatchException();
    
    *(affymetrix_calvin_exceptions::ParameterMismatchException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterMismatchException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::ParameterMismatchException *arg1 = (affymetrix_calvin_exceptions::ParameterMismatchException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::ParameterMismatchException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UnexpectedParameterException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_exceptions::UnexpectedParameterException *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_exceptions::UnexpectedParameterException *)new affymetrix_calvin_exceptions::UnexpectedParameterException((std::wstring const &)*arg1);
    
    *(affymetrix_calvin_exceptions::UnexpectedParameterException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UnexpectedParameterException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::UnexpectedParameterException *arg1 = (affymetrix_calvin_exceptions::UnexpectedParameterException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::UnexpectedParameterException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1OutOfRangeParameterException(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_exceptions::OutOfRangeParameterException *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_exceptions::OutOfRangeParameterException *)new affymetrix_calvin_exceptions::OutOfRangeParameterException((std::wstring const &)*arg1,(std::wstring const &)*arg2);
    
    *(affymetrix_calvin_exceptions::OutOfRangeParameterException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1OutOfRangeParameterException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::OutOfRangeParameterException *arg1 = (affymetrix_calvin_exceptions::OutOfRangeParameterException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::OutOfRangeParameterException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterNameValuePair_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Name = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterNameValuePair_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    result =  ((arg1)->Name);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterNameValuePair_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterNameValuePair_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    result =  ((arg1)->Value);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValuePair_1ParameterNameValuePair_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair result;
    affymetrix_calvin_parameter::_tagParameterNameValuePair *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_parameter::_tagParameterNameValuePair **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValuePair");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_parameter::_tagParameterNameValuePair **)(void *)&jresult = new affymetrix_calvin_parameter::_tagParameterNameValuePair((affymetrix_calvin_parameter::_tagParameterNameValuePair &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValuePair_1ParameterNameValuePair_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
    bool result;
    affymetrix_calvin_parameter::_tagParameterNameValuePair *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_parameter::_tagParameterNameValuePair **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValuePair");
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValuePair_1ParameterNameValueControlVocabulary_1equals_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterNameValuePair(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePair *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::ParameterNameValuePair *)new affymetrix_calvin_parameter::ParameterNameValuePair();
    
    *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterNameValuePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValuePair **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterNameValueControlVocabulary_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Name = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterNameValueControlVocabulary_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    result =  ((arg1)->Name);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterNameValueControlVocabulary_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterNameValueControlVocabulary_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    result =  ((arg1)->Value);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterNameValueControlVocabulary_1ControlledVocabulary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::vector<std::wstring > *arg2 = (std::vector<std::wstring > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    arg2 = *(std::vector<std::wstring > **)(void *)&jarg2; 
    if (arg1) (arg1)->ControlledVocabulary = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterNameValueControlVocabulary_1ControlledVocabulary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::vector<std::wstring > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    result = (std::vector<std::wstring > *)& ((arg1)->ControlledVocabulary);
    
    *(std::vector<std::wstring > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueControlVocabulary_1ParameterNameValueControlVocabulary_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary result;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary **)(void *)&jresult = new affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary((affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueControlVocabulary_1ParameterNameValueControlVocabulary_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
    bool result;
    affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary");
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueControlVocabulary_1ParameterNameValueControlVocabulary_1equals_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterNameValueControlVocabulary(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)new affymetrix_calvin_parameter::ParameterNameValueControlVocabulary();
    
    *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterNameValueControlVocabulary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueControlVocabulary **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PARAMETER_1VALUE_1SIGNED_1INTEGRAL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 0;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PARAMETER_1VALUE_1UNSIGNED_1INTEGRAL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PARAMETER_1VALUE_1FLOATING_1POINT(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 2;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PARAMETER_1VALUE_1STRING8_1TYPE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 3;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PARAMETER_1VALUE_1STRING16_1TYPE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 3;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1i8(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (int8_t)jarg2; 
    if (arg1) (arg1)->i8 = arg2;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1i8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (int8_t) ((arg1)->i8);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1i16(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->i16 = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1i16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (int16_t) ((arg1)->i16);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1i32(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->i32 = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1i32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->i32);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1iu8(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    if (arg1) (arg1)->iu8 = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1iu8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (u_int8_t) ((arg1)->iu8);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1iu16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    if (arg1) (arg1)->iu16 = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1iu16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (u_int16_t) ((arg1)->iu16);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1iu32(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    if (arg1) (arg1)->iu32 = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1iu32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (u_int32_t) ((arg1)->iu32);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterDataValue_1f32(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->f32 = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1ParameterDataValue_1f32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    result = (float) ((arg1)->f32);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterDataValue(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::ParameterDataValue *)new affymetrix_calvin_parameter::ParameterDataValue();
    
    *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterValue_1paramValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterValueType arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    arg2 = (affymetrix_calvin_parameter::ParameterValueType)jarg2; 
    if (arg1) (arg1)->paramValueType = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1ParameterValue_1paramValueType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterValueType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    result = (affymetrix_calvin_parameter::ParameterValueType) ((arg1)->paramValueType);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterValue_1valueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->valueSize = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ParameterValue_1valueSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->valueSize);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ParameterValue_1paramValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *arg2 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jarg2; 
    if (arg1) (arg1)->paramValue = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ParameterValue_1paramValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    affymetrix_calvin_parameter::ParameterDataValue *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    result = (affymetrix_calvin_parameter::ParameterDataValue *)& ((arg1)->paramValue);
    
    *(affymetrix_calvin_parameter::ParameterDataValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterValue(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterValue *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::ParameterValue *)new affymetrix_calvin_parameter::ParameterValue();
    
    *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterValue **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AFFY_1EXPR_1PS(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-expression-probesets";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AFFY_1GENO_1PS(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-genotyping-probesets";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AFFY_1TAG_1PS(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-tag-probesets";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AFFY_1RESEQ_1PS(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-resequencing-probesets";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AFFY_1CNTRL_1PS(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-control-probesets";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1MIMEValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue();
    
    *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1MIMEValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(void **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((void const *)arg1,arg2);
    
    *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1MIMEValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg1);
    
    *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1MIMEValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_MIMEValue_1MIMEValue_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return 0;
    } 
    {
        affymetrix_calvin_parameter::MIMEValue &_result_ref = (arg1)->operator =((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
        result = (affymetrix_calvin_parameter::MIMEValue *) &_result_ref;
    }
    
    *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_MIMEValue_1MIMEValue_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->operator ==((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_MIMEValue_1MIMEValue_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->operator !=((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MIMEValue_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    void *arg2 = (void *) 0 ;
    u_int32_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    arg2 = *(void **)(void *)&jarg2; 
    arg3 = (u_int32_t)jarg3; 
    (arg1)->SetValue((void const *)arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_MIMEValue_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    u_int32_t *arg2 = 0 ;
    void *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    arg2 = *(u_int32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int32_t & reference is null");
        return 0;
    } 
    result = (void *)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->GetValue(*arg2);
    
    *(void **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_MIMEValue_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->Size();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterNameValueType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType();
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterNameValueType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    void *arg2 = (void *) 0 ;
    int32_t arg3 ;
    std::wstring *arg4 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg2 = *(void **)(void *)&jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(std::wstring **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(void const *)arg2,arg3,(std::wstring const &)*arg4);
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ParameterNameValueType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg2 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return 0;
    } 
    arg3 = *(std::wstring **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(affymetrix_calvin_parameter::MIMEValue const &)*arg2,(std::wstring const &)*arg3);
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return 0;
    } 
    result = (arg1)->operator =((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1not_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1equals_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((std::wstring const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1not_1equals_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((std::wstring const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator <((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ParameterNameValueType_1greater_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator >((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetParameterType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType::ParameterType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (affymetrix_calvin_parameter::ParameterNameValueType::ParameterType)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetParameterType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueInt8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt8();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetValueInt8(arg2);
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt8();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetValueUInt8(arg2);
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueInt16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt16();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (int16_t)jarg2; 
    (arg1)->SetValueInt16(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueUInt16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt16();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueUInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetValueUInt16(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueInt32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt32();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetValueInt32(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueUInt32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt32();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueUInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetValueUInt32(arg2);
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueFloat();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetValueFloat(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueText();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueText(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetValueText((std::wstring const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetValueAscii(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueAscii();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetValueAscii(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetValueAscii((std::string const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetMIMEType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetMIMEType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetMIMEType((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1GetMIMEValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::MIMEValue result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEValue();
    
    *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jresult = new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1SetMIMEValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::MIMEValue **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::MIMEValue const & reference is null");
        return ;
    } 
    (arg1)->SetMIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ParameterNameValueType_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    result = (arg1)->ToString();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ParameterNameValueType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ArrayAttributes(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_array::ArrayAttributes *)new affymetrix_calvin_array::ArrayAttributes();
    
    *(affymetrix_calvin_array::ArrayAttributes **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ArrayAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAttributes **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAttributes_1Identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAttributes **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->Identifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAttributes_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePairVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAttributes **)(void *)&jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValuePairVector &_result_ref = (arg1)->Attributes();
        result = (affymetrix_calvin_parameter::ParameterNameValuePairVector *) &_result_ref;
    }
    
    *(affymetrix_calvin_parameter::ParameterNameValuePairVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ArrayAttributes_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAttributes **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ArrayAuditEntry(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_array::ArrayAuditEntry *)new affymetrix_calvin_array::ArrayAuditEntry();
    
    *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ArrayAuditEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1UserName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    std::wstring *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        std::wstring &_result_ref = (arg1)->UserName();
        result = (std::wstring *) &_result_ref;
    }
    
    *(std::wstring **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::DateTime *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::DateTime &_result_ref = (arg1)->DateTime();
        result = (affymetrix_calvin_utilities::DateTime *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::DateTime **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1ActionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ActionType();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1ArrayGuid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArrayGuid();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1InputFileGuids(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->InputFileGuids();
        result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1OutputFileGuids(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->OutputFileGuids();
        result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1ActionParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValuePairList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValuePairList &_result_ref = (arg1)->ActionParameters();
        result = (affymetrix_calvin_parameter::ParameterNameValuePairList *) &_result_ref;
    }
    
    *(affymetrix_calvin_parameter::ParameterNameValuePairList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ArrayAuditEntry_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayAuditEntry **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ARRAY_1FILE_1CREATEION_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::ARRAY_FILE_CREATEION_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ARRAY_1FILE_1ATTRIBUTE_1UPDATE_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1FLUIDICS_1INSTRUMENT_1CONTROL_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::FLUIDICS_INSTRUMENT_CONTROL_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1SCAN_1INSTRUMENT_1CONTROL_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::SCAN_INSTRUMENT_CONTROL_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1ARRAY_1FILE_1TYPE_1IDENTIFIER(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-calvin-array";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ArrayData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_array::ArrayData *)new affymetrix_calvin_array::ArrayData();
    
    *(affymetrix_calvin_array::ArrayData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ArrayData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayData_1ArraySetIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArraySetIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayData_1PhysicalArraysAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_array::ArrayAttributesVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg1; 
    {
        affymetrix_calvin_array::ArrayAttributesVector &_result_ref = (arg1)->PhysicalArraysAttributes();
        result = (affymetrix_calvin_array::ArrayAttributesVector *) &_result_ref;
    }
    
    *(affymetrix_calvin_array::ArrayAttributesVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_ArrayData_1UserAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector &_result_ref = (arg1)->UserAttributes();
        result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *) &_result_ref;
    }
    
    *(affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ArrayData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1MAX_1CDF_1PROBE_1SET_1NAME_1LENGTH(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 32;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData();
    
    *(affymetrix_calvin_io::CDFData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::CDFData *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData((std::string const &)*arg1);
    
    *(affymetrix_calvin_io::CDFData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CDFData_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFData_1GetProbeSetCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetProbeSetCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1SetProbeSetCnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    CDFDataTypeIds arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (CDFDataTypeIds)jarg3; 
    (arg1)->SetProbeSetCnt(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFData_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetProbeSetName(arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1SetArrayRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetArrayRows(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFData_1GetArrayRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (u_int32_t)(arg1)->GetArrayRows();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1SetArrayCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetArrayCols(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFData_1GetArrayCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (u_int32_t)(arg1)->GetArrayCols();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1SetRefSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetRefSequence((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CDFData_1GetRefSequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (arg1)->GetRefSequence();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CDFData_1GetDataTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (arg1)->GetDataTypeId();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFData_1GetFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    FileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    *(FileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFData_1GetGenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    GenericData *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    {
        GenericData &_result_ref = (arg1)->GetGenericData();
        result = (GenericData *) &_result_ref;
    }
    
    *(GenericData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1GetProbeSetInformation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    CDFProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(CDFProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CDFProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1GetProbeSetInformation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::wstring *arg2 = 0 ;
    CDFProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    arg3 = *(CDFProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CDFProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetInformation((std::wstring const &)*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1GetQCProbeSetInformation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    int32_t arg2 ;
    CDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(CDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFData_1GetQCProbeSetInformation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
    std::wstring *arg2 = 0 ;
    CDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    arg3 = *(CDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation((std::wstring const &)*arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFProbeGroupInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFProbeGroupInformation *)new affymetrix_calvin_io::CDFProbeGroupInformation();
    
    *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFProbeGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    result = (DirectionType)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFProbeGroupInformation_1GetCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::CDFProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CDFProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFProbeInformation *)new affymetrix_calvin_io::CDFProbeInformation();
    
    *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetListIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetExpos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetPBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_CDFProbeInformation_1GetTBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFProbeSetInformation *)new affymetrix_calvin_io::CDFProbeSetInformation();
    
    *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    affymetrix_calvin_io::DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (affymetrix_calvin_io::DirectionType)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetProbeSetNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::CDFProbeGroupInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = *(affymetrix_calvin_io::CDFProbeGroupInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CDFProbeGroupInformation & reference is null");
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFProbeSetInformation_1GetProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
    CDFDataTypeIds result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFProbeSetInformation **)(void *)&jarg1; 
    result = (CDFDataTypeIds)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFQCProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFQCProbeInformation *)new affymetrix_calvin_io::CDFQCProbeInformation();
    
    *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFQCProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFQCProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CDFQCProbeInformation_1GetPLen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CDFQCProbeInformation_1IsPerfectMatchProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CDFQCProbeInformation_1IsBackgroundProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFQCProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFQCProbeSetInformation *)new affymetrix_calvin_io::CDFQCProbeSetInformation();
    
    *(affymetrix_calvin_io::CDFQCProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CDFQCProbeSetInformation_1GetQCProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeSetInformation **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CDFQCProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeSetInformation **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFQCProbeSetInformation_1GetProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_calvin_io::CDFQCProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFQCProbeSetInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_calvin_io::CDFQCProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CDFQCProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPBackgroundZone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone();
    
    *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPBackgroundZone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
    jlong jresult = 0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    affymetrix_calvin_io::CHPBackgroundZone *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (float)jarg1; 
    arg2 = (float)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone(arg1,arg2,arg3,arg4);
    
    *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPBackgroundZone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1CHPBackgroundZone_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    affymetrix_calvin_io::CHPBackgroundZone arg2 ;
    affymetrix_calvin_io::CHPBackgroundZone result;
    affymetrix_calvin_io::CHPBackgroundZone *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_io::CHPBackgroundZone");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jresult = new affymetrix_calvin_io::CHPBackgroundZone((affymetrix_calvin_io::CHPBackgroundZone &)result); 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1GetCenterX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterX();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1GetCenterY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterY();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1GetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetBackground();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1GetSmoothFactor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetSmoothFactor();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1SetCenterX(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetCenterX(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1SetCenterY(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetCenterY(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1SetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPBackgroundZone_1SetSmoothFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSmoothFactor(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData();
    
    *(affymetrix_calvin_io::CHPData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_io::CHPData *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData((std::string const &)*arg1,(std::string const &)*arg2);
    
    *(affymetrix_calvin_io::CHPData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CHPData_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CHPData const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CHPData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (u_int8_t)(arg1)->GetVersion();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CHPData_1GetMagic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (u_int8_t)(arg1)->GetMagic();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPData_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRows(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPData_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetCols(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetProgId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetProgId();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetProgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetProgId((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetArrayType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CHPData_1GetAssayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetAssayType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetArrayType((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetAlgName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetAlgName((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetParentCell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetParentCell();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetParentCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetParentCell((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetAlgVersion();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetAlgVersion((std::wstring const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1AddAlgParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    arg3 = *(std::wstring **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->AddAlgParam((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetAlgParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (arg1)->GetAlgParam((std::wstring const &)*arg2);
    
    *(ParameterNameValueType **)(void *)&jresult = new ParameterNameValueType((ParameterNameValueType &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1AddChipSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    arg3 = *(std::wstring **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->AddChipSum((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetChipSums(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    SwigValueWrapper<std::vector<affymetrix_calvin_parameter::ParameterNameValueType > > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (arg1)->GetChipSums();
    
    *(ParameterNameValueTypeVector **)(void *)&jresult = new ParameterNameValueTypeVector((ParameterNameValueTypeVector &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetChipSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (arg1)->GetChipSum((std::wstring const &)*arg2);
    
    *(ParameterNameValueType **)(void *)&jresult = new ParameterNameValueType((ParameterNameValueType &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    FileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    *(FileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPData_1GetGenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    GenericData *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    {
        GenericData &_result_ref = (arg1)->GetGenericData();
        result = (GenericData *) &_result_ref;
    }
    
    *(GenericData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetEntryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetEntryCount(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPData_1GetEntryCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetEntryCount();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1GetExpressionEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPExpressionEntry *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(CHPExpressionEntry **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CHPExpressionEntry & reference is null");
        return ;
    } 
    (arg1)->GetExpressionEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1GetGenotypeEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPGenotypeEntry *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(CHPGenotypeEntry **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CHPGenotypeEntry & reference is null");
        return ;
    } 
    (arg1)->GetGenotypeEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1GetUniversalEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    CHPUniversalEntry *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(CHPUniversalEntry **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CHPUniversalEntry & reference is null");
        return ;
    } 
    (arg1)->GetUniversalEntry(arg2,*arg3);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPData_1GetBackgroundZoneCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetBackgroundZoneCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1SetBackgroundZoneCnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetBackgroundZoneCnt(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1GetBackgroundZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::CHPBackgroundZone *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(affymetrix_calvin_io::CHPBackgroundZone **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CHPBackgroundZone & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZone(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPData_1GetBackgroundZones(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    affymetrix_calvin_io::CHPBackgroundZoneVector *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(affymetrix_calvin_io::CHPBackgroundZoneVector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CHPBackgroundZoneVector & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZones(arg2,arg3,*arg4);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPExpressionEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry();
    
    *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPExpressionEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2, jfloat jarg3, jfloat jarg4, jint jarg5, jint jarg6, jshort jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jint jarg12) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    u_int8_t arg2 ;
    float arg3 ;
    float arg4 ;
    u_int16_t arg5 ;
    u_int16_t arg6 ;
    u_int8_t arg7 ;
    float arg8 ;
    float arg9 ;
    float arg10 ;
    float arg11 ;
    u_int16_t arg12 ;
    affymetrix_calvin_io::CHPExpressionEntry *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg2 = (u_int8_t)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    arg5 = (u_int16_t)jarg5; 
    arg6 = (u_int16_t)jarg6; 
    arg7 = (u_int8_t)jarg7; 
    arg8 = (float)jarg8; 
    arg9 = (float)jarg9; 
    arg10 = (float)jarg10; 
    arg11 = (float)jarg11; 
    arg12 = (u_int16_t)jarg12; 
    result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    
    *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPExpressionEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1CHPExpressionEntry_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    affymetrix_calvin_io::CHPExpressionEntry arg2 ;
    affymetrix_calvin_io::CHPExpressionEntry result;
    affymetrix_calvin_io::CHPExpressionEntry *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_io::CHPExpressionEntry");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jresult = new affymetrix_calvin_io::CHPExpressionEntry((affymetrix_calvin_io::CHPExpressionEntry &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetProbeSetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetDetection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetection();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetDetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetectionPValue();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetSignal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSignal();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetNumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairs();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetNumPairsUsed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairsUsed();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetChange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChange();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChangePValue();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetSigLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatio();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetSigLogRatioLo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioLo();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetSigLogRatioHi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioHi();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1GetCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetCommonPairs();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetProbeSetName((std::wstring const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetDetection(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetDetection(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetDetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetDetectionPValue(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignal(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetNumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairs(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetNumPairsUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairsUsed(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetChange(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetChangePValue(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetSigLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatio(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetSigLogRatioLo(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatioLo(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetSigLogRatioHi(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSigLogRatioHi(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPExpressionEntry_1SetCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPExpressionEntry **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetCommonPairs(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPGenotypeEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry();
    
    *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPGenotypeEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    u_int8_t arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    float arg7 ;
    float arg8 ;
    float arg9 ;
    affymetrix_calvin_io::CHPGenotypeEntry *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg2 = (u_int8_t)jarg2; 
    arg3 = (float)jarg3; 
    arg4 = (float)jarg4; 
    arg5 = (float)jarg5; 
    arg6 = (float)jarg6; 
    arg7 = (float)jarg7; 
    arg8 = (float)jarg8; 
    arg9 = (float)jarg9; 
    result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    
    *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPGenotypeEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1CHPGenotypeEntry_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry arg2 ;
    affymetrix_calvin_io::CHPGenotypeEntry result;
    affymetrix_calvin_io::CHPGenotypeEntry *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_io::CHPGenotypeEntry");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jresult = new affymetrix_calvin_io::CHPGenotypeEntry((affymetrix_calvin_io::CHPGenotypeEntry &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetProbeSetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetCall();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetConfidence();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetRAS1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS1();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetRAS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS2();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetAACall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetAACall();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetABCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetABCall();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetBBCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetBBCall();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1GetNoCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetNoCall();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetProbeSetName((std::wstring const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetConfidence(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetRAS1(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS1(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetRAS2(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS2(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetAACall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetAACall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetABCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetABCall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetBBCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBBCall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPGenotypeEntry_1SetNoCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPGenotypeEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetNoCall(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPUniversalEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry();
    
    *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPUniversalEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
    jlong jresult = 0 ;
    float arg1 ;
    affymetrix_calvin_io::CHPUniversalEntry *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (float)jarg1; 
    result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry(arg1);
    
    *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPUniversalEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPUniversalEntry_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CHPUniversalEntry_1CHPUniversalEntry_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    affymetrix_calvin_io::CHPUniversalEntry arg2 ;
    affymetrix_calvin_io::CHPUniversalEntry result;
    affymetrix_calvin_io::CHPUniversalEntry *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg1; 
    argp2 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_calvin_io::CHPUniversalEntry");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jresult = new affymetrix_calvin_io::CHPUniversalEntry((affymetrix_calvin_io::CHPUniversalEntry &)result); 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CHPUniversalEntry_1GetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg1; 
    result = (float)((affymetrix_calvin_io::CHPUniversalEntry const *)arg1)->GetBackground();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPUniversalEntry_1SetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPUniversalEntry **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1XYCoord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::XYCoord *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord();
    
    *(affymetrix_calvin_io::XYCoord **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1XYCoord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2) {
    jlong jresult = 0 ;
    int16_t arg1 ;
    int16_t arg2 ;
    affymetrix_calvin_io::XYCoord *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int16_t)jarg1; 
    arg2 = (int16_t)jarg2; 
    result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord(arg1,arg2);
    
    *(affymetrix_calvin_io::XYCoord **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1XYCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1XYCoord_1xCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->xCoord = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1XYCoord_1xCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    result = (int16_t) ((arg1)->xCoord);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1XYCoord_1yCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = (int16_t)jarg2; 
    if (arg1) (arg1)->yCoord = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1XYCoord_1yCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    result = (int16_t) ((arg1)->yCoord);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_XYCoord_1XYCoord_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    affymetrix_calvin_io::XYCoord result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoord const & reference is null");
        return 0;
    } 
    result = (arg1)->operator =((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    *(affymetrix_calvin_io::XYCoord **)(void *)&jresult = new affymetrix_calvin_io::XYCoord((affymetrix_calvin_io::XYCoord &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_XYCoord_1XYCoord_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoord const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator ==((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_XYCoord_1XYCoord_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoord const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator !=((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_XYCoord_1XYCoord_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
    affymetrix_calvin_io::XYCoord *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoord **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoord const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator <((affymetrix_calvin_io::XYCoord const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CelFileData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CelFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData();
    
    *(affymetrix_calvin_io::CelFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CelFileData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::CelFileData *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData((std::string const &)*arg1);
    
    *(affymetrix_calvin_io::CelFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CelFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CelFileData_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CelFileData const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetIntensityCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetIntensityCount(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetStdDevCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetStdDevCount(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetPixelCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPixelCount(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetOutlierCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetOutlierCount(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetMaskCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetMaskCount(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CelFileData_1GetFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    FileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (FileHeader *)(arg1)->GetFileHeader();
    
    *(FileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CelFileData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (u_int8_t)(arg1)->GetVersion();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetArrayType((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CelFileData_1GetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (arg1)->GetArrayType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetAlgorithmName((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CelFileData_1GetAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (arg1)->GetAlgorithmName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRows(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CelFileData_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1SetCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetCols(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CelFileData_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CelFileData_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    ParameterNameValueTypeVector *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(ParameterNameValueTypeVector **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ParameterNameValueTypeVector & reference is null");
        return ;
    } 
    (arg1)->GetAlgorithmParameters(*arg2);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1FindAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    std::wstring *arg2 = 0 ;
    ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg3 = *(ParameterNameValueType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ParameterNameValueType & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->FindAlgorithmParameter((std::wstring const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1AddAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    ParameterNameValueType *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ParameterNameValueType & reference is null");
        return ;
    } 
    (arg1)->AddAlgorithmParameter(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    float *arg3 = 0 ;
    float *arg4 = 0 ;
    int16_t *arg5 = 0 ;
    bool *arg6 = 0 ;
    bool *arg7 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = *(float **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    arg4 = *(float **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    arg5 = *(int16_t **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int16_t & reference is null");
        return ;
    } 
    arg6 = *(bool **)(void *)&jarg6;
    if(!arg6) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
        return ;
    } 
    arg7 = *(bool **)(void *)&jarg7;
    if(!arg7) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1HasStdev(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->HasStdev();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1HasNumPixels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->HasNumPixels();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1GetIntensities(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    FloatVector *arg4 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(FloatVector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FloatVector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetIntensities(arg2,arg3,*arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1GetStdev(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    FloatVector *arg4 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(FloatVector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FloatVector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetStdev(arg2,arg3,*arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1GetNumPixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    Int16Vector *arg4 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(Int16Vector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Int16Vector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetNumPixels(arg2,arg3,*arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1GetOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    BoolVector *arg4 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(BoolVector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BoolVector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetOutliers(arg2,arg3,*arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CelFileData_1GetMasked(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    BoolVector *arg4 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(BoolVector **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BoolVector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetMasked(arg2,arg3,*arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1GetOutlierCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoordVector **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoordVector & reference is null");
        return ;
    } 
    (arg1)->GetOutlierCoords(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileData_1GetMaskedCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
    affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::XYCoordVector **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::XYCoordVector & reference is null");
        return ;
    } 
    (arg1)->GetMaskedCoords(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ColumnType(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetColumnTypes arg1 ;
    int32_t arg2 ;
    affymetrix_calvin_io::ColumnType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (affymetrix_calvin_io::DataSetColumnTypes)jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (affymetrix_calvin_io::ColumnType *)new affymetrix_calvin_io::ColumnType(arg1,arg2);
    
    *(affymetrix_calvin_io::ColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ColumnType_1ColumnType_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::ColumnType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator ==((affymetrix_calvin_io::ColumnType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ColumnType_1ColumnType_1not_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::ColumnType const & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator !=((affymetrix_calvin_io::ColumnType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ColumnType_1GetColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    affymetrix_calvin_io::DataSetColumnTypes result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    result = (affymetrix_calvin_io::DataSetColumnTypes)((affymetrix_calvin_io::ColumnType const *)arg1)->GetColumnType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ColumnType_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_ColumnType_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetLength();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ByteColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::ByteColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::ByteColumnType *)new affymetrix_calvin_io::ByteColumnType();
    
    *(affymetrix_calvin_io::ByteColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ByteColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::ByteColumnType *arg1 = (affymetrix_calvin_io::ByteColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ByteColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UByteColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::UByteColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::UByteColumnType *)new affymetrix_calvin_io::UByteColumnType();
    
    *(affymetrix_calvin_io::UByteColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UByteColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::UByteColumnType *arg1 = (affymetrix_calvin_io::UByteColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::UByteColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ShortColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::ShortColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::ShortColumnType *)new affymetrix_calvin_io::ShortColumnType();
    
    *(affymetrix_calvin_io::ShortColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ShortColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::ShortColumnType *arg1 = (affymetrix_calvin_io::ShortColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ShortColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UShortColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::UShortColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::UShortColumnType *)new affymetrix_calvin_io::UShortColumnType();
    
    *(affymetrix_calvin_io::UShortColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UShortColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::UShortColumnType *arg1 = (affymetrix_calvin_io::UShortColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::UShortColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1IntColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::IntColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::IntColumnType *)new affymetrix_calvin_io::IntColumnType();
    
    *(affymetrix_calvin_io::IntColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1IntColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::IntColumnType *arg1 = (affymetrix_calvin_io::IntColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::IntColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UIntColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::UIntColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::UIntColumnType *)new affymetrix_calvin_io::UIntColumnType();
    
    *(affymetrix_calvin_io::UIntColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UIntColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::UIntColumnType *arg1 = (affymetrix_calvin_io::UIntColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::UIntColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FloatColumnType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FloatColumnType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::FloatColumnType *)new affymetrix_calvin_io::FloatColumnType();
    
    *(affymetrix_calvin_io::FloatColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FloatColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FloatColumnType *arg1 = (affymetrix_calvin_io::FloatColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FloatColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ASCIIColumnType(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int32_t arg1 ;
    affymetrix_calvin_io::ASCIIColumnType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int32_t)jarg1; 
    result = (affymetrix_calvin_io::ASCIIColumnType *)new affymetrix_calvin_io::ASCIIColumnType(arg1);
    
    *(affymetrix_calvin_io::ASCIIColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ASCIIColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::ASCIIColumnType *arg1 = (affymetrix_calvin_io::ASCIIColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ASCIIColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UnicodeColumnType(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int32_t arg1 ;
    affymetrix_calvin_io::UnicodeColumnType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int32_t)jarg1; 
    result = (affymetrix_calvin_io::UnicodeColumnType *)new affymetrix_calvin_io::UnicodeColumnType(arg1);
    
    *(affymetrix_calvin_io::UnicodeColumnType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UnicodeColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::UnicodeColumnType *arg1 = (affymetrix_calvin_io::UnicodeColumnType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::UnicodeColumnType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSetNotOpenException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::DataSetNotOpenException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::DataSetNotOpenException *)new affymetrix_calvin_exceptions::DataSetNotOpenException();
    
    *(affymetrix_calvin_exceptions::DataSetNotOpenException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataSetNotOpenException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::DataSetNotOpenException *arg1 = (affymetrix_calvin_exceptions::DataSetNotOpenException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::DataSetNotOpenException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ColumnIndexOutOfBoundsException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException();
    
    *(affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ColumnIndexOutOfBoundsException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1RowIndexOutOfBoundsException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::RowIndexOutOfBoundsException();
    
    *(affymetrix_calvin_exceptions::RowIndexOutOfBoundsException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1RowIndexOutOfBoundsException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::RowIndexOutOfBoundsException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UnexpectedColumnTypeException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::UnexpectedColumnTypeException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *)new affymetrix_calvin_exceptions::UnexpectedColumnTypeException();
    
    *(affymetrix_calvin_exceptions::UnexpectedColumnTypeException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UnexpectedColumnTypeException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::UnexpectedColumnTypeException *arg1 = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::UnexpectedColumnTypeException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroupNotFoundException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::DataGroupNotFoundException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::DataGroupNotFoundException *)new affymetrix_calvin_exceptions::DataGroupNotFoundException();
    
    *(affymetrix_calvin_exceptions::DataGroupNotFoundException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataGroupNotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::DataGroupNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataGroupNotFoundException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::DataGroupNotFoundException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSetNotFoundException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::DataSetNotFoundException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::DataSetNotFoundException *)new affymetrix_calvin_exceptions::DataSetNotFoundException();
    
    *(affymetrix_calvin_exceptions::DataSetNotFoundException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataSetNotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::DataSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataSetNotFoundException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::DataSetNotFoundException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ProbeSetNotFoundException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::ProbeSetNotFoundException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *)new affymetrix_calvin_exceptions::ProbeSetNotFoundException();
    
    *(affymetrix_calvin_exceptions::ProbeSetNotFoundException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ProbeSetNotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::ProbeSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::ProbeSetNotFoundException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFAccessNotSupportedByModeException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *)new affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException();
    
    *(affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFAccessNotSupportedByModeException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *arg1 = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroup(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    DataGroupHeader *arg2 = 0 ;
    void *arg3 = (void *) 0 ;
    affymetrix_calvin_io::DataGroup *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    arg2 = *(DataGroupHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataGroupHeader const & reference is null");
        return 0;
    } 
    arg3 = *(void **)(void *)&jarg3; 
    result = (affymetrix_calvin_io::DataGroup *)new affymetrix_calvin_io::DataGroup((std::string const &)*arg1,(DataGroupHeader const &)*arg2,arg3);
    
    *(affymetrix_calvin_io::DataGroup **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroup_1Header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroup **)(void *)&jarg1; 
    {
        affymetrix_calvin_io::DataGroupHeader const &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroup_1DataSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::DataSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroup **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2);
    
    *(affymetrix_calvin_io::DataSet **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroup_1DataSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroup **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataSet **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroup **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroupHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader();
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroupHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::wstring *arg1 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::wstring **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader((std::wstring const &)*arg1);
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataGroupHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetDataSetCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1AddDataSetHdr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    DataSetHeader *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = *(DataSetHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSetHeader const & reference is null");
        return ;
    } 
    (arg1)->AddDataSetHdr((DataSetHeader const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t arg2 ;
    DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        DataSetHeader &_result_ref = (arg1)->GetDataSet(arg2);
        result = (DataSetHeader *) &_result_ref;
    }
    
    *(DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetDataSetConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    int32_t arg2 ;
    DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        DataSetHeader const &_result_ref = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetConst(arg2);
        result = (DataSetHeader *) &_result_ref;
    }
    
    *(DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetDataSetIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    DataSetHdrIt *arg2 = 0 ;
    DataSetHdrIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = *(DataSetHdrIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSetHdrIt & reference is null");
        return ;
    } 
    arg3 = *(DataSetHdrIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSetHdrIt & reference is null");
        return ;
    } 
    (arg1)->GetDataSetIterators(*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1SetDataSetPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetDataSetPos(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetDataSetPos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetPos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeader_1SetNextCubePos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetNextCubePos(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1GetNextCubePos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetNextCubePos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeader_1FindDataSetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetHeader *)(arg1)->FindDataSetHeader((std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSet(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
    void *arg3 = (void *) 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    arg2 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataSetHeader const & reference is null");
        return 0;
    } 
    arg3 = *(void **)(void *)&jarg3; 
    result = (affymetrix_calvin_io::DataSet *)new affymetrix_calvin_io::DataSet((std::string const &)*arg1,(affymetrix_calvin_io::DataSetHeader const &)*arg2,arg3);
    
    *(affymetrix_calvin_io::DataSet **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    (arg1)->Delete();
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DataSet_1Open(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    result = (bool)(arg1)->Open();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSet_1Header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    {
        affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1Rows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    result = (int32_t)(arg1)->Rows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1Cols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    result = (int32_t)(arg1)->Cols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DataSet_1IsOpen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    result = (bool)(arg1)->IsOpen();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int8_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(u_int8_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int8_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int8_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(int8_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int8_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int16_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(u_int16_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int16_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int16_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(int16_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int16_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    u_int32_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(u_int32_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int32_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(int32_t **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    float *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(float **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    std::string *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(std::string **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    std::wstring *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = *(std::wstring **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint8Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Uint8Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Uint8Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int8Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Int8Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Int8Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint16Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Uint16Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Uint16Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int16Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Int16Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Int16Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Uint32Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Uint32Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Uint32Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    Int32Vector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(Int32Vector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Int32Vector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    FloatVector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(FloatVector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FloatVector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::vector<std::string > *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(std::vector<std::string > **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1GetData_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    WStringVector *arg5 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(WStringVector **)(void *)&jarg5;
    if(!arg5) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WStringVector & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,arg4,*arg5);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int8_t *arg5 = (u_int8_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(u_int8_t **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jstring jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int8_t *arg5 = (int8_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (int8_t *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int16_t *arg5 = (u_int16_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(u_int16_t **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int16_t *arg5 = (int16_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(int16_t **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    u_int32_t *arg5 = (u_int32_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(u_int32_t **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    int32_t *arg5 = (int32_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(int32_t **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    float *arg5 = (float *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(float **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::string *arg5 = (std::string *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(std::string **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1GetDataRaw_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    int32_t arg4 ;
    std::wstring *arg5 = (std::wstring *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (int32_t)jarg4; 
    arg5 = *(std::wstring **)(void *)&jarg5; 
    result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSet_1CheckRowColumnAndType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t arg2 ;
    int32_t arg3 ;
    affymetrix_calvin_io::DataSetColumnTypes arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int32_t)jarg3; 
    arg4 = (affymetrix_calvin_io::DataSetColumnTypes)jarg4; 
    (arg1)->CheckRowColumnAndType(arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSet_1BytesPerRow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSet **)(void *)&jarg1; 
    result = (int32_t)(arg1)->BytesPerRow();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSetHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::DataSetHeader *)new affymetrix_calvin_io::DataSetHeader();
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataSetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetRowSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetName((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetNameValParamCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValParamCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddNameValParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return ;
    } 
    (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetNameValIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueTypeConstIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueTypeConstIt & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_parameter::ParameterNameValueTypeConstIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueTypeConstIt & reference is null");
        return ;
    } 
    ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValIterators(*arg2,*arg3);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DataSetHeader_1FindNameValParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType & reference is null");
        return 0;
    } 
    result = (bool)((affymetrix_calvin_io::DataSetHeader const *)arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    affymetrix_calvin_io::ColumnType *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::ColumnType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::ColumnType const & reference is null");
        return ;
    } 
    (arg1)->AddColumnType((affymetrix_calvin_io::ColumnType const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddIntColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddIntColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddUIntColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddUIntColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddShortColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddShortColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddUShortColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddUShortColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddByteColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddByteColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddUByteColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddUByteColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddFloatColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    (arg1)->AddFloatColumnType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddAsciiColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->AddAsciiColumnType(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1AddUnicodeColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->AddUnicodeColumnType(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::ColumnType > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnType(arg2);
    
    *(affymetrix_calvin_io::ColumnType **)(void *)&jresult = new affymetrix_calvin_io::ColumnType((affymetrix_calvin_io::ColumnType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetRowCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1SetRowCnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetRowCnt(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetColumnCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1SetHeaderStartFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetHeaderStartFilePos(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetHeaderStartFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetHeaderStartFilePos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeader_1SetDataStartFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetDataStartFilePos(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeader_1GetDataStartFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataStartFilePos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1MAGIC_1NUM(JNIEnv *jenv, jclass jcls) {
    jshort jresult = 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    result = (u_int8_t)(u_int8_t)affymetrix_calvin_io::MAGIC_NUM;
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1VERSION(JNIEnv *jenv, jclass jcls) {
    jshort jresult = 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    result = (u_int8_t)(u_int8_t)affymetrix_calvin_io::VERSION;
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::FileHeader *)new affymetrix_calvin_io::FileHeader();
    
    *(affymetrix_calvin_io::FileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FileHeader_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileHeader_1GetMagicNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetMagicNumber();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileHeader_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetVersion();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileHeader_1GetDataGroupCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1AddDataGroupHdr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader const & reference is null");
        return ;
    } 
    (arg1)->AddDataGroupHdr((affymetrix_calvin_io::DataGroupHeader const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeader_1GetDataGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        affymetrix_calvin_io::DataGroupHeader &_result_ref = (arg1)->GetDataGroup(arg2);
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeader_1GetDataGroupConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    {
        affymetrix_calvin_io::DataGroupHeader const &_result_ref = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupConst(arg2);
        result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1GetDataGroupIts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    affymetrix_calvin_io::DataGroupHdrIt *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHdrIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::DataGroupHdrIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHdrIt & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHdrIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHdrIt & reference is null");
        return ;
    } 
    (arg1)->GetDataGroupIts(*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1SetGenericDataHdr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    GenericDataHeader *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = *(GenericDataHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GenericDataHeader const & reference is null");
        return ;
    } 
    (arg1)->SetGenericDataHdr((GenericDataHeader const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeader_1GetGenericDataHdr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    GenericDataHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (GenericDataHeader *)(arg1)->GetGenericDataHdr();
    
    *(GenericDataHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeader_1FindDataGroupHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileHeader_1GetNumDataGroups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetNumDataGroups();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1SetNumDataGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetNumDataGroups(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeader_1GetFirstDataGroupFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    result = (u_int32_t)(arg1)->GetFirstDataGroupFilePos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeader_1SetFirstDataGroupFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
    u_int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    (arg1)->SetFirstDataGroupFilePos(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GenericData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::GenericData *)new affymetrix_calvin_io::GenericData();
    
    *(affymetrix_calvin_io::GenericData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_GenericData_1FileIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    result = (arg1)->FileIdentifier();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_GenericData_1ArrayFileIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    result = (arg1)->ArrayFileIdentifier();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1Header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::FileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    {
        affymetrix_calvin_io::FileHeader &_result_ref = (arg1)->Header();
        result = (affymetrix_calvin_io::FileHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::FileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataGroupCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::GenericData const *)arg1)->DataGroupCnt();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1DataGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::vector<std::wstring > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::vector<std::wstring > **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
        return ;
    } 
    (arg1)->DataGroupNames(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataSetCnt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (u_int32_t)(arg1)->DataSetCnt(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataSetCnt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->DataSetCnt((std::wstring const &)*arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1DataSetNames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    std::vector<std::wstring > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = *(std::vector<std::wstring > **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
        return ;
    } 
    (arg1)->DataSetNames(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1DataSetNames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::vector<std::wstring > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    arg3 = *(std::vector<std::wstring > **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
        return ;
    } 
    (arg1)->DataSetNames((std::wstring const &)*arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    u_int32_t arg3 ;
    affymetrix_calvin_io::DataSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    arg3 = (u_int32_t)jarg3; 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2,arg3);
    
    *(affymetrix_calvin_io::DataSet **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    std::wstring *arg3 = 0 ;
    affymetrix_calvin_io::DataSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg3 = *(std::wstring **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2,(std::wstring const &)*arg3);
    
    *(affymetrix_calvin_io::DataSet **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1DataGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    u_int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroup > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (arg1)->DataGroup(arg2);
    
    *(affymetrix_calvin_io::DataGroup **)(void *)&jresult = new affymetrix_calvin_io::DataGroup((affymetrix_calvin_io::DataGroup &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1ReadFullDataSetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg2; 
    (arg1)->ReadFullDataSetHeader(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_GenericData_1IsDPHPartiallyRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg2; 
    result = (bool)(arg1)->IsDPHPartiallyRead((affymetrix_calvin_io::DataSetHeader const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1OpenFStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::ifstream *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    (arg1)->OpenFStream(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1FindDataGroupHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1FindDataGroupHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::DataGroupHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader(arg2);
    
    *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1FindDataSetHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    u_int32_t arg2 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = (u_int32_t)jarg2; 
    result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,arg2);
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericData_1FindDataSetHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,(std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_GenericData_1MapFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    result = (bool)(arg1)->MapFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericData_1UnmapFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg1; 
    (arg1)->UnmapFile();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GenericDataHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::GenericDataHeader *)new affymetrix_calvin_io::GenericDataHeader();
    
    *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GenericDataHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1SetFileTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFileTypeId((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetFileTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileTypeId();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1SetFileId(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFileId((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetFileId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileId();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1SetFileCreationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetFileCreationTime((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetFileCreationTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileCreationTime();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1SetLocale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return ;
    } 
    (arg1)->SetLocale((std::wstring const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetLocale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetLocale();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1AddNameValParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType const & reference is null");
        return ;
    } 
    (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetNameValParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_parameter::ParameterNameValueType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetNameValParam(arg2);
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetNameValParamCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetNameValParamCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetNameValIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_parameter::ParameterNameValueTypeIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueTypeIt & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_parameter::ParameterNameValueTypeIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueTypeIt & reference is null");
        return ;
    } 
    (arg1)->GetNameValIterators(*arg2,*arg3);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetParentCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParentCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1AddParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericDataHeader const & reference is null");
        return ;
    } 
    (arg1)->AddParent((affymetrix_calvin_io::GenericDataHeader const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    int32_t arg2 ;
    affymetrix_calvin_io::GenericDataHeader result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParent(arg2);
    
    *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jresult = new affymetrix_calvin_io::GenericDataHeader((affymetrix_calvin_io::GenericDataHeader &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetParentIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg2 = 0 ;
    std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator & reference is null");
        return ;
    } 
    arg3 = *(std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator & reference is null");
        return ;
    } 
    (arg1)->GetParentIterators(*arg2,*arg3);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_GenericDataHeader_1FindNameValParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueType & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_GenericDataHeader_1GetNameValParamsBeginsWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
    std::wstring *arg2 = 0 ;
    affymetrix_calvin_parameter::ParameterNameValueTypeVector *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_parameter::ParameterNameValueTypeVector **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_parameter::ParameterNameValueTypeVector & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetNameValParamsBeginsWith((std::wstring const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1SCAN_1ACQUISITION_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::SCAN_ACQUISITION_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1INTENSITY_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::INTENSITY_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1EXPRESSION_1RESULTS_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::EXPRESSION_RESULTS_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GENOTYPING_1RESULTS_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::GENOTYPING_RESULTS_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1RESEQUENCING_1RESULTS_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::RESEQUENCING_RESULTS_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1TAG_1RESULTS_1DATA_1TYPE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_utilities::AffymetrixGuidType *)&affymetrix_calvin_data::TAG_RESULTS_DATA_TYPE;
    
    *(affymetrix_calvin_utilities::AffymetrixGuidType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ArrayFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::ArrayFileReader *)new affymetrix_calvin_io::ArrayFileReader();
    
    *(affymetrix_calvin_io::ArrayFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ArrayFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ArrayFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ArrayFileReader_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jboolean jarg4) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool arg4 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ArrayFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_array::ArrayData & reference is null");
        return 0;
    } 
    arg4 = jarg4 ? true : false; 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ArrayFileReader_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ArrayFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_array::ArrayData & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_ArrayFileReader_1DataTypeIdentifier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::ArrayFileReader **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_calvin_io::ArrayFileReader const *)arg1)->DataTypeIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_ArrayFileReader_1IsFileType(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    result = (bool)affymetrix_calvin_io::ArrayFileReader::IsFileType((std::string const &)*arg1,(std::string const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_ArrayFileReader_1DataTypeIdentifier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    std::string *arg1 = 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    result = affymetrix_calvin_io::ArrayFileReader::DataTypeIdentifier((std::string const &)*arg1);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1USER_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "User";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1DATE_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "Date";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1TIME_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "Time";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1ACTION_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "Action";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1ARRAY_1ID_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "ArrayId";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1INPUT_1ID_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "InputId";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1OUTPUT_1ID_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "OutputId";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1START_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "#Audit-Start";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1AUDIT_1END_1TAG(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "#Audit-End";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1AuditFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::AuditFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::AuditFileReader *)new affymetrix_calvin_io::AuditFileReader();
    
    *(affymetrix_calvin_io::AuditFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1AuditFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::AuditFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_AuditFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayAuditEntryList *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::AuditFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(affymetrix_calvin_array::ArrayAuditEntryList **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_array::ArrayAuditEntryList & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CDFFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CDFFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CDFFileReader *)new affymetrix_calvin_io::CDFFileReader();
    
    *(affymetrix_calvin_io::CDFFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CDFFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CDFFileReader_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFFileReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CDFFileReader const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFFileReader_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFFileReader_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    affymetrix_calvin_io::CDFData *arg2 = 0 ;
    affymetrix_calvin_io::CDFFileReader::ReadMode arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CDFData & reference is null");
        return ;
    } 
    arg3 = (affymetrix_calvin_io::CDFFileReader::ReadMode)jarg3; 
    (arg1)->Read(*arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CDFFileReader_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
    affymetrix_calvin_io::CDFData *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CDFFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::CDFData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CDFData & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CHPFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CHPFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CHPFileReader *)new affymetrix_calvin_io::CHPFileReader();
    
    *(affymetrix_calvin_io::CHPFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CHPFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CHPFileReader_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPFileReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CHPFileReader const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPFileReader_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CHPFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
    affymetrix_calvin_io::CHPData *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CHPFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::CHPData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CHPData & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CelFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::CelFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::CelFileReader *)new affymetrix_calvin_io::CelFileReader();
    
    *(affymetrix_calvin_io::CelFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CelFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CelFileReader_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::CelFileReader const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileReader_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CelFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
    affymetrix_calvin_io::CelFileData *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::CelFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::CelFileData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::CelFileData & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroupHeaderReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::DataGroupHeaderReader *)new affymetrix_calvin_io::DataGroupHeaderReader();
    
    *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeaderReader_1ReadAllMinimumInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::FileHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::FileHeader & reference is null");
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataGroupHeaderReader_1ReadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::FileHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::FileHeader & reference is null");
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAll(*arg2,*arg3,arg4);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeaderReader_1ReadMinimumInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeaderReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupHeaderReader_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadHeader(*arg2,*arg3);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataGroupHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupHeaderReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataGroupReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupReader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataGroupReader *)new affymetrix_calvin_io::DataGroupReader(*arg1,*arg2);
    
    *(affymetrix_calvin_io::DataGroupReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataGroupReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_DataGroupReader_1GetDataSetCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupReader **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataSetCnt();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupReader_1GetDataGroupName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataGroupName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupReader_1GetDataSetReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<DataSetReader > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupReader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetDataSetReader(arg2);
    
    *(DataSetReader **)(void *)&jresult = new DataSetReader((DataSetReader &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataGroupReader_1GetDataSetReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
    std::wstring *arg2 = 0 ;
    SwigValueWrapper<DataSetReader > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataGroupReader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (arg1)->GetDataSetReader((std::wstring const &)*arg2);
    
    *(DataSetReader **)(void *)&jresult = new DataSetReader((DataSetReader &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSetHeaderReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::DataSetHeaderReader *)new affymetrix_calvin_io::DataSetHeaderReader();
    
    *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeaderReader_1ReadAllMinimumInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetHeaderReader_1ReadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
    u_int32_t arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    arg3 = *(affymetrix_calvin_io::DataGroupHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataGroupHeader & reference is null");
        return ;
    } 
    arg4 = (u_int32_t)jarg4; 
    (arg1)->ReadAll(*arg2,*arg3,arg4);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeaderReader_1ReadMinimumInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataSetHeader & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetHeaderReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg3 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataSetHeader & reference is null");
        return 0;
    } 
    result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataSetHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetHeaderReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DataSetReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
    affymetrix_calvin_io::DataSetReader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = *(affymetrix_calvin_io::DataSetHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::DataSetHeader & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::DataSetReader *)new affymetrix_calvin_io::DataSetReader(*arg1,*arg2);
    
    *(affymetrix_calvin_io::DataSetReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DataSetReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetReader_1GetDataSetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::DataSetReader const *)arg1)->GetDataSetName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DataSetReader_1GetDataSetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    affymetrix_calvin_io::DataSetHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    {
        affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->GetDataSetHeader();
        result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
    }
    
    *(affymetrix_calvin_io::DataSetHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int8_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(int8_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int8_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int8_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(u_int8_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int8_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(int16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int16_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(u_int16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int16_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    int32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(int32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    u_int32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(u_int32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "u_int32_t & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    float *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(float **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DataSetReader_1Read_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
    std::wstring *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::DataSetReader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileNotFoundException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::FileNotFoundException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::FileNotFoundException *)new affymetrix_calvin_exceptions::FileNotFoundException();
    
    *(affymetrix_calvin_exceptions::FileNotFoundException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileNotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::FileNotFoundException *arg1 = (affymetrix_calvin_exceptions::FileNotFoundException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::FileNotFoundException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1InvalidVersionException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::InvalidVersionException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::InvalidVersionException *)new affymetrix_calvin_exceptions::InvalidVersionException();
    
    *(affymetrix_calvin_exceptions::InvalidVersionException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1InvalidVersionException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::InvalidVersionException *arg1 = (affymetrix_calvin_exceptions::InvalidVersionException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::InvalidVersionException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1InvalidFileTypeException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::InvalidFileTypeException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::InvalidFileTypeException *)new affymetrix_calvin_exceptions::InvalidFileTypeException();
    
    *(affymetrix_calvin_exceptions::InvalidFileTypeException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1InvalidFileTypeException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::InvalidFileTypeException *arg1 = (affymetrix_calvin_exceptions::InvalidFileTypeException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::InvalidFileTypeException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1UnableToOpenFileException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::UnableToOpenFileException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::UnableToOpenFileException *)new affymetrix_calvin_exceptions::UnableToOpenFileException();
    
    *(affymetrix_calvin_exceptions::UnableToOpenFileException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1UnableToOpenFileException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::UnableToOpenFileException *arg1 = (affymetrix_calvin_exceptions::UnableToOpenFileException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::UnableToOpenFileException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileNotOpenException(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_exceptions::FileNotOpenException *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_exceptions::FileNotOpenException *)new affymetrix_calvin_exceptions::FileNotOpenException();
    
    *(affymetrix_calvin_exceptions::FileNotOpenException **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileNotOpenException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_exceptions::FileNotOpenException *arg1 = (affymetrix_calvin_exceptions::FileNotOpenException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_exceptions::FileNotOpenException **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::FileHeader *arg2 = 0 ;
    affymetrix_calvin_io::FileHeaderReader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = *(affymetrix_calvin_io::FileHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::FileHeader & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::FileHeaderReader *)new affymetrix_calvin_io::FileHeaderReader(*arg1,*arg2);
    
    *(affymetrix_calvin_io::FileHeaderReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FileHeaderReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeaderReader **)(void *)&jarg1; 
    (arg1)->Read();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeaderReader_1GetDataGroupCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeaderReader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetDataGroupCnt();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileHeaderReader_1GetFirstDataGroupFilePos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeaderReader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetFirstDataGroupFilePos();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileHeaderReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FileInput_1ReadFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    char **arg1 = 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    char **arg1 = 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileInput_1ReadInt32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    char **arg1 = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    char **arg1 = 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    char **arg1 = 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadUInt32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    char **arg1 = 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FileInput_1ReadFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    char **arg1 = 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadString16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadString16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FileInput_1ReadString8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    int32_t arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FileInput_1ReadString8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadString16_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    char **arg1 = 0 ;
    int32_t arg2 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FileInput_1ReadString16_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    char **arg1 = 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FileInput_1ReadString8_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    char **arg1 = 0 ;
    int32_t arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    arg2 = (int32_t)jarg2; 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FileInput_1ReadString8_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    char **arg1 = 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(char ***)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return 0;
    } 
    result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FileInput_1ReadBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    void **arg2 = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    arg2 = *(void ***)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "void const *& reference is null");
        return 0;
    } 
    result = (int32_t)affymetrix_calvin_io::FileInput::ReadBlob(*arg1,(void const *&)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FileInput(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::FileInput *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::FileInput *)new affymetrix_calvin_io::FileInput();
    
    *(affymetrix_calvin_io::FileInput **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FileInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::FileInput *arg1 = (affymetrix_calvin_io::FileInput *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::FileInput **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GenericDataHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    std::ifstream *arg1 = 0 ;
    affymetrix_calvin_io::GenericDataHeaderReader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::ifstream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return 0;
    } 
    result = (affymetrix_calvin_io::GenericDataHeaderReader *)new affymetrix_calvin_io::GenericDataHeaderReader(*arg1);
    
    *(affymetrix_calvin_io::GenericDataHeaderReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericDataHeaderReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
    affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeaderReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericDataHeader **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericDataHeader & reference is null");
        return ;
    } 
    (arg1)->Read(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GenericDataHeaderReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericDataHeaderReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GenericFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::GenericFileReader *)new affymetrix_calvin_io::GenericFileReader();
    
    *(affymetrix_calvin_io::GenericFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GenericFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_GenericFileReader_1GetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    result = ((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetFilename();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFilename((std::string const &)*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1ReadHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    affymetrix_calvin_io::GenericFileReader::ReadHeaderOption arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericData & reference is null");
        return ;
    } 
    arg3 = (affymetrix_calvin_io::GenericFileReader::ReadHeaderOption)jarg3; 
    (arg1)->ReadHeader(*arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1ReadHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericData & reference is null");
        return ;
    } 
    (arg1)->ReadHeader(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1Open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    affymetrix_calvin_io::GenericFileReader::OpenHint arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericData & reference is null");
        return ;
    } 
    arg3 = (affymetrix_calvin_io::GenericFileReader::OpenHint)jarg3; 
    (arg1)->Open(*arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1Open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    affymetrix_calvin_io::GenericData *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_calvin_io::GenericData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_io::GenericData & reference is null");
        return ;
    } 
    (arg1)->Open(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericFileReader_1GetDataGroupCnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    result = (u_int32_t)((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetDataGroupCnt();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericFileReader_1GetDataGroupReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    int32_t arg2 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetDataGroupReader(arg2);
    
    *(affymetrix_calvin_io::DataGroupReader **)(void *)&jresult = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_GenericFileReader_1GetDataGroupReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    std::wstring *arg2 = 0 ;
    SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    arg2 = *(std::wstring **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
        return 0;
    } 
    result = (arg1)->GetDataGroupReader((std::wstring const &)*arg2);
    
    *(affymetrix_calvin_io::DataGroupReader **)(void *)&jresult = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GenericFileReader_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GenericFileReader **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1GRD_1FILE_1TYPE_1IDENTIFIER(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-calvin-grid-control";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GridControlFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::GridControlFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::GridControlFileReader *)new affymetrix_calvin_io::GridControlFileReader();
    
    *(affymetrix_calvin_io::GridControlFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GridControlFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GridControlFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_GridControlFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_grid_control::GridControlData *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::GridControlFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(affymetrix_grid_control::GridControlData **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_grid_control::GridControlData & reference is null");
        return ;
    } 
    (arg1)->Read((std::string const &)*arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1TemplateFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::TemplateFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::TemplateFileReader *)new affymetrix_calvin_io::TemplateFileReader();
    
    *(affymetrix_calvin_io::TemplateFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1TemplateFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::TemplateFileReader *arg1 = (affymetrix_calvin_io::TemplateFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::TemplateFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1TextFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_io::TextFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_io::TextFileReader *)new affymetrix_calvin_io::TextFileReader();
    
    *(affymetrix_calvin_io::TextFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1TextFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::TextFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_TextFileReader_1ReadFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    std::string *arg2 = 0 ;
    std::map<std::string,std::string > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::TextFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(std::map<std::string,std::string > **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map<std::string,std::string > & reference is null");
        return ;
    } 
    (arg1)->ReadFile((std::string const &)*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_TextFileReader_1ReadFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
    std::ifstream *arg2 = 0 ;
    std::map<std::string,std::string > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_io::TextFileReader **)(void *)&jarg1; 
    arg2 = *(std::ifstream **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
        return ;
    } 
    arg3 = *(std::map<std::string,std::string > **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map<std::string,std::string > & reference is null");
        return ;
    } 
    (arg1)->ReadFile(*arg2,*arg3);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1TEMPLATE_1FILE_1CREATEION_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::TEMPLATE_FILE_CREATEION_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1TEMPLATE_1FILE_1ATTRIBUTE_1UPDATE_1ACTION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    result = (int32_t)(int32_t)affymetrix_calvin_array::TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1TEMPLATE_1FILE_1TYPE_1IDENTIFIER(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "affymetrix-calvin-template";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1TemplateData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_calvin_array::TemplateData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_calvin_array::TemplateData *)new affymetrix_calvin_array::TemplateData();
    
    *(affymetrix_calvin_array::TemplateData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1TemplateData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_calvin_array::TemplateData *arg1 = (affymetrix_calvin_array::TemplateData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_calvin_array::TemplateData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1_1AFFY_1BASE_1TYPE_1H(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1_1_1int8_1t_1defined(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1AFFX_1FILEIO_1H(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUInt32_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    uint32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(uint32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
        return ;
    } 
    ReadUInt32_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadInt32_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    int32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(int32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null");
        return ;
    } 
    ReadInt32_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFloat_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(float **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    ReadFloat_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUInt16_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    uint16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(uint16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
        return ;
    } 
    ReadUInt16_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadInt16_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    int16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(int16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int16_t & reference is null");
        return ;
    } 
    ReadInt16_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadCString_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    char **arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(char ***)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return ;
    } 
    ReadCString_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadString_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    ReadString_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUIntLenString_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    ReadUIntLenString_I(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    uint8_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(uint8_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint8_t & reference is null");
        return ;
    } 
    ReadUInt8(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    int8_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(int8_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int8_t & reference is null");
        return ;
    } 
    ReadInt8(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUInt32_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    uint32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(uint32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
        return ;
    } 
    ReadUInt32_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadInt32_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    int32_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(int32_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null");
        return ;
    } 
    ReadInt32_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFloat_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(float **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    ReadFloat_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUInt16_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    uint16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(uint16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
        return ;
    } 
    ReadUInt16_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadInt16_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    int16_t *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(int16_t **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int16_t & reference is null");
        return ;
    } 
    ReadInt16_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadCString_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    char **arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(char ***)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char *& reference is null");
        return ;
    } 
    ReadCString_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadString_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    ReadString_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadUIntLenString_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    ReadUIntLenString_N(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFixedString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    std::istream *arg1 = 0 ;
    std::string *arg2 = 0 ;
    uint32_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    arg3 = (uint32_t)jarg3; 
    ReadFixedString(*arg1,*arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFixedCString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    uint32_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    arg3 = (uint32_t)jarg3; 
    ReadFixedCString(*arg1,arg2,arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFixedUCString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    std::istream *arg1 = 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    uint32_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(unsigned char **)(void *)&jarg2; 
    arg3 = (uint32_t)jarg3; 
    ReadFixedUCString(*arg1,arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadCharacterArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    uint32_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    arg3 = (uint32_t)jarg3; 
    ReadCharacterArray(*arg1,arg2,arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadNextLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    std::istream *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    arg3 = (int)jarg3; 
    ReadNextLine(*arg1,arg2,arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ReadFloatFromOldBPMAP_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    std::istream *arg1 = 0 ;
    float *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(std::istream **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
        return ;
    } 
    arg2 = *(float **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
        return ;
    } 
    ReadFloatFromOldBPMAP_N(*arg1,*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_MmGetUInt32_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint32_t **)(void *)&jarg1; 
    result = (uint32_t)MmGetUInt32_I(arg1);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_MmGetInt32_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    int32_t *arg1 = (int32_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int32_t **)(void *)&jarg1; 
    result = (int32_t)MmGetInt32_I(arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_MmGetUInt16_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint16_t **)(void *)&jarg1; 
    result = (uint16_t)MmGetUInt16_I(arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_MmGetInt16_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    int16_t *arg1 = (int16_t *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int16_t **)(void *)&jarg1; 
    result = (int16_t)MmGetInt16_I(arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_MmGetUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    uint8_t *arg1 = (uint8_t *) 0 ;
    uint8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint8_t **)(void *)&jarg1; 
    result = (uint8_t)MmGetUInt8(arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_MmGetInt8(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jchar jresult = 0 ;
    int8_t *arg1 = (int8_t *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (int8_t *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (int8_t)MmGetInt8(arg1);
    
    jresult = (jchar)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_MmGetUInt32_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint32_t **)(void *)&jarg1; 
    result = (uint32_t)MmGetUInt32_N(arg1);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_MmGetUInt16_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint16_t **)(void *)&jarg1; 
    result = (uint16_t)MmGetUInt16_N(arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_MmGetFloat_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)(void *)&jarg1; 
    result = (float)MmGetFloat_N(arg1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_MmGetInt32_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    int32_t *arg1 = (int32_t *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int32_t **)(void *)&jarg1; 
    result = (int32_t)MmGetInt32_N(arg1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_MmGetInt16_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    int16_t *arg1 = (int16_t *) 0 ;
    int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int16_t **)(void *)&jarg1; 
    result = (int16_t)MmGetInt16_N(arg1);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_MmGetFloat_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)(void *)&jarg1; 
    result = (float)MmGetFloat_I(arg1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_MmGetFloatFromOldBPMAP_1N(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    float *arg1 = (float *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)(void *)&jarg1; 
    result = (float)MmGetFloatFromOldBPMAP_N(arg1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetUInt32_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint32_t **)(void *)&jarg1; 
    arg2 = (uint32_t)jarg2; 
    MmSetUInt32_I(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetUInt16_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint16_t **)(void *)&jarg1; 
    arg2 = (uint16_t)jarg2; 
    MmSetUInt16_I(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    uint8_t *arg1 = (uint8_t *) 0 ;
    uint8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint8_t **)(void *)&jarg1; 
    arg2 = (uint8_t)jarg2; 
    MmSetUInt8(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetFloat_1I(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    float *arg1 = (float *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    MmSetFloat_I(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetUInt32_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    uint32_t *arg1 = (uint32_t *) 0 ;
    uint32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint32_t **)(void *)&jarg1; 
    arg2 = (uint32_t)jarg2; 
    MmSetUInt32_N(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetUInt16_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    uint16_t *arg1 = (uint16_t *) 0 ;
    uint16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(uint16_t **)(void *)&jarg1; 
    arg2 = (uint16_t)jarg2; 
    MmSetUInt16_N(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_MmSetFloat_1N(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    float *arg1 = (float *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    MmSetFloat_N(arg1,arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CoordinatePoint_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CoordinatePoint **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->x = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CoordinatePoint_1x(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CoordinatePoint **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->x);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CoordinatePoint_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CoordinatePoint **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    if (arg1) (arg1)->y = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CoordinatePoint_1y(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CoordinatePoint **)(void *)&jarg1; 
    result = (int32_t) ((arg1)->y);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CoordinatePoint(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    CoordinatePoint *result;
    
    (void)jenv;
    (void)jcls;
    result = (CoordinatePoint *)new CoordinatePoint();
    
    *(CoordinatePoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CoordinatePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CoordinatePoint **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GridCoordinatesType_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    arg2 = *(CoordinatePoint **)(void *)&jarg2; 
    if (arg1) (arg1)->upperleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GridCoordinatesType_1upperleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    result = (CoordinatePoint *)& ((arg1)->upperleft);
    
    *(CoordinatePoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GridCoordinatesType_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    arg2 = *(CoordinatePoint **)(void *)&jarg2; 
    if (arg1) (arg1)->upperright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GridCoordinatesType_1upperright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    result = (CoordinatePoint *)& ((arg1)->upperright);
    
    *(CoordinatePoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GridCoordinatesType_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    arg2 = *(CoordinatePoint **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerright = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GridCoordinatesType_1lowerright(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    result = (CoordinatePoint *)& ((arg1)->lowerright);
    
    *(CoordinatePoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GridCoordinatesType_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    arg2 = *(CoordinatePoint **)(void *)&jarg2; 
    if (arg1) (arg1)->lowerleft = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GridCoordinatesType_1lowerleft(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    CoordinatePoint *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    result = (CoordinatePoint *)& ((arg1)->lowerleft);
    
    *(CoordinatePoint **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GridCoordinatesType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    GridCoordinatesType *result;
    
    (void)jenv;
    (void)jcls;
    result = (GridCoordinatesType *)new GridCoordinatesType();
    
    *(GridCoordinatesType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GridCoordinatesType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GridCoordinatesType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1TagValuePairType_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->Tag = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1TagValuePairType_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->Tag);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1TagValuePairType_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->Value = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1TagValuePairType_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->Value);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_TagValuePairType_1_1TagValuePairType_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    _TagValuePairType arg2 ;
    _TagValuePairType result;
    _TagValuePairType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    argp2 = *(_TagValuePairType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _TagValuePairType");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(_TagValuePairType **)(void *)&jresult = new _TagValuePairType((_TagValuePairType &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_TagValuePairType_1_1TagValuePairType_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    _TagValuePairType arg2 ;
    bool result;
    _TagValuePairType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    argp2 = *(_TagValuePairType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _TagValuePairType");
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_TagValuePairType_1_1TagValuePairType_1equals_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (bool)(arg1)->operator ==((char const *)arg2);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1TagValuePairType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    TagValuePairType *result;
    
    (void)jenv;
    (void)jcls;
    result = (TagValuePairType *)new TagValuePairType();
    
    *(TagValuePairType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1TagValuePairType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    TagValuePairType *arg1 = (TagValuePairType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1MAX_1PROBE_1SET_1NAME_1LENGTH(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 64;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFFileHeader_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFFileHeader_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFFileHeader_1GetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFFileHeader_1GetNumQCProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumQCProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCDFFileHeader_1GetReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    {
        std::string &_result_ref = (arg1)->GetReference();
        result = (std::string *) &_result_ref;
    }
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFFileHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFFileHeader *)new affxcdf::CCDFFileHeader();
    
    *(affxcdf::CCDFFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetListIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetExpos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetPBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_CCDFProbeInformation_1GetTBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFProbeInformation *)new affxcdf::CCDFProbeInformation();
    
    *(affxcdf::CCDFProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PROBE_1SIZE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (4+4+2+2+1+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    affxcdf::DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (affxcdf::DirectionType)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStart();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStop();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (arg1)->GetName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFProbeGroupInformation_1GetCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcdf::CCDFProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFProbeGroupInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFProbeGroupInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFProbeGroupInformation *)new affxcdf::CCDFProbeGroupInformation();
    
    *(affxcdf::CCDFProbeGroupInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFProbeGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PROBE_1GROUP_1SIZE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (64+4+4+4+4+1+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    affxcdf::GeneChipProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    affxcdf::DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::DirectionType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetProbeSetNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFProbeSetInformation_1GetGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeGroupInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcdf::CCDFProbeGroupInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFProbeGroupInformation & reference is null");
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFProbeSetInformation *)new affxcdf::CCDFProbeSetInformation();
    
    *(affxcdf::CCDFProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PROBE_1SET_1SIZE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (4+4+4+4+2+1+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFProbeSetNames(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFProbeSetNames *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFProbeSetNames *)new affxcdf::CCDFProbeSetNames();
    
    *(affxcdf::CCDFProbeSetNames **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFProbeSetNames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetNames **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFProbeSetNames_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetNames **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFProbeSetNames_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFProbeSetNames **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxcdf::CCDFProbeSetNames const *)arg1)->GetName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFQCProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFQCProbeInformation *)new affxcdf::CCDFQCProbeInformation();
    
    *(affxcdf::CCDFQCProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFQCProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFQCProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFQCProbeInformation_1GetPLen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFQCProbeInformation_1IsPerfectMatchProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFQCProbeInformation_1IsBackgroundProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFQCProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1QC_1PROBE_1SIZE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (2+2+1+1+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFQCProbeSetInformation_1GetQCProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    affxcdf::GeneChipQCProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::GeneChipQCProbeSetType)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFQCProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFQCProbeSetInformation_1GetProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affxcdf::CCDFQCProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcdf::CCDFQCProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFQCProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFQCProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFQCProbeSetInformation *)new affxcdf::CCDFQCProbeSetInformation();
    
    *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1QC_1PROBE_1SET_1SIZE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (4+2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    affxcdf::CCDFFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    {
        affxcdf::CCDFFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affxcdf::CCDFFileHeader *) &_result_ref;
    }
    
    *(affxcdf::CCDFFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = ((affxcdf::CCDFFileData const *)arg1)->GetChipType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFFileData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFFileData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCDFFileData_1IsXDACompatibleFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::GeneChipProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFFileData const *)arg1)->GetProbeSetType(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::CCDFProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcdf::CCDFProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetQCProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    int arg2 ;
    affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCDFFileData_1GetQCProbeSetInformation_1By_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    affxcdf::GeneChipQCProbeSetType arg2 ;
    affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    arg2 = (affxcdf::GeneChipQCProbeSetType)jarg2; 
    arg3 = *(affxcdf::CCDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcdf::CCDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCDFFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcdf::CCDFFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcdf::CCDFFileData *)new affxcdf::CCDFFileData();
    
    *(affxcdf::CCDFFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCDFFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcdf::CCDFFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CELFileEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    result = (float) ((arg1)->Intensity);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CELFileEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    result = (float) ((arg1)->Stdv);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1CELFileEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    result = (short) ((arg1)->Pixels);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CELFileEntryType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcel::CELFileEntryType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcel::CELFileEntryType *)new affxcel::CELFileEntryType();
    
    *(affxcel::CELFileEntryType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CELFileEntryType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileEntryType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileTranscriptomeEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CELFileTranscriptomeEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->Intensity);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileTranscriptomeEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CELFileTranscriptomeEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->Stdv);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CELFileTranscriptomeEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1CELFileTranscriptomeEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->Pixels);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CELFileTranscriptomeEntryType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcel::CELFileTranscriptomeEntryType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcel::CELFileTranscriptomeEntryType *)new affxcel::CELFileTranscriptomeEntryType();
    
    *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CELFileTranscriptomeEntryType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCELFileHeaderData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcel::CCELFileHeaderData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcel::CCELFileHeaderData *)new affxcel::CCELFileHeaderData();
    
    *(affxcel::CCELFileHeaderData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCELFileHeaderData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetMagic(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMagic(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetMagic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetMagic();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetVersion(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCols(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetRows(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetCells(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCells(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1AppendHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->AppendHeader((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetHeader((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetHeader();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetAlg(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetAlg((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetAlg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetParams((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetParams();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1ParseChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->ParseChipType();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetChipType((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1ParseDatHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->ParseDatHeader();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetDatHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->SetDatHeader();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetDatHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetDatHeader((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetDatHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetDatHeader();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetMargin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetMargin();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (uint32_t)jarg2; 
    (arg1)->SetOutliers(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (uint32_t)(arg1)->GetOutliers();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1IncrementOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->IncrementOutliers();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1DecrementOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->DecrementOutliers();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetMasked(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (uint32_t)jarg2; 
    (arg1)->SetMasked(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (uint32_t)(arg1)->GetMasked();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1IncrementMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->IncrementMasked();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1DecrementMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->DecrementMasked();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1ParseAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->ParseAlgorithmParameters();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1AddAlgorithmParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    arg3 = *(std::string **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    } 
    (arg1)->AddAlgorithmParameter(*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1AddAlgorithmParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->SetAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetAlgorithmParameterTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetNumberAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1SetGridCorners(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    GridCoordinatesType arg2 ;
    GridCoordinatesType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    argp2 = *(GridCoordinatesType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GridCoordinatesType");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->SetGridCorners(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1ParseCorners(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    (arg1)->ParseCorners();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileHeaderData_1GetGridCorners(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
    GridCoordinatesType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileHeaderData **)(void *)&jarg1; 
    result = (arg1)->GetGridCorners();
    
    *(GridCoordinatesType **)(void *)&jresult = new GridCoordinatesType((GridCoordinatesType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1TEXT_1CEL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::TEXT_CEL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1XDA_1BCEL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::XDA_BCEL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1TRANSCRIPTOME_1BCEL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::TRANSCRIPTOME_BCEL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1COMPACT_1BCEL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::COMPACT_BCEL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1CEL_1ALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::CEL_ALL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1CEL_1DATA(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::CEL_DATA;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1CEL_1OUTLIER(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::CEL_OUTLIER;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CCELFileData_1CEL_1MASK(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affxcel::CCELFileData::CEL_MASK;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCELFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxcel::CCELFileData *)new affxcel::CCELFileData();
    
    *(affxcel::CCELFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCELFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetError((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetThisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    affxcel::CCELFileData *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (affxcel::CCELFileData *)(arg1)->GetThisPtr();
    
    *(affxcel::CCELFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = ((affxcel::CCELFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetHeaderKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (arg1)->GetHeaderKey((char const *)arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetHeaderString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetHeaderString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    affxcel::CCELFileHeaderData *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        affxcel::CCELFileHeaderData &_result_ref = (arg1)->GetHeader();
        result = (affxcel::CCELFileHeaderData *) &_result_ref;
    }
    
    *(affxcel::CCELFileHeaderData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetAlg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetAlg();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetParams();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetAlgorithmParameterTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetNumberAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetDatHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetDatHeader();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCELFileData_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetChipType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetCellMargin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetNumOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (uint32_t)(arg1)->GetNumOutliers();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetNumMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (uint32_t)(arg1)->GetNumMasked();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetGridCorners(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    GridCoordinatesType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (arg1)->GetGridCorners();
    
    *(GridCoordinatesType **)(void *)&jresult = new GridCoordinatesType((GridCoordinatesType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1IndexToX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1IndexToY(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1XYToIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1XYToIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    result = (int)affxcel::CCELFileData::XYToIndex(arg1,arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1GetEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileEntryType *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcel::CELFileEntryType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcel::CELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1GetEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileEntryType *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxcel::CELFileEntryType **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcel::CELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1GetTranscriptomeEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileTranscriptomeEntryType *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcel::CELFileTranscriptomeEntryType & reference is null");
        return ;
    } 
    (arg1)->GetTranscriptomeEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1GetTranscriptomeEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileTranscriptomeEntryType *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxcel::CELFileTranscriptomeEntryType & reference is null");
        return ;
    } 
    (arg1)->GetTranscriptomeEntry(arg2,arg3,*arg4);
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CCELFileData_1GetIntensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CCELFileData_1GetIntensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CCELFileData_1GetStdv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CCELFileData_1GetStdv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CCELFileData_1GetPixels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jshort jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_CCELFileData_1GetPixels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jshort jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsMasked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsMasked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsOutlier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsOutlier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCELFileData_1GetFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    uint32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (uint32_t)(arg1)->GetFileSize();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsXDACompatibleFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsTranscriptomeBcelFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->IsTranscriptomeBcelFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1IsCompactCelFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->IsCompactCelFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1ReadEx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1ReadEx_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (bool)(arg1)->ReadEx((char const *)arg2);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCELFileData_1ReadEx_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadEx();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetReadState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCELFileData_1GetFileFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    result = (int)(arg1)->GetFileFormat();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetFileFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetFileFormat(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetAlgorithmName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1AddAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetChipType((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetGridCorners(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    GridCoordinatesType arg2 ;
    GridCoordinatesType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    argp2 = *(GridCoordinatesType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GridCoordinatesType");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->SetGridCorners(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetCellEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileEntryType *arg4 = (affxcel::CELFileEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxcel::CELFileEntryType **)(void *)&jarg4; 
    (arg1)->SetCellEntry(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetCellEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileEntryType *arg3 = (affxcel::CELFileEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcel::CELFileEntryType **)(void *)&jarg3; 
    (arg1)->SetCellEntry(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1AllocateEntries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->AllocateEntries();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetTranscriptomeCellEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    affxcel::CELFileTranscriptomeEntryType *arg4 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg4; 
    (arg1)->SetTranscriptomeCellEntry(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetTranscriptomeCellEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    affxcel::CELFileTranscriptomeEntryType *arg3 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxcel::CELFileTranscriptomeEntryType **)(void *)&jarg3; 
    (arg1)->SetTranscriptomeCellEntry(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1AllocateTranscriptomeEntries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->AllocateTranscriptomeEntries();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetIntensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetIntensity(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetIntensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jfloat jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (float)jarg4; 
    (arg1)->SetIntensity(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetStdv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetStdv(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetStdv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jfloat jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    float arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (float)jarg4; 
    (arg1)->SetStdv(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetPixels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jshort jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    short arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (short)jarg3; 
    (arg1)->SetPixels(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetPixels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jshort jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    short arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (short)jarg4; 
    (arg1)->SetPixels(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    (arg1)->SetMask(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jboolean jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = jarg4 ? true : false; 
    (arg1)->SetMask(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetOutlier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    (arg1)->SetOutlier(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1SetOutlier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jboolean jarg4) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = jarg4 ? true : false; 
    (arg1)->SetOutlier(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1Munmap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->Munmap();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCELFileData_1EnsureNotMmapped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxcel::CCELFileData **)(void *)&jarg1; 
    (arg1)->EnsureNotMmapped();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneType_1centerx(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->centerx = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneType_1centerx(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    result = (float) ((arg1)->centerx);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneType_1centery(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->centery = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneType_1centery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    result = (float) ((arg1)->centery);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneType_1background(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->background = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneType_1background(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    result = (float) ((arg1)->background);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_BackgroundZoneType_1_1BackgroundZoneType_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    affxchp::_BackgroundZoneType arg2 ;
    affxchp::_BackgroundZoneType result;
    affxchp::_BackgroundZoneType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    argp2 = *(affxchp::_BackgroundZoneType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affxchp::_BackgroundZoneType");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affxchp::_BackgroundZoneType **)(void *)&jresult = new affxchp::_BackgroundZoneType((affxchp::_BackgroundZoneType &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1BackgroundZoneType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::BackgroundZoneType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::BackgroundZoneType *)new affxchp::BackgroundZoneType();
    
    *(affxchp::BackgroundZoneType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1BackgroundZoneType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneInfo_1number_1zones(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->number_zones = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneInfo_1number_1zones(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    result = (int) ((arg1)->number_zones);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneInfo_1smooth_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->smooth_factor = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneInfo_1smooth_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    result = (float) ((arg1)->smooth_factor);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BackgroundZoneInfo_1zones(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = (affxchp::BackgroundZoneTypeList *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneTypeList **)(void *)&jarg2; 
    if (arg1) (arg1)->zones = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1BackgroundZoneInfo_1zones(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    affxchp::BackgroundZoneTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    result = (affxchp::BackgroundZoneTypeList *)& ((arg1)->zones);
    
    *(affxchp::BackgroundZoneTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1BackgroundZoneInfo(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::BackgroundZoneInfo *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::BackgroundZoneInfo *)new affxchp::BackgroundZoneInfo();
    
    *(affxchp::BackgroundZoneInfo **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1BackgroundZoneInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCHPFileHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CCHPFileHeader *)new affxchp::CCHPFileHeader();
    
    *(affxchp::CCHPFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCHPFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetAssayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::CCHPFileHeader::GeneChipAssayType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (affxchp::CCHPFileHeader::GeneChipAssayType)((affxchp::CCHPFileHeader const *)arg1)->GetAssayType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetChipType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgVersion();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1AlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    TagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->AlgorithmParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    *(TagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SummaryParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    TagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->SummaryParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    *(TagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetParentCellFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetParentCellFile();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetProgID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileHeader const *)arg1)->GetProgID();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (arg1)->GetAlgorithmParameter((char const *)arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetSummaryParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (arg1)->GetSummaryParameter((char const *)arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetBackgroundZoneInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::BackgroundZoneInfo *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        affxchp::BackgroundZoneInfo &_result_ref = (arg1)->GetBackgroundZoneInfo();
        result = (affxchp::BackgroundZoneInfo *) &_result_ref;
    }
    
    *(affxchp::BackgroundZoneInfo **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetBackgroundZones(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::BackgroundZoneTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        affxchp::BackgroundZoneTypeList &_result_ref = (arg1)->GetBackgroundZones();
        result = (affxchp::BackgroundZoneTypeList *) &_result_ref;
    }
    
    *(affxchp::BackgroundZoneTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetBackgroundZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    int arg3 ;
    affxchp::BackgroundZoneType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (arg1)->GetBackgroundZone(arg2,arg3);
    
    *(affxchp::BackgroundZoneType **)(void *)&jresult = new affxchp::BackgroundZoneType((affxchp::BackgroundZoneType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetMagicNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetMagicNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1GetVersionNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetVersionNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetCols(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetRows(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumProbeSets(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetAssayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    affxchp::CCHPFileHeader::GeneChipAssayType arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    arg2 = (affxchp::CCHPFileHeader::GeneChipAssayType)jarg2; 
    (arg1)->SetAssayType(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetChipType((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetAlgName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetAlgVersion((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetParentCellFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetParentCellFile((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileHeader_1SetProgID(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileHeader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetProgID((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CProbeSetResults *)new affxchp::CProbeSetResults();
    
    *(affxchp::CProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CProbeSetResults *arg1 = (affxchp::CProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ABS_1PRESENT_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 0;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ABS_1MARGINAL_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ABS_1ABSENT_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 2;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ABS_1NO_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 3;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1INCREASE_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1DECREASE_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 2;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1MOD_1INCREASE_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 3;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1MOD_1DECREASE_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 4;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1NO_1CHANGE_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 5;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1COMP_1NO_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 6;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1DetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->DetectionPValue = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1DetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->DetectionPValue);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1Signal(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Signal = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1Signal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->Signal);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1NumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumPairs = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1NumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->NumPairs);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1NumUsedPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumUsedPairs = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1NumUsedPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->NumUsedPairs);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1Detection(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Detection = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1Detection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->Detection);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1m_1HasCompResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    if (arg1) (arg1)->m_HasCompResults = arg2;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1m_1HasCompResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (bool) ((arg1)->m_HasCompResults);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1ChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->ChangePValue = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1ChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->ChangePValue);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1SignalLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatio = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1SignalLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->SignalLogRatio);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1SignalLogRatioLow(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatioLow = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1SignalLogRatioLow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->SignalLogRatioLow);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1SignalLogRatioHigh(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->SignalLogRatioHigh = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1SignalLogRatioHigh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->SignalLogRatioHigh);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1NumCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->NumCommonPairs = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1NumCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->NumCommonPairs);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CExpressionProbeSetResults_1Change(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->Change = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1CExpressionProbeSetResults_1Change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->Change);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CExpressionProbeSetResults_1GetDetectionString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetDetectionString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CExpressionProbeSetResults_1GetChangeString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetChangeString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CExpressionProbeSetResults_1CExpressionProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    affxchp::CExpressionProbeSetResults *arg2 = 0 ;
    affxchp::CExpressionProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::CExpressionProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affxchp::CExpressionProbeSetResults **)(void *)&jresult = new affxchp::CExpressionProbeSetResults((affxchp::CExpressionProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CExpressionProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CExpressionProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CExpressionProbeSetResults *)new affxchp::CExpressionProbeSetResults();
    
    *(affxchp::CExpressionProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CExpressionProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ALLELE_1A_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 6;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ALLELE_1B_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 7;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ALLELE_1AB_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 8;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ALLELE_1NO_1CALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 11;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1AlleleCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->AlleleCall = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1AlleleCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->AlleleCall);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1Confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Confidence = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1Confidence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->Confidence);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1RAS1(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->RAS1 = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1RAS1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->RAS1);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1RAS2(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->RAS2 = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1RAS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->RAS2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1pvalue_1AA(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_AA = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1pvalue_1AA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->pvalue_AA);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1pvalue_1AB(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_AB = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1pvalue_1AB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->pvalue_AB);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1pvalue_1BB(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_BB = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1pvalue_1BB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->pvalue_BB);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1CGenotypeProbeSetResults_1pvalue_1NoCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->pvalue_NoCall = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1CGenotypeProbeSetResults_1pvalue_1NoCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float) ((arg1)->pvalue_NoCall);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGenotypeProbeSetResults_1GetAlleleCallString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetAlleleCallString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CGenotypeProbeSetResults_1CGenotypeProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    affxchp::CGenotypeProbeSetResults *arg2 = 0 ;
    affxchp::CGenotypeProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::CGenotypeProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affxchp::CGenotypeProbeSetResults **)(void *)&jresult = new affxchp::CGenotypeProbeSetResults((affxchp::CGenotypeProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CGenotypeProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CGenotypeProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CGenotypeProbeSetResults *)new affxchp::CGenotypeProbeSetResults();
    
    *(affxchp::CGenotypeProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CGenotypeProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CUniversalProbeSetResults_1GetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg1; 
    result = (float)((affxchp::CUniversalProbeSetResults const *)arg1)->GetBackground();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CUniversalProbeSetResults_1SetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CUniversalProbeSetResults_1CUniversalProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    affxchp::CUniversalProbeSetResults *arg2 = 0 ;
    affxchp::CUniversalProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::CUniversalProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affxchp::CUniversalProbeSetResults **)(void *)&jresult = new affxchp::CUniversalProbeSetResults((affxchp::CUniversalProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CUniversalProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CUniversalProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CUniversalProbeSetResults *)new affxchp::CUniversalProbeSetResults();
    
    *(affxchp::CUniversalProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CUniversalProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ForceCallType_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->position = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ForceCallType_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    result = (int) ((arg1)->position);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ForceCallType_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->call = arg2;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1ForceCallType_1call(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    result = (char) ((arg1)->call);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ForceCallType_1reason(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->reason = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1ForceCallType_1reason(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->reason);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ForceCallType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::ForceCallType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::ForceCallType *)new affxchp::ForceCallType();
    
    *(affxchp::ForceCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ForceCallType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::ForceCallType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1NO_1SIGNAL_1THR_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'N';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1WEAK_1SIGNAL_1THR_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'W';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1SATURATION_1LEVEL_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'S';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1QUALITY_1SCORE_1THR_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'Q';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1TRACE_1AND_1SEQUENCE_1PROFILES_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'F';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1RELIABILITY_1THR_1FORCE_1CALL(JNIEnv *jenv, jclass jcls) {
    jchar jresult = 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    result = (char) 'B';
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BaseCallType_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BaseCallType **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->position = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1BaseCallType_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BaseCallType **)(void *)&jarg1; 
    result = (int) ((arg1)->position);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BaseCallType_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BaseCallType **)(void *)&jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->call = arg2;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1BaseCallType_1call(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BaseCallType **)(void *)&jarg1; 
    result = (char) ((arg1)->call);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1BaseCallType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::BaseCallType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::BaseCallType *)new affxchp::BaseCallType();
    
    *(affxchp::BaseCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1BaseCallType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::BaseCallType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CResequencingResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CResequencingResults *)new affxchp::CResequencingResults();
    
    *(affxchp::CResequencingResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CResequencingResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetCalledBases(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<char > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    {
        std::vector<char > const &_result_ref = (arg1)->GetCalledBases();
        result = (std::vector<char > *) &_result_ref;
    }
    
    *(std::vector<char > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetCalledBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jchar jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (char)(arg1)->GetCalledBase(arg2);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetCalledBasesSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetCalledBasesSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1ResizeCalledBases(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeCalledBases(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1SetCalledBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jchar jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    char arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (char)jarg3; 
    (arg1)->SetCalledBase(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetScores(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<float > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    {
        std::vector<float > const &_result_ref = (arg1)->GetScores();
        result = (std::vector<float > *) &_result_ref;
    }
    
    *(std::vector<float > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetScore(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetScoresSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetScoresSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1ResizeScores(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeScores(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1SetScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetScore(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetForceCalls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<affxchp::ForceCallType > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    {
        std::vector<affxchp::ForceCallType > const &_result_ref = (arg1)->GetForceCalls();
        result = (std::vector<affxchp::ForceCallType > *) &_result_ref;
    }
    
    *(std::vector<affxchp::ForceCallType > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetForceCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::ForceCallType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetForceCall(arg2);
    
    *(affxchp::ForceCallType **)(void *)&jresult = new affxchp::ForceCallType((affxchp::ForceCallType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetForceCallsSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetForceCallsSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1ResizeForceCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeForceCalls(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1SetForceCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::ForceCallType arg3 ;
    affxchp::ForceCallType *argp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    argp3 = *(affxchp::ForceCallType **)(void *)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affxchp::ForceCallType");
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetForceCall(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetOrigCalls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    std::vector<affxchp::BaseCallType > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    {
        std::vector<affxchp::BaseCallType > const &_result_ref = (arg1)->GetOrigCalls();
        result = (std::vector<affxchp::BaseCallType > *) &_result_ref;
    }
    
    *(std::vector<affxchp::BaseCallType > **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetOrigCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::BaseCallType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetOrigCall(arg2);
    
    *(affxchp::BaseCallType **)(void *)&jresult = new affxchp::BaseCallType((affxchp::BaseCallType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CResequencingResults_1GetOrigCallsSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    result = (int)((affxchp::CResequencingResults const *)arg1)->GetOrigCallsSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1ResizeOrigCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->ResizeOrigCalls(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CResequencingResults_1SetOrigCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
    int arg2 ;
    affxchp::BaseCallType arg3 ;
    affxchp::BaseCallType *argp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    argp3 = *(affxchp::BaseCallType **)(void *)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affxchp::BaseCallType");
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetOrigCall(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CCHPFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxchp::CCHPFileData *)new affxchp::CCHPFileData();
    
    *(affxchp::CCHPFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CCHPFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    affxchp::CCHPFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    {
        affxchp::CCHPFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affxchp::CCHPFileHeader *) &_result_ref;
    }
    
    *(affxchp::CCHPFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetExpressionResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CExpressionProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CExpressionProbeSetResults *)(arg1)->GetExpressionResults(arg2);
    
    *(affxchp::CExpressionProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetGenotypingResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CGenotypeProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CGenotypeProbeSetResults *)(arg1)->GetGenotypingResults(arg2);
    
    *(affxchp::CGenotypeProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetUniversalResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    int arg2 ;
    affxchp::CUniversalProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxchp::CUniversalProbeSetResults *)(arg1)->GetUniversalResults(arg2);
    
    *(affxchp::CUniversalProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetResequencingResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    affxchp::CResequencingResults *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = (affxchp::CResequencingResults *)(arg1)->GetResequencingResults();
    
    *(affxchp::CResequencingResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCHPFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCHPFileData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCHPFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CCHPFileData_1IsXDACompatibleFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->IsXDACompatibleFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CCHPFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    result = ((affxchp::CCHPFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CCHPFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxchp::CCHPFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1dValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (double)jarg2; 
    if (arg1) (arg1)->dValue = arg2;
    
}


JNIEXPORT jdouble JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1dValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (double) ((arg1)->dValue);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1fValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->fValue = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1fValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (float) ((arg1)->fValue);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1iValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->iValue = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1iValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (int) ((arg1)->iValue);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1sValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->sValue = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1sValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (short) ((arg1)->sValue);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1cValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (char)jarg2; 
    if (arg1) (arg1)->cValue = arg2;
    
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1cValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (char) ((arg1)->cValue);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1uiValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->uiValue = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1uiValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->uiValue);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1usValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (unsigned short)jarg2; 
    if (arg1) (arg1)->usValue = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1usValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (unsigned short) ((arg1)->usValue);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1BarSequenceResultData_1ucValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->ucValue = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1BarSequenceResultData_1ucValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->ucValue);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1BarSequenceResultData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbar::BarSequenceResultData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbar::BarSequenceResultData *)new affxbar::BarSequenceResultData();
    
    *(affxbar::BarSequenceResultData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1BarSequenceResultData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::BarSequenceResultData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CGDACSequenceResultItem(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbar::CGDACSequenceResultItem *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbar::CGDACSequenceResultItem *)new affxbar::CGDACSequenceResultItem();
    
    *(affxbar::CGDACSequenceResultItem **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CGDACSequenceResultItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetVersion();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetGroupName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetGroupName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetNumberDataPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberDataPoints();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetNumberColumns(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberColumns();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    affxbar::GDACFILES_BAR_DATA_TYPE result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxbar::GDACFILES_BAR_DATA_TYPE)((affxbar::CGDACSequenceResultItem const *)arg1)->GetColumnType(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    int arg3 ;
    affxbar::BarSequenceResultData *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxbar::BarSequenceResultData **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbar::BarSequenceResultData & reference is null");
        return ;
    } 
    (arg1)->GetData(arg2,arg3,*arg4);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetNumberParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1GetParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    TagValuePairType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    {
        TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
        result = (TagValuePairType *) &_result_ref;
    }
    
    *(TagValuePairType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1SetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetVersion((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1SetGroupName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetGroupName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1SetNumberDataPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumberDataPoints(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1SetDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    int arg2 ;
    int arg3 ;
    affxbar::BarSequenceResultData *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affxbar::BarSequenceResultData **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbar::BarSequenceResultData & reference is null");
        return ;
    } 
    (arg1)->SetDataPoint(arg2,arg3,*arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceResultItem_1AddParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    } 
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    arg2 =  std::string(arg2_pstr);
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    if(!jarg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    } 
    const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
    if (!arg3_pstr) return ;
    arg3 =  std::string(arg3_pstr);
    jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
    (arg1)->AddParameter(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CBARFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbar::CBARFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbar::CBARFileData *)new affxbar::CBARFileData();
    
    *(affxbar::CBARFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CBARFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CBARFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = ((affxbar::CBARFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBARFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBARFileData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBARFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CBARFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = ((affxbar::CBARFileData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CBARFileData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (float)((affxbar::CBARFileData const *)arg1)->GetVersion();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CBARFileData_1GetNumberSequences(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberSequences();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CBARFileData_1GetNumberColumns(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberColumns();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CBARFileData_1GetNumberParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CBARFileData_1GetParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    TagValuePairType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    {
        TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
        result = (TagValuePairType *) &_result_ref;
    }
    
    *(TagValuePairType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CBARFileData_1GetColumnTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::GDACFILES_BAR_DATA_TYPE *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    {
        affxbar::GDACFILES_BAR_DATA_TYPE &_result_ref = (arg1)->GetColumnTypes(arg2);
        result = (affxbar::GDACFILES_BAR_DATA_TYPE *) &_result_ref;
    }
    
    *(affxbar::GDACFILES_BAR_DATA_TYPE **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1GetResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::CGDACSequenceResultItem *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxbar::CGDACSequenceResultItem **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbar::CGDACSequenceResultItem & reference is null");
        return ;
    } 
    (arg1)->GetResults(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1AddAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1AddColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    affxbar::GDACFILES_BAR_DATA_TYPE arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (affxbar::GDACFILES_BAR_DATA_TYPE)jarg2; 
    (arg1)->AddColumn(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBARFileData_1SetNumberSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetNumberSequences(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CBARFileData_1GetResultsPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
    int arg2 ;
    affxbar::CGDACSequenceResultItem *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbar::CBARFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxbar::CGDACSequenceResultItem *)(arg1)->GetResultsPtr(arg2);
    
    *(affxbar::CGDACSequenceResultItem **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1BPMAP_1FILE_1HEADER_1BYTES(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "PHT7\r\n\32\n";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1BPMAP_1FILE_1HEADER_1LEN(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 8;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PM_1ONLY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PM_1MM(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 0;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1PROBE_1STORAGE_1BUFFER_1LENGTH(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 7;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1PMX(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->PMX = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1PMX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->PMX);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1PMY(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->PMY = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1PMY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->PMY);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1MMX(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->MMX = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1MMX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->MMX);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1MMY(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->MMY = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1MMY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->MMY);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1MatchScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->MatchScore = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1MatchScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (float) ((arg1)->MatchScore);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    if (arg1) (arg1)->Position = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned int) ((arg1)->Position);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1PMProbe(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->PMProbe = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1PMProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->PMProbe);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1ProbeLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->ProbeLength = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1ProbeLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->ProbeLength);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1TopStrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = (unsigned char)jarg2; 
    if (arg1) (arg1)->TopStrand = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1TopStrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    unsigned char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (unsigned char) ((arg1)->TopStrand);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_GDACSequenceHitItemType_1_1GDACSequenceHitItemType_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    affxbpmap::_GDACSequenceHitItemType *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    arg2 = *(affxbpmap::_GDACSequenceHitItemType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbpmap::_GDACSequenceHitItemType const & reference is null");
        return 0;
    } 
    result = (bool)((affxbpmap::GDACSequenceHitItemType const *)arg1)->operator <((affxbpmap::_GDACSequenceHitItemType const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1GDACSequenceHitItemType_1PackedPMProbe(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        if (arg2) strncpy(arg1->PackedPMProbe,arg2,7+1);
        else arg1->PackedPMProbe[0] = 0;
    }
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1GDACSequenceHitItemType_1PackedPMProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    result = (char *)(char *) ((arg1)->PackedPMProbe);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1GDACSequenceHitItemType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbpmap::GDACSequenceHitItemType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbpmap::GDACSequenceHitItemType *)new affxbpmap::GDACSequenceHitItemType();
    
    *(affxbpmap::GDACSequenceHitItemType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1GDACSequenceHitItemType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1HIT_1ITEM_1SIZE_1WITH_1PROBE_1PAIRS(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (4+4+4+4+1+7+4+4+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1HIT_1ITEM_1SIZE_1WITH_1PM_1ONLY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) (4+4+1+7+4+4+1);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CGDACSequenceItem(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbpmap::CGDACSequenceItem *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbpmap::CGDACSequenceItem *)new affxbpmap::CGDACSequenceItem();
    
    *(affxbpmap::CGDACSequenceItem **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CGDACSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GroupName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GroupName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetSeqVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetSeqVersion();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetProbeMapping(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetProbeMapping();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetNumberHits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberHits();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetNumberParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    TagValuePairType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetParameter(arg2);
    
    *(TagValuePairType **)(void *)&jresult = new TagValuePairType((TagValuePairType &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetHitItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jboolean jarg4) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
    bool arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbpmap::GDACSequenceHitItemType & reference is null");
        return ;
    } 
    arg4 = jarg4 ? true : false; 
    (arg1)->GetHitItem(arg2,*arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGDACSequenceItem_1GetHitItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
    int arg2 ;
    affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxbpmap::GDACSequenceHitItemType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbpmap::GDACSequenceHitItemType & reference is null");
        return ;
    } 
    (arg1)->GetHitItem(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CBPMAPFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxbpmap::CBPMAPFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxbpmap::CBPMAPFileData *)new affxbpmap::CBPMAPFileData();
    
    *(affxbpmap::CBPMAPFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CBPMAPFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1GetNumberSequences(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = (int)((affxbpmap::CBPMAPFileData const *)arg1)->GetNumberSequences();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    result = (float)((affxbpmap::CBPMAPFileData const *)arg1)->GetVersion();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CBPMAPFileData_1GetSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
    int arg2 ;
    affxbpmap::CGDACSequenceItem *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxbpmap::CBPMAPFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affxbpmap::CGDACSequenceItem **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxbpmap::CGDACSequenceItem & reference is null");
        return ;
    } 
    (arg1)->GetSequenceItem(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CEXPFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxexp::CEXPFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxexp::CEXPFileData *)new affxexp::CEXPFileData();
    
    *(affxexp::CEXPFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CEXPFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CEXPFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CEXPFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    result = ((affxexp::CEXPFileData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CEXPFileData_1GetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    result = ((affxexp::CEXPFileData const *)arg1)->GetArrayType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CEXPFileData_1SetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetArrayType((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CEXPFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CEXPFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CEXPFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CEXPFileData_1GetScanParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetScanParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    *(TagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CEXPFileData_1GetHybParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetHybParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    *(TagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_CEXPFileData_1GetSampleParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
    TagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxexp::CEXPFileData **)(void *)&jarg1; 
    {
        TagValuePairTypeList &_result_ref = (arg1)->GetSampleParameters();
        result = (TagValuePairTypeList *) &_result_ref;
    }
    
    *(TagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1GRC_1VERSION(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1GRC_1MAGIC(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 129;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CGRCFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxgrc::CGRCFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxgrc::CGRCFileData *)new affxgrc::CGRCFileData();
    
    *(affxgrc::CGRCFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CGRCFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxgrc::CGRCFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CGRCFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxgrc::CGRCFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CGRCFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxgrc::CGRCFileData **)(void *)&jarg1; 
    {
        std::string const &_result_ref = ((affxgrc::CGRCFileData const *)arg1)->GetFileName();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CGRCFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    affymetrix_grid_control::GridControlData *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxgrc::CGRCFileData **)(void *)&jarg1; 
    arg2 = *(affymetrix_grid_control::GridControlData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_grid_control::GridControlData & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->Read(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CGRCFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxgrc::CGRCFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ProbeSetIndiciesType_1probeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::ProbeSetIndiciesType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->probeSetName = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ProbeSetIndiciesType_1probeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::ProbeSetIndiciesType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->probeSetName);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ProbeSetIndiciesType_1indicies(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::list<int > arg2 ;
    std::list<int > *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::ProbeSetIndiciesType **)(void *)&jarg1; 
    argp2 = *(std::list<int > **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list<int >");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->indicies = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ProbeSetIndiciesType_1indicies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    std::list<int > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::ProbeSetIndiciesType **)(void *)&jarg1; 
    result =  ((arg1)->indicies);
    
    *(std::list<int > **)(void *)&jresult = new std::list<int >((std::list<int > &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ProbeSetIndiciesType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxmsk::ProbeSetIndiciesType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxmsk::ProbeSetIndiciesType *)new affxmsk::ProbeSetIndiciesType();
    
    *(affxmsk::ProbeSetIndiciesType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ProbeSetIndiciesType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::ProbeSetIndiciesType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CMSKFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxmsk::CMSKFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxmsk::CMSKFileData *)new affxmsk::CMSKFileData();
    
    *(affxmsk::CMSKFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CMSKFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CMSKFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetFileName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetArrayType();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetProbeSetIndiciesListCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetIndiciesListCount();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetProbeSetListCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetListCount();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = ((affxmsk::CMSKFileData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetProbeSetIndiciesIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    affxmsk::ProbeSetIndiciesListConstIt *arg2 = 0 ;
    affxmsk::ProbeSetIndiciesListConstIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    arg2 = *(affxmsk::ProbeSetIndiciesListConstIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxmsk::ProbeSetIndiciesListConstIt & reference is null");
        return ;
    } 
    arg3 = *(affxmsk::ProbeSetIndiciesListConstIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxmsk::ProbeSetIndiciesListConstIt & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetIndiciesIterators(*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CMSKFileData_1GetProbeSetIterators(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    affxmsk::ProbeSetListConstIt *arg2 = 0 ;
    affxmsk::ProbeSetListConstIt *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    arg2 = *(affxmsk::ProbeSetListConstIt **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxmsk::ProbeSetListConstIt & reference is null");
        return ;
    } 
    arg3 = *(affxmsk::ProbeSetListConstIt **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxmsk::ProbeSetListConstIt & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetIterators(*arg2,*arg3);
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CMSKFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CMSKFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CMSKFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxmsk::CMSKFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ProbeSetInfo_1probeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::ProbeSetInfo **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->probeSetName = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1ProbeSetInfo_1probeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::ProbeSetInfo **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->probeSetName);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1ProbeSetInfo_1numberPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::ProbeSetInfo **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->numberPairs = arg2;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1ProbeSetInfo_1numberPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::ProbeSetInfo **)(void *)&jarg1; 
    result = (int) ((arg1)->numberPairs);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1ProbeSetInfo(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxpsi::ProbeSetInfo *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxpsi::ProbeSetInfo *)new affxpsi::ProbeSetInfo();
    
    *(affxpsi::ProbeSetInfo **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1ProbeSetInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::ProbeSetInfo **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1CPSIFileData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affxpsi::CPSIFileData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affxpsi::CPSIFileData *)new affxpsi::CPSIFileData();
    
    *(affxpsi::CPSIFileData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1CPSIFileData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CPSIFileData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CPSIFileData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    result = (char *)((affxpsi::CPSIFileData const *)arg1)->GetFileName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CPSIFileData_1GetProbeSetCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbeSetCount();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_CPSIFileData_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((affxpsi::CPSIFileData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_CPSIFileData_1GetProbePairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbePairs(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CPSIFileData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_CPSIFileData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_CPSIFileData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affxpsi::CPSIFileData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1GCOS_1SAMPLE_1NAME_1PARAMETER_1NAME(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "GCOS Sample Name";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1GCOS_1SAMPLE_1TYPE_1PARAMETER_1NAME(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "GCOS Sample Type";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_get_1GCOS_1SAMPLE_1PROJECT_1PARAMETER_1NAME(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "GCOS Sample Project";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1AttributeNameValueType_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->name = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1AttributeNameValueType_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->name);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1AttributeNameValueType_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->value = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1AttributeNameValueType_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->value);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1AttributeNameValueType_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    arg2 = *(std::string **)(void *)&jarg2; 
    if (arg1) (arg1)->type = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1AttributeNameValueType_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    result = (std::string *)& ((arg1)->type);
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1AttributeNameValueType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_dttarray::AttributeNameValueType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_dttarray::AttributeNameValueType *)new affymetrix_dttarray::AttributeNameValueType();
    
    *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1AttributeNameValueType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::AttributeNameValueType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DttArrayData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_dttarray::DttArrayData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_dttarray::DttArrayData *)new affymetrix_dttarray::DttArrayData();
    
    *(affymetrix_dttarray::DttArrayData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DttArrayData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_DttArrayData_1GetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetArrayType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DttArrayData_1SetArrayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetArrayType((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_DttArrayData_1GetExperimentName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetExperimentName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DttArrayData_1SetExperimentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetExperimentName((std::string const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_DttArrayData_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    affymetrix_dttarray::AttributeNameValueTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    {
        affymetrix_dttarray::AttributeNameValueTypeList &_result_ref = (arg1)->Attributes();
        result = (affymetrix_dttarray::AttributeNameValueTypeList *) &_result_ref;
    }
    
    *(affymetrix_dttarray::AttributeNameValueTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DttArrayData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1DttArrayFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_dttarray::DttArrayFileReader *)new affymetrix_dttarray::DttArrayFileReader();
    
    *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1DttArrayFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_DttArrayFileReader_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jarg1; 
    result = ((affymetrix_dttarray::DttArrayFileReader const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_DttArrayFileReader_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DttArrayFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    affymetrix_dttarray::DttArrayData *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jarg1; 
    arg2 = *(affymetrix_dttarray::DttArrayData **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_dttarray::DttArrayData & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->Read(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_DttArrayFileReader_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_dttarray::DttArrayFileReader **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FusionTagValuePairType_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Tag = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FusionTagValuePairType_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    result =  ((arg1)->Tag);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FusionTagValuePairType_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring arg2 ;
    std::wstring *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    argp2 = *(std::wstring **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->Value = arg2;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_get_1FusionTagValuePairType_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    result =  ((arg1)->Value);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionTagValuePairType_1FusionTagValuePairType_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairType arg2 ;
    affymetrix_fusion_io::FusionTagValuePairType result;
    affymetrix_fusion_io::FusionTagValuePairType const *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    argp2 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionTagValuePairType const");
        return 0;
    }
    arg2 = *argp2; 
    result = (arg1)->operator =(arg2);
    
    *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jresult = new affymetrix_fusion_io::FusionTagValuePairType((affymetrix_fusion_io::FusionTagValuePairType &)result); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionTagValuePairType_1FusionTagValuePairType_1equals_1obj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairType arg2 ;
    bool result;
    affymetrix_fusion_io::FusionTagValuePairType const *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    argp2 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionTagValuePairType const");
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->operator ==(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionTagValuePairType_1FusionTagValuePairType_1equals_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (bool)(arg1)->operator ==((wchar_t const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionTagValuePairType_1DetailedType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    affymetrix_calvin_parameter::ParameterNameValueType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    {
        affymetrix_calvin_parameter::ParameterNameValueType &_result_ref = (arg1)->DetailedType();
        result = (affymetrix_calvin_parameter::ParameterNameValueType *) &_result_ref;
    }
    
    *(affymetrix_calvin_parameter::ParameterNameValueType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionTagValuePairType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionTagValuePairType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionTagValuePairType *)new affymetrix_fusion_io::FusionTagValuePairType();
    
    *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionTagValuePairType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionArrayFileReader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionArrayFileReader *)new affymetrix_fusion_io::FusionArrayFileReader();
    
    *(affymetrix_fusion_io::FusionArrayFileReader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionArrayFileReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionArrayFileReader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionArrayFileReader_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    std::string *arg2 = 0 ;
    affymetrix_calvin_array::ArrayData *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionArrayFileReader **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return 0;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = *(affymetrix_calvin_array::ArrayData **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_calvin_array::ArrayData & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionArrayFileReader_1DataTypeIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
    affymetrix_calvin_utilities::AffymetrixGuidType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionArrayFileReader **)(void *)&jarg1; 
    {
        affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_fusion_io::FusionArrayFileReader const *)arg1)->DataTypeIdentifier();
        result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionProbeSetResults *)new affymetrix_fusion_io::FusionProbeSetResults();
    
    *(affymetrix_fusion_io::FusionProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetDetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetectionPValue();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetSignal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignal();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetNumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumPairs();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetNumUsedPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumUsedPairs();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetDetection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetection();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1HasCompResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->HasCompResults();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChangePValue();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetSignalLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatio();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetSignalLogRatioLow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioLow();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetSignalLogRatioHigh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioHigh();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetNumCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumCommonPairs();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetChange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChange();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetDetectionPValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetDetectionPValue(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignal(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetNumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumPairs(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetNumUsedPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumUsedPairs(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetDetection(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetDetection(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetHasCompResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->SetHasCompResults(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetChangePValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetChangePValue(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetSignalLogRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatio(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetSignalLogRatioLow(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatioLow(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetSignalLogRatioHigh(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetSignalLogRatioHigh(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetNumCommonPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int16_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int16_t)jarg2; 
    (arg1)->SetNumCommonPairs(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1SetChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetChange(arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetDetectionString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetDetectionString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1GetChangeString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetChangeString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionExpressionProbeSetResults_1FusionExpressionProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jresult = new affymetrix_fusion_io::FusionExpressionProbeSetResults((affymetrix_fusion_io::FusionExpressionProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionExpressionProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)new affymetrix_fusion_io::FusionExpressionProbeSetResults();
    
    *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionExpressionProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetAlleleCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (u_int8_t)(arg1)->GetAlleleCall();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetConfidence();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetRAS1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetRAS1();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetRAS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetRAS2();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetPValueAA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetPValueAA();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetPValueAB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetPValueAB();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetPValueBB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetPValueBB();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetPValueNoCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (float)(arg1)->GetPValueNoCall();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetAlleleCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetAlleleCall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetConfidence(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetRAS1(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS1(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetRAS2(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetRAS2(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetPValueAA(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueAA(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetPValueAB(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueAB(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetPValueBB(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueBB(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1SetPValueNoCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetPValueNoCall(arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1GetAlleleCallString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    result = (arg1)->GetAlleleCallString();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionGenotypeProbeSetResults_1FusionGenotypeProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jresult = new affymetrix_fusion_io::FusionGenotypeProbeSetResults((affymetrix_fusion_io::FusionGenotypeProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionGenotypeProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)new affymetrix_fusion_io::FusionGenotypeProbeSetResults();
    
    *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionGenotypeProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionUniversalProbeSetResults_1GetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1; 
    result = (float)((affymetrix_fusion_io::FusionUniversalProbeSetResults const *)arg1)->GetBackground();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionUniversalProbeSetResults_1SetBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->SetBackground(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionUniversalProbeSetResults_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionUniversalProbeSetResults_1FusionUniversalProbeSetResults_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg2 = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & reference is null");
        return 0;
    } 
    result = (arg1)->operator =(*arg2);
    
    *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jresult = new affymetrix_fusion_io::FusionUniversalProbeSetResults((affymetrix_fusion_io::FusionUniversalProbeSetResults &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionUniversalProbeSetResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)new affymetrix_fusion_io::FusionUniversalProbeSetResults();
    
    *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionUniversalProbeSetResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionForceCallType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionForceCallType *)new affymetrix_fusion_io::FusionForceCallType();
    
    *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionForceCallType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jchar jarg2, jshort jarg3) {
    jlong jresult = 0 ;
    int32_t arg1 ;
    int8_t arg2 ;
    u_int8_t arg3 ;
    affymetrix_fusion_io::FusionForceCallType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int32_t)jarg1; 
    arg2 = (int8_t)jarg2; 
    arg3 = (u_int8_t)jarg3; 
    result = (affymetrix_fusion_io::FusionForceCallType *)new affymetrix_fusion_io::FusionForceCallType(arg1,arg2,arg3);
    
    *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionForceCallType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionForceCallType_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionForceCallType_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetPosition();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FusionForceCallType_1GetCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    result = (int8_t)(arg1)->GetCall();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionForceCallType_1GetReason(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    u_int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    result = (u_int8_t)(arg1)->GetReason();
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionForceCallType_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPosition(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionForceCallType_1SetCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionForceCallType_1SetReason(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_fusion_io::FusionForceCallType *arg1 = (affymetrix_fusion_io::FusionForceCallType *) 0 ;
    u_int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg1; 
    arg2 = (u_int8_t)jarg2; 
    (arg1)->SetReason(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionBaseCallType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionBaseCallType *)new affymetrix_fusion_io::FusionBaseCallType();
    
    *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionBaseCallType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jchar jarg2) {
    jlong jresult = 0 ;
    int32_t arg1 ;
    int8_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int32_t)jarg1; 
    arg2 = (int8_t)jarg2; 
    result = (affymetrix_fusion_io::FusionBaseCallType *)new affymetrix_fusion_io::FusionBaseCallType(arg1,arg2);
    
    *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionBaseCallType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionBaseCallType_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionBaseCallType_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    result = (int32_t)(arg1)->GetPosition();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FusionBaseCallType_1GetCall(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    result = (int8_t)(arg1)->GetCall();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionBaseCallType_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->SetPosition(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionBaseCallType_1SetCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affymetrix_fusion_io::FusionBaseCallType *arg1 = (affymetrix_fusion_io::FusionBaseCallType *) 0 ;
    int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->SetCall(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionResequencingResults(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionResequencingResults *)new affymetrix_fusion_io::FusionResequencingResults();
    
    *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionResequencingResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetCalledBases(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    Int8Vector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    {
        Int8Vector const &_result_ref = (arg1)->GetCalledBases();
        result = (Int8Vector *) &_result_ref;
    }
    
    *(Int8Vector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetCalledBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jchar jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int arg2 ;
    int8_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int8_t)(arg1)->GetCalledBase(arg2);
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetCalledBasesSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetCalledBasesSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1ResizeCalledBases(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeCalledBases(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1SetCalledBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jchar jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    int8_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    arg3 = (int8_t)jarg3; 
    (arg1)->SetCalledBase(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1AddCalledBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int8_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int8_t)jarg2; 
    (arg1)->AddCalledBase(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetScores(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    FloatVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    {
        FloatVector const &_result_ref = (arg1)->GetScores();
        result = (FloatVector *) &_result_ref;
    }
    
    *(FloatVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (float)(arg1)->GetScore(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetScoresSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetScoresSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1ResizeScores(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeScores(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1SetScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    (arg1)->SetScore(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1AddScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->AddScore(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetForceCalls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionForceCallVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::FusionForceCallVector const &_result_ref = (arg1)->GetForceCalls();
        result = (affymetrix_fusion_io::FusionForceCallVector *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::FusionForceCallVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetForceCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionForceCallType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetForceCall(arg2);
    
    *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jresult = new affymetrix_fusion_io::FusionForceCallType((affymetrix_fusion_io::FusionForceCallType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetForceCallsSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetForceCallsSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1ResizeForceCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeForceCalls(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1SetForceCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionForceCallType arg3 ;
    affymetrix_fusion_io::FusionForceCallType *argp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    argp3 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionForceCallType");
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetForceCall(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1AddForceCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionForceCallType arg2 ;
    affymetrix_fusion_io::FusionForceCallType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    argp2 = *(affymetrix_fusion_io::FusionForceCallType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionForceCallType");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->AddForceCall(arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetOrigCalls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionBaseCallVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::FusionBaseCallVector const &_result_ref = (arg1)->GetOrigCalls();
        result = (affymetrix_fusion_io::FusionBaseCallVector *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::FusionBaseCallVector **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetOrigCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    result = (arg1)->GetOrigCall(arg2);
    
    *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jresult = new affymetrix_fusion_io::FusionBaseCallType((affymetrix_fusion_io::FusionBaseCallType &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1GetOrigCallsSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    result = (int32_t)((affymetrix_fusion_io::FusionResequencingResults const *)arg1)->GetOrigCallsSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1ResizeOrigCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    (arg1)->ResizeOrigCalls(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1SetOrigCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    int32_t arg2 ;
    affymetrix_fusion_io::FusionBaseCallType arg3 ;
    affymetrix_fusion_io::FusionBaseCallType *argp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    arg2 = (int32_t)jarg2; 
    argp3 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionBaseCallType");
        return ;
    }
    arg3 = *argp3; 
    (arg1)->SetOrigCall(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionResequencingResults_1AddOrigCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionResequencingResults *arg1 = (affymetrix_fusion_io::FusionResequencingResults *) 0 ;
    affymetrix_fusion_io::FusionBaseCallType arg2 ;
    affymetrix_fusion_io::FusionBaseCallType *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg1; 
    argp2 = *(affymetrix_fusion_io::FusionBaseCallType **)(void *)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null affymetrix_fusion_io::FusionBaseCallType");
        return ;
    }
    arg2 = *argp2; 
    (arg1)->AddOrigCall(arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFFileHeader_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFFileHeader_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFFileHeader_1GetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFFileHeader_1GetNumQCProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumQCProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCDFFileHeader_1GetReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    {
        std::string &_result_ref = (arg1)->GetReference();
        result = (std::string *) &_result_ref;
    }
    
    *(std::string **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFFileHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFFileHeader *)new affymetrix_fusion_io::FusionCDFFileHeader();
    
    *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFFileHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetListIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetListIndex();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetExpos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetExpos();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetPBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetPBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jchar JNICALL Java_affx_1fusionJNI_FusionCDFProbeInformation_1GetTBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jchar jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    char result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetTBase();
    
    jresult = (jchar)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFProbeInformation *)new affymetrix_fusion_io::FusionCDFProbeInformation();
    
    *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    affxcdf::DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumLists();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStart();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStop();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    result = (arg1)->GetName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFProbeGroupInformation_1GetCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetCell(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFProbeGroupInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)new affymetrix_fusion_io::FusionCDFProbeGroupInformation();
    
    *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFProbeGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    affxcdf::GeneChipProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    affxcdf::DirectionType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetDirection();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetNumLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumLists();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumGroups();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetNumCellsPerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetProbeSetNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFProbeSetInformation_1GetGroupInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFProbeGroupInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFProbeGroupInformation & reference is null");
        return ;
    } 
    (arg1)->GetGroupInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)new affymetrix_fusion_io::FusionCDFProbeSetInformation();
    
    *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFQCProbeInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)new affymetrix_fusion_io::FusionCDFQCProbeInformation();
    
    *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFQCProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeInformation_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeInformation_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeInformation_1GetPLen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetPLen();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeInformation_1IsPerfectMatchProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeInformation_1IsBackgroundProbe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg1; 
    result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeSetInformation_1GetQCProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    affxcdf::GeneChipQCProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg1; 
    result = (affxcdf::GeneChipQCProbeSetType)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeSetInformation_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeSetInformation_1GetProbeInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFQCProbeInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFQCProbeInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)new affymetrix_fusion_io::FusionCDFQCProbeSetInformation();
    
    *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFQCProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFData *)new affymetrix_fusion_io::FusionCDFData();
    
    *(affymetrix_fusion_io::FusionCDFData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    affymetrix_fusion_io::FusionCDFFileHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::FusionCDFFileHeader &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::FusionCDFFileHeader *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::FusionCDFFileHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetError();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetProbeSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetChipType();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFData_1IsXDACompatibleFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (bool)affymetrix_fusion_io::FusionCDFData::IsXDACompatibleFile((char const *)arg1);
    
    jresult = (jboolean)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCDFData_1IsCalvinCompatibleFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    char *arg1 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (bool)affymetrix_fusion_io::FusionCDFData::IsCalvinCompatibleFile((char const *)arg1);
    
    jresult = (jboolean)result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetProbeSetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affxcdf::GeneChipProbeSetType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetType(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFData_1GetQCProbeSetInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCDFData_1FusionGetQCProbeSetInformation_1By_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
    affxcdf::GeneChipQCProbeSetType arg2 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFData **)(void *)&jarg1; 
    arg2 = (affxcdf::GeneChipQCProbeSetType)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCDFQCProbeSetInformation **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCDFQCProbeSetInformation & reference is null");
        return ;
    } 
    (arg1)->GetQCProbeSetInformation(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCDFQCProbeSetNames_1GetStaticCDFQCProbeSetName(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    affxcdf::GeneChipQCProbeSetType arg1 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (affxcdf::GeneChipQCProbeSetType)jarg1; 
    result = affymetrix_fusion_io::FusionCDFQCProbeSetNames::GetStaticCDFQCProbeSetName(arg1);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCDFQCProbeSetNames(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCDFQCProbeSetNames *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *)new affymetrix_fusion_io::FusionCDFQCProbeSetNames();
    
    *(affymetrix_fusion_io::FusionCDFQCProbeSetNames **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCDFQCProbeSetNames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCDFQCProbeSetNames *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCDFQCProbeSetNames **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1FusionCELData_1CEL_1ALL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_ALL;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1FusionCELData_1CEL_1DATA(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_DATA;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1FusionCELData_1CEL_1OUTLIER(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_OUTLIER;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_get_1FusionCELData_1CEL_1MASK(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)affymetrix_fusion_io::FusionCELData::CEL_MASK;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCELData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCELData *)new affymetrix_fusion_io::FusionCELData();
    
    *(affymetrix_fusion_io::FusionCELData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCELData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCELData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCELData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetError((wchar_t const *)arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetError();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetHeaderKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetHeader();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetAlg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetAlg();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetParams();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetAlgorithmParameterTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetNumberAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::FusionTagValuePairTypeList &_result_ref = (arg1)->GetParameters();
        result = (affymetrix_fusion_io::FusionTagValuePairTypeList *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (arg1)->GetChipType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetCellMargin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetNumOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (unsigned int)(arg1)->GetNumOutliers();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetNumMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (unsigned int)(arg1)->GetNumMasked();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1IndexToX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1IndexToY(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1XYToIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1XYToIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    result = (int)affymetrix_fusion_io::FusionCELData::XYToIndex(arg1,arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1GetEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    FusionCELFileEntryType *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(FusionCELFileEntryType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FusionCELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1GetEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    FusionCELFileEntryType *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(FusionCELFileEntryType **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FusionCELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionCELData_1GetIntensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionCELData_1GetIntensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionCELData_1GetStdv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_FusionCELData_1GetStdv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionCELData_1GetPixels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_FusionCELData_1GetPixels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1IsMasked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1IsMasked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1IsOutlier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1IsOutlier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCELData_1GetFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (unsigned int)(arg1)->GetFileSize();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1ReadEx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1ReadEx_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (bool)(arg1)->ReadEx((char const *)arg2);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCELData_1ReadEx_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadEx();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCELData_1GetReadState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetAlgorithmName((wchar_t const *)arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1AddAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wchar_t *arg3 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    arg3 = *(wchar_t **)(void *)&jarg3; 
    (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetChipType((wchar_t const *)arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCELData_1SetMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FusionCELFileEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Intensity = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1FusionCELFileEntryType_1Intensity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    result = (float) ((arg1)->Intensity);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FusionCELFileEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    arg2 = (float)jarg2; 
    if (arg1) (arg1)->Stdv = arg2;
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_get_1FusionCELFileEntryType_1Stdv(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    result = (float) ((arg1)->Stdv);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_set_1FusionCELFileEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    short arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    arg2 = (short)jarg2; 
    if (arg1) (arg1)->Pixels = arg2;
    
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_get_1FusionCELFileEntryType_1Pixels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    result = (short) ((arg1)->Pixels);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCELFileEntryType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCELFileEntryType *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCELFileEntryType *)new affymetrix_fusion_io::FusionCELFileEntryType();
    
    *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCELFileEntryType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1CanReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (bool)(arg1)->CanReadFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFileName((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCELDataAdapter const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetError((wchar_t const *)arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetError();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetHeaderKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumCells();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetHeader();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetAlg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetAlg();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetParams();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetAlgorithmParameterTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->GetAlgorithmParameterTag(arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetNumberAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetNumberAlgorithmParameters();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetAlgorithmParameters();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    (arg1)->GetParameters(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (arg1)->GetChipType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetCellMargin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetCellMargin();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetNumOutliers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (unsigned int)(arg1)->GetNumOutliers();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetNumMasked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (unsigned int)(arg1)->GetNumMasked();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IndexToX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToX(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IndexToY(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->IndexToY(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1XYToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->XYToIndex(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    affymetrix_fusion_io::FusionCELFileEntryType *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(affymetrix_fusion_io::FusionCELFileEntryType **)(void *)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionCELFileEntryType & reference is null");
        return ;
    } 
    (arg1)->GetEntry(arg2,arg3,*arg4);
    
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetIntensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetIntensity(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetIntensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetIntensity(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetStdv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)(arg1)->GetStdv(arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetStdv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jfloat jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (float)(arg1)->GetStdv(arg2,arg3);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetPixels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (short)(arg1)->GetPixels(arg2);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jshort JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetPixels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jshort jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    short result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (short)(arg1)->GetPixels(arg2,arg3);
    
    jresult = (jshort)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IsMasked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsMasked(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IsMasked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsMasked(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IsOutlier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->IsOutlier(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1IsOutlier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->IsOutlier(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    (arg1)->Close();
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    bool arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = jarg2 ? true : false; 
    result = (bool)(arg1)->Read(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1ReadEx(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (int)jarg3; 
    result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1GetReadState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    result = (int)(arg1)->GetReadState();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetAlgorithmName((wchar_t const *)arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1AddAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wchar_t *arg3 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    arg3 = *(wchar_t **)(void *)&jarg3; 
    (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->SetDimensions(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    (arg1)->SetChipType((wchar_t const *)arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCELDataAdapter_1SetMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->SetMargin(arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1IFusionCELDataAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCELDataAdapter **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ConvertFusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg1 = 0 ;
    TagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    arg2 = *(TagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagValuePairTypeList & reference is null");
        return ;
    } 
    affymetrix_fusion_io::ConvertFusion(*arg1,*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_ConvertGCOS(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    TagValuePairTypeList *arg1 = 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TagValuePairTypeList **)(void *)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagValuePairTypeList & reference is null");
        return ;
    } 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    affymetrix_fusion_io::ConvertGCOS(*arg1,*arg2);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetNumProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAssayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::AssayType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAssayType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetChipType();
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgName();
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgVersion();
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    (arg1)->GetAlgorithmParameters(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAlgorithmParameterCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (u_int32_t)(arg1)->GetAlgorithmParameterCount();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetSummaryParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    (arg1)->GetSummaryParameters(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetParentCellFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetParentCellFile();
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetProgID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetProgID();
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetSummaryParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
    
    *(wstring **)(void *)&jresult = new wstring((wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetBackgroundZoneInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneInfo *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneInfo & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZoneInfo(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetBackgroundZones(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneTypeList & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZones(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetBackgroundZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    affxchp::BackgroundZoneType *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneType & reference is null");
        return ;
    } 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetMagic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetMagic();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_IFusionCHPHeaderAdapter_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1IFusionCHPHeaderAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    affymetrix_fusion_io::IFusionCHPHeaderAdapter *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::IFusionCHPHeaderAdapter **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1CanReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    result = (bool)(arg1)->CanReadFile();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetExpressionResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetExpressionResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetGenotypingResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetGenotypingResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetUniversalResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetUniversalResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetResequencingResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    affymetrix_fusion_io::FusionResequencingResults *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionResequencingResults **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionResequencingResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetResequencingResults(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    (arg1)->SetFileName((std::string const &)*arg2);
    
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::IFusionCHPDataAdapter const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_IFusionCHPDataAdapter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1IFusionCHPDataAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::IFusionCHPDataAdapter **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCHPHeader(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCHPHeader *)new affymetrix_fusion_io::FusionCHPHeader();
    
    *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCHPHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetCols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetCols();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetRows();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetNumProbeSets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetNumProbeSets();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetAssayType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::AssayType result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAssayType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetChipType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetChipType();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetAlgName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgName();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetAlgVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgVersion();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1AlgorithmParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    (arg1)->AlgorithmParameters(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1AlgorithmParameterCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    u_int32_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (u_int32_t)(arg1)->AlgorithmParameterCount();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1SummaryParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(affymetrix_fusion_io::FusionTagValuePairTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionTagValuePairTypeList & reference is null");
        return ;
    } 
    (arg1)->SummaryParameters(*arg2);
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetParentCellFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetParentCellFile();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetProgID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetProgID();
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetAlgorithmParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetSummaryParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    std::wstring result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(wchar_t **)(void *)&jarg2; 
    result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
    
    *(std::wstring **)(void *)&jresult = new std::wstring((std::wstring &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetBackgroundZoneInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneInfo *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneInfo **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneInfo & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZoneInfo(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetBackgroundZones(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneTypeList *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneTypeList **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneTypeList & reference is null");
        return ;
    } 
    (arg1)->GetBackgroundZones(*arg2);
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetBackgroundZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    affxchp::BackgroundZoneType *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    arg2 = *(affxchp::BackgroundZoneType **)(void *)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affxchp::BackgroundZoneType & reference is null");
        return ;
    } 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetMagic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetMagic();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetVersion();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPHeader_1CheckAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jarg1; 
    ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->CheckAdapter();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_new_1FusionCHPData(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *result;
    
    (void)jenv;
    (void)jcls;
    result = (affymetrix_fusion_io::FusionCHPData *)new affymetrix_fusion_io::FusionCHPData();
    
    *(affymetrix_fusion_io::FusionCHPData **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_delete_1FusionCHPData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1GetExpressionResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionExpressionProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionExpressionProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetExpressionResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1GetGenotypingResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionGenotypeProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetGenotypingResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1GetUniversalResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    int arg2 ;
    affymetrix_fusion_io::FusionUniversalProbeSetResults *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "affymetrix_fusion_io::FusionUniversalProbeSetResults & reference is null");
        return 0;
    } 
    result = (bool)(arg1)->GetUniversalResults(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    result = (bool)(arg1)->Read();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1ReadHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    result = (bool)(arg1)->ReadHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_affx_1fusionJNI_FusionCHPData_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    result = (bool)(arg1)->Exists();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPData_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->SetFileName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_affx_1fusionJNI_FusionCHPData_1GetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    result = ((affymetrix_fusion_io::FusionCHPData const *)arg1)->GetFileName();
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    (arg1)->Clear();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPData_1CheckAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    ((affymetrix_fusion_io::FusionCHPData const *)arg1)->CheckAdapter();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPData_1CreateAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    (arg1)->CreateAdapter();
    
}


JNIEXPORT void JNICALL Java_affx_1fusionJNI_FusionCHPData_1DeleteAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    (arg1)->DeleteAdapter();
    
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_FusionCHPData_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
    affymetrix_fusion_io::FusionCHPHeader *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(affymetrix_fusion_io::FusionCHPData **)(void *)&jarg1; 
    {
        affymetrix_fusion_io::FusionCHPHeader &_result_ref = (arg1)->GetHeader();
        result = (affymetrix_fusion_io::FusionCHPHeader *) &_result_ref;
    }
    
    *(affymetrix_fusion_io::FusionCHPHeader **)(void *)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGNotImplementedExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::NotImplementedException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFormatExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::FormatException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGParameterMismatchExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::ParameterMismatchException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUnexpectedParameterExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::UnexpectedParameterException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGOutOfRangeParameterExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::OutOfRangeParameterException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGByteColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::ByteColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUByteColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::UByteColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGShortColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::ShortColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUShortColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::UShortColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGIntColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::IntColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUIntColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::UIntColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFloatColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::FloatColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGASCIIColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::ASCIIColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUnicodeColumnTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ColumnType **)(void *)&baseptr = *(affymetrix_calvin_io::UnicodeColumnType **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGDataSetNotOpenExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::DataSetNotOpenException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGColumnIndexOutOfBoundsExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGRowIndexOutOfBoundsExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::RowIndexOutOfBoundsException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUnexpectedColumnTypeExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::UnexpectedColumnTypeException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGDataGroupNotFoundExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::DataGroupNotFoundException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGDataSetNotFoundExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::DataSetNotFoundException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGProbeSetNotFoundExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::ProbeSetNotFoundException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGCDFAccessNotSupportedByModeExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFileNotFoundExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::FileNotFoundException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGInvalidVersionExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::InvalidVersionException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGInvalidFileTypeExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::InvalidFileTypeException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGUnableToOpenFileExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::UnableToOpenFileException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFileNotOpenExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_exceptions::CalvinException **)(void *)&baseptr = *(affymetrix_calvin_exceptions::FileNotOpenException **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGTemplateFileReaderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_io::ArrayFileReader **)(void *)&baseptr = *(affymetrix_calvin_io::TemplateFileReader **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGTemplateDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_calvin_array::ArrayData **)(void *)&baseptr = *(affymetrix_calvin_array::TemplateData **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGCExpressionProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affxchp::CProbeSetResults **)(void *)&baseptr = *(affxchp::CExpressionProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGCGenotypeProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affxchp::CProbeSetResults **)(void *)&baseptr = *(affxchp::CGenotypeProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGCUniversalProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affxchp::CProbeSetResults **)(void *)&baseptr = *(affxchp::CUniversalProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFusionExpressionProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_fusion_io::FusionProbeSetResults **)(void *)&baseptr = *(affymetrix_fusion_io::FusionExpressionProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFusionGenotypeProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_fusion_io::FusionProbeSetResults **)(void *)&baseptr = *(affymetrix_fusion_io::FusionGenotypeProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_affx_1fusionJNI_SWIGFusionUniversalProbeSetResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(affymetrix_fusion_io::FusionProbeSetResults **)(void *)&baseptr = *(affymetrix_fusion_io::FusionUniversalProbeSetResults **)(void *)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

