/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class CDFFileReader {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CDFFileReader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CDFFileReader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionJNI.delete_CDFFileReader(swigCPtr);
    }
    swigCPtr = 0;
  }

  public CDFFileReader() {
    this(affx_fusionJNI.new_CDFFileReader(), true);
  }

  public String GetFilename() {
    return affx_fusionJNI.CDFFileReader_GetFilename(swigCPtr);
  }

  public void SetFilename(String name) {
    affx_fusionJNI.CDFFileReader_SetFilename(swigCPtr, name);
  }

  public void Read(CDFData data, CDFFileReader.ReadMode mode) {
    affx_fusionJNI.CDFFileReader_Read__SWIG_0(swigCPtr, CDFData.getCPtr(data), mode.swigValue());
  }

  public void Read(CDFData data) {
    affx_fusionJNI.CDFFileReader_Read__SWIG_1(swigCPtr, CDFData.getCPtr(data));
  }

  public final static class ReadMode {
    public final static ReadMode ReadSequential = new ReadMode("ReadSequential");
    public final static ReadMode ReadByProbeSetNumber = new ReadMode("ReadByProbeSetNumber");
    public final static ReadMode ReadByProbeSetName = new ReadMode("ReadByProbeSetName");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ReadMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ReadMode.class + " with value " + swigValue);
    }

    private ReadMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ReadMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static ReadMode[] swigValues = { ReadSequential, ReadByProbeSetNumber, ReadByProbeSetName };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
