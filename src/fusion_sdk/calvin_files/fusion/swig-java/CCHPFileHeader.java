/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class CCHPFileHeader {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CCHPFileHeader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CCHPFileHeader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      affx_fusionJNI.delete_CCHPFileHeader(swigCPtr);
    }
    swigCPtr = 0;
  }

  public CCHPFileHeader() {
    this(affx_fusionJNI.new_CCHPFileHeader(), true);
  }

  public int GetCols() {
    return affx_fusionJNI.CCHPFileHeader_GetCols(swigCPtr);
  }

  public int GetRows() {
    return affx_fusionJNI.CCHPFileHeader_GetRows(swigCPtr);
  }

  public int GetNumProbeSets() {
    return affx_fusionJNI.CCHPFileHeader_GetNumProbeSets(swigCPtr);
  }

  public CCHPFileHeader.GeneChipAssayType GetAssayType() {
    return CCHPFileHeader.GeneChipAssayType.swigToEnum(affx_fusionJNI.CCHPFileHeader_GetAssayType(swigCPtr));
  }

  public String GetChipType() {
    return affx_fusionJNI.CCHPFileHeader_GetChipType(swigCPtr);
  }

  public String GetAlgName() {
    return affx_fusionJNI.CCHPFileHeader_GetAlgName(swigCPtr);
  }

  public String GetAlgVersion() {
    return affx_fusionJNI.CCHPFileHeader_GetAlgVersion(swigCPtr);
  }

  public SWIGTYPE_p_std__listT_TagValuePairType_t AlgorithmParameters() {
    return new SWIGTYPE_p_std__listT_TagValuePairType_t(affx_fusionJNI.CCHPFileHeader_AlgorithmParameters(swigCPtr), false);
  }

  public SWIGTYPE_p_std__listT_TagValuePairType_t SummaryParameters() {
    return new SWIGTYPE_p_std__listT_TagValuePairType_t(affx_fusionJNI.CCHPFileHeader_SummaryParameters(swigCPtr), false);
  }

  public String GetParentCellFile() {
    return affx_fusionJNI.CCHPFileHeader_GetParentCellFile(swigCPtr);
  }

  public String GetProgID() {
    return affx_fusionJNI.CCHPFileHeader_GetProgID(swigCPtr);
  }

  public String GetAlgorithmParameter(String tag) {
    return affx_fusionJNI.CCHPFileHeader_GetAlgorithmParameter(swigCPtr, tag);
  }

  public String GetSummaryParameter(String tag) {
    return affx_fusionJNI.CCHPFileHeader_GetSummaryParameter(swigCPtr, tag);
  }

  public BackgroundZoneInfo GetBackgroundZoneInfo() {
    return new BackgroundZoneInfo(affx_fusionJNI.CCHPFileHeader_GetBackgroundZoneInfo(swigCPtr), false);
  }

  public SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t GetBackgroundZones() {
    return new SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t(affx_fusionJNI.CCHPFileHeader_GetBackgroundZones(swigCPtr), false);
  }

  public BackgroundZoneType GetBackgroundZone(int x, int y) {
    return new BackgroundZoneType(affx_fusionJNI.CCHPFileHeader_GetBackgroundZone(swigCPtr, x, y), true);
  }

  public int GetMagicNumber() {
    return affx_fusionJNI.CCHPFileHeader_GetMagicNumber(swigCPtr);
  }

  public int GetVersionNumber() {
    return affx_fusionJNI.CCHPFileHeader_GetVersionNumber(swigCPtr);
  }

  public void SetCols(int n) {
    affx_fusionJNI.CCHPFileHeader_SetCols(swigCPtr, n);
  }

  public void SetRows(int n) {
    affx_fusionJNI.CCHPFileHeader_SetRows(swigCPtr, n);
  }

  public void SetNumProbeSets(int n) {
    affx_fusionJNI.CCHPFileHeader_SetNumProbeSets(swigCPtr, n);
  }

  public void SetAssayType(CCHPFileHeader.GeneChipAssayType t) {
    affx_fusionJNI.CCHPFileHeader_SetAssayType(swigCPtr, t.swigValue());
  }

  public void SetChipType(String s) {
    affx_fusionJNI.CCHPFileHeader_SetChipType(swigCPtr, s);
  }

  public void SetAlgName(String s) {
    affx_fusionJNI.CCHPFileHeader_SetAlgName(swigCPtr, s);
  }

  public void SetAlgVersion(String s) {
    affx_fusionJNI.CCHPFileHeader_SetAlgVersion(swigCPtr, s);
  }

  public void SetParentCellFile(String s) {
    affx_fusionJNI.CCHPFileHeader_SetParentCellFile(swigCPtr, s);
  }

  public void SetProgID(String s) {
    affx_fusionJNI.CCHPFileHeader_SetProgID(swigCPtr, s);
  }

  public final static class GeneChipAssayType {
    public final static GeneChipAssayType Expression = new GeneChipAssayType("Expression");
    public final static GeneChipAssayType Genotyping = new GeneChipAssayType("Genotyping");
    public final static GeneChipAssayType Resequencing = new GeneChipAssayType("Resequencing");
    public final static GeneChipAssayType Universal = new GeneChipAssayType("Universal");
    public final static GeneChipAssayType Unknown = new GeneChipAssayType("Unknown");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static GeneChipAssayType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + GeneChipAssayType.class + " with value " + swigValue);
    }

    private GeneChipAssayType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private GeneChipAssayType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static GeneChipAssayType[] swigValues = { Expression, Genotyping, Resequencing, Universal, Unknown };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
