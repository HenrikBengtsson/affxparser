/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/swig/SWIG/Lib/perl5/perlrun.swg,v 1.21 2005/02/01 00:08:17 wuzzeb Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Perl_SetModule(pointer)

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

static swig_cast_info *
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  SWIG_TypeCheck_Template(sv_derived_from(rv, (char *) iter->type->name), ty);
}

/* Function for getting a pointer value */

static int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
            tmp = SvIV((SV*)SvRV(sv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

static void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

static SWIGINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

static void
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
static int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

static SWIGINLINE void
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

static SWIGINLINE void
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


static swig_module_info *
SWIG_Perl_GetModule() {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

static void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FusionCELFileEntryType swig_types[0]
#define SWIGTYPE_p_GeneChipAssayType swig_types[1]
#define SWIGTYPE_p__CoordinatePoint swig_types[2]
#define SWIGTYPE_p__GridCoordinatesType swig_types[3]
#define SWIGTYPE_p__TagValuePairType swig_types[4]
#define SWIGTYPE_p_affxbar__CBARFileData swig_types[5]
#define SWIGTYPE_p_affxbar__CGDACSequenceResultItem swig_types[6]
#define SWIGTYPE_p_affxbar___BarSequenceResultData swig_types[7]
#define SWIGTYPE_p_affxbar___GDACFILES_BAR_DATA_TYPE swig_types[8]
#define SWIGTYPE_p_affxbpmap__CBPMAPFileData swig_types[9]
#define SWIGTYPE_p_affxbpmap__CGDACSequenceItem swig_types[10]
#define SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType swig_types[11]
#define SWIGTYPE_p_affxcdf__CCDFFileData swig_types[12]
#define SWIGTYPE_p_affxcdf__CCDFFileHeader swig_types[13]
#define SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation swig_types[14]
#define SWIGTYPE_p_affxcdf__CCDFProbeInformation swig_types[15]
#define SWIGTYPE_p_affxcdf__CCDFProbeSetInformation swig_types[16]
#define SWIGTYPE_p_affxcdf__CCDFProbeSetNames swig_types[17]
#define SWIGTYPE_p_affxcdf__CCDFQCProbeInformation swig_types[18]
#define SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation swig_types[19]
#define SWIGTYPE_p_affxcel__CCELFileData swig_types[20]
#define SWIGTYPE_p_affxcel__CCELFileHeaderData swig_types[21]
#define SWIGTYPE_p_affxcel___CELFileEntryType swig_types[22]
#define SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType swig_types[23]
#define SWIGTYPE_p_affxchp__CCHPFileData swig_types[24]
#define SWIGTYPE_p_affxchp__CCHPFileHeader swig_types[25]
#define SWIGTYPE_p_affxchp__CExpressionProbeSetResults swig_types[26]
#define SWIGTYPE_p_affxchp__CGenotypeProbeSetResults swig_types[27]
#define SWIGTYPE_p_affxchp__CProbeSetResults swig_types[28]
#define SWIGTYPE_p_affxchp__CResequencingResults swig_types[29]
#define SWIGTYPE_p_affxchp__CUniversalProbeSetResults swig_types[30]
#define SWIGTYPE_p_affxchp___BackgroundZoneInfo swig_types[31]
#define SWIGTYPE_p_affxchp___BackgroundZoneType swig_types[32]
#define SWIGTYPE_p_affxchp___BaseCallType swig_types[33]
#define SWIGTYPE_p_affxchp___ForceCallType swig_types[34]
#define SWIGTYPE_p_affxexp__CEXPFileData swig_types[35]
#define SWIGTYPE_p_affxgrc__CGRCFileData swig_types[36]
#define SWIGTYPE_p_affxmsk__CMSKFileData swig_types[37]
#define SWIGTYPE_p_affxmsk__ProbeSetIndiciesList__const_iterator swig_types[38]
#define SWIGTYPE_p_affxmsk__ProbeSetList__const_iterator swig_types[39]
#define SWIGTYPE_p_affxmsk___ProbeSetIndiciesType swig_types[40]
#define SWIGTYPE_p_affxpsi__CPSIFileData swig_types[41]
#define SWIGTYPE_p_affxpsi___ProbeSetInfo swig_types[42]
#define SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes swig_types[43]
#define SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry swig_types[44]
#define SWIGTYPE_p_affymetrix_calvin_array__ArrayData swig_types[45]
#define SWIGTYPE_p_affymetrix_calvin_array__TemplateData swig_types[46]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException swig_types[47]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException swig_types[48]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException swig_types[49]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__DataGroupNotFoundException swig_types[50]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotFoundException swig_types[51]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotOpenException swig_types[52]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotFoundException swig_types[53]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotOpenException swig_types[54]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__FormatException swig_types[55]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidFileTypeException swig_types[56]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidVersionException swig_types[57]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__NotImplementedException swig_types[58]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__OutOfRangeParameterException swig_types[59]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__ParameterMismatchException swig_types[60]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__ProbeSetNotFoundException swig_types[61]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException swig_types[62]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__UnableToOpenFileException swig_types[63]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException swig_types[64]
#define SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedParameterException swig_types[65]
#define SWIGTYPE_p_affymetrix_calvin_io__ASCIIColumnType swig_types[66]
#define SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader swig_types[67]
#define SWIGTYPE_p_affymetrix_calvin_io__AuditFileReader swig_types[68]
#define SWIGTYPE_p_affymetrix_calvin_io__ByteColumnType swig_types[69]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFData swig_types[70]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader swig_types[71]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation swig_types[72]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation swig_types[73]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation swig_types[74]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation swig_types[75]
#define SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation swig_types[76]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone swig_types[77]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPData swig_types[78]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry swig_types[79]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader swig_types[80]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry swig_types[81]
#define SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry swig_types[82]
#define SWIGTYPE_p_affymetrix_calvin_io__CelFileData swig_types[83]
#define SWIGTYPE_p_affymetrix_calvin_io__CelFileReader swig_types[84]
#define SWIGTYPE_p_affymetrix_calvin_io__ColumnType swig_types[85]
#define SWIGTYPE_p_affymetrix_calvin_io__DataGroup swig_types[86]
#define SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader swig_types[87]
#define SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader swig_types[88]
#define SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader swig_types[89]
#define SWIGTYPE_p_affymetrix_calvin_io__DataSet swig_types[90]
#define SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader swig_types[91]
#define SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader swig_types[92]
#define SWIGTYPE_p_affymetrix_calvin_io__DataSetReader swig_types[93]
#define SWIGTYPE_p_affymetrix_calvin_io__FileHeader swig_types[94]
#define SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader swig_types[95]
#define SWIGTYPE_p_affymetrix_calvin_io__FileInput swig_types[96]
#define SWIGTYPE_p_affymetrix_calvin_io__FloatColumnType swig_types[97]
#define SWIGTYPE_p_affymetrix_calvin_io__GenericData swig_types[98]
#define SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader swig_types[99]
#define SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeaderReader swig_types[100]
#define SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader swig_types[101]
#define SWIGTYPE_p_affymetrix_calvin_io__GridControlFileReader swig_types[102]
#define SWIGTYPE_p_affymetrix_calvin_io__IntColumnType swig_types[103]
#define SWIGTYPE_p_affymetrix_calvin_io__ShortColumnType swig_types[104]
#define SWIGTYPE_p_affymetrix_calvin_io__TemplateFileReader swig_types[105]
#define SWIGTYPE_p_affymetrix_calvin_io__TextFileReader swig_types[106]
#define SWIGTYPE_p_affymetrix_calvin_io__UByteColumnType swig_types[107]
#define SWIGTYPE_p_affymetrix_calvin_io__UIntColumnType swig_types[108]
#define SWIGTYPE_p_affymetrix_calvin_io__UShortColumnType swig_types[109]
#define SWIGTYPE_p_affymetrix_calvin_io__UnicodeColumnType swig_types[110]
#define SWIGTYPE_p_affymetrix_calvin_io__XYCoord swig_types[111]
#define SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue swig_types[112]
#define SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType swig_types[113]
#define SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue swig_types[114]
#define SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary swig_types[115]
#define SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair swig_types[116]
#define SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue swig_types[117]
#define SWIGTYPE_p_affymetrix_calvin_utilities__AffymetrixGuid swig_types[118]
#define SWIGTYPE_p_affymetrix_calvin_utilities__CheckSum swig_types[119]
#define SWIGTYPE_p_affymetrix_calvin_utilities__DateTime swig_types[120]
#define SWIGTYPE_p_affymetrix_calvin_utilities__FPoint swig_types[121]
#define SWIGTYPE_p_affymetrix_calvin_utilities__FRect swig_types[122]
#define SWIGTYPE_p_affymetrix_calvin_utilities__FRegion swig_types[123]
#define SWIGTYPE_p_affymetrix_calvin_utilities__FileUtils swig_types[124]
#define SWIGTYPE_p_affymetrix_calvin_utilities__Point swig_types[125]
#define SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t swig_types[126]
#define SWIGTYPE_p_affymetrix_calvin_utilities__Rect swig_types[127]
#define SWIGTYPE_p_affymetrix_calvin_utilities__Region swig_types[128]
#define SWIGTYPE_p_affymetrix_calvin_utilities__StringUtils swig_types[129]
#define SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid swig_types[130]
#define SWIGTYPE_p_affymetrix_dttarray__DttArrayData swig_types[131]
#define SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader swig_types[132]
#define SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType swig_types[133]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader swig_types[134]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData swig_types[135]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader swig_types[136]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation swig_types[137]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation swig_types[138]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation swig_types[139]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation swig_types[140]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation swig_types[141]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetNames swig_types[142]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCELData swig_types[143]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType swig_types[144]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData swig_types[145]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader swig_types[146]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults swig_types[147]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults swig_types[148]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionProbeSetResults swig_types[149]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType swig_types[150]
#define SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults swig_types[151]
#define SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter swig_types[152]
#define SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter swig_types[153]
#define SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter swig_types[154]
#define SWIGTYPE_p_affymetrix_fusion_io___AssayType swig_types[155]
#define SWIGTYPE_p_affymetrix_grid_control__GridControlData swig_types[156]
#define SWIGTYPE_p_bool swig_types[157]
#define SWIGTYPE_p_char swig_types[158]
#define SWIGTYPE_p_float swig_types[159]
#define SWIGTYPE_p_int swig_types[160]
#define SWIGTYPE_p_long_long swig_types[161]
#define SWIGTYPE_p_p_char swig_types[162]
#define SWIGTYPE_p_p_void swig_types[163]
#define SWIGTYPE_p_short swig_types[164]
#define SWIGTYPE_p_size_t swig_types[165]
#define SWIGTYPE_p_std__ifstream swig_types[166]
#define SWIGTYPE_p_std__istream swig_types[167]
#define SWIGTYPE_p_std__listT_TagValuePairType_t swig_types[168]
#define SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t swig_types[169]
#define SWIGTYPE_p_std__listTaffxmsk___ProbeSetIndiciesType_t swig_types[170]
#define SWIGTYPE_p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t swig_types[171]
#define SWIGTYPE_p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t swig_types[172]
#define SWIGTYPE_p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t swig_types[173]
#define SWIGTYPE_p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t swig_types[174]
#define SWIGTYPE_p_std__listTaffymetrix_dttarray___AttributeNameValueType_t swig_types[175]
#define SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t swig_types[176]
#define SWIGTYPE_p_std__listTbool_t swig_types[177]
#define SWIGTYPE_p_std__listTbool_t__const_iterator swig_types[178]
#define SWIGTYPE_p_std__listTbool_t__iterator swig_types[179]
#define SWIGTYPE_p_std__listTchar_t swig_types[180]
#define SWIGTYPE_p_std__listTfloat_t swig_types[181]
#define SWIGTYPE_p_std__listTfloat_t__const_iterator swig_types[182]
#define SWIGTYPE_p_std__listTfloat_t__iterator swig_types[183]
#define SWIGTYPE_p_std__listTint16_t_t__const_iterator swig_types[184]
#define SWIGTYPE_p_std__listTint16_t_t__iterator swig_types[185]
#define SWIGTYPE_p_std__listTint32_t_t__const_iterator swig_types[186]
#define SWIGTYPE_p_std__listTint32_t_t__iterator swig_types[187]
#define SWIGTYPE_p_std__listTint8_t_t__const_iterator swig_types[188]
#define SWIGTYPE_p_std__listTint8_t_t__iterator swig_types[189]
#define SWIGTYPE_p_std__listTint_t swig_types[190]
#define SWIGTYPE_p_std__listTshort_t swig_types[191]
#define SWIGTYPE_p_std__listTstd__string_t swig_types[192]
#define SWIGTYPE_p_std__listTstd__wstring_t swig_types[193]
#define SWIGTYPE_p_std__listTstd__wstring_t__const_iterator swig_types[194]
#define SWIGTYPE_p_std__listTstd__wstring_t__iterator swig_types[195]
#define SWIGTYPE_p_std__listTu_int16_t_t__const_iterator swig_types[196]
#define SWIGTYPE_p_std__listTu_int16_t_t__iterator swig_types[197]
#define SWIGTYPE_p_std__listTu_int32_t_t__const_iterator swig_types[198]
#define SWIGTYPE_p_std__listTu_int32_t_t__iterator swig_types[199]
#define SWIGTYPE_p_std__listTu_int64_t_t__const_iterator swig_types[200]
#define SWIGTYPE_p_std__listTu_int64_t_t__iterator swig_types[201]
#define SWIGTYPE_p_std__listTu_int8_t_t__const_iterator swig_types[202]
#define SWIGTYPE_p_std__listTu_int8_t_t__iterator swig_types[203]
#define SWIGTYPE_p_std__listTunsigned_char_t swig_types[204]
#define SWIGTYPE_p_std__listTunsigned_int_t swig_types[205]
#define SWIGTYPE_p_std__listTunsigned_long_long_t swig_types[206]
#define SWIGTYPE_p_std__listTunsigned_short_t swig_types[207]
#define SWIGTYPE_p_std__mapTstd__string_std__string_t swig_types[208]
#define SWIGTYPE_p_std__string swig_types[209]
#define SWIGTYPE_p_std__vectorT_TagValuePairType_t swig_types[210]
#define SWIGTYPE_p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t swig_types[211]
#define SWIGTYPE_p_std__vectorTaffxchp___BaseCallType_t swig_types[212]
#define SWIGTYPE_p_std__vectorTaffxchp___ForceCallType_t swig_types[213]
#define SWIGTYPE_p_std__vectorTaffxpsi___ProbeSetInfo_t swig_types[214]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t swig_types[215]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t swig_types[216]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t swig_types[217]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator swig_types[218]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t swig_types[219]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator swig_types[220]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t swig_types[221]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator swig_types[222]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t swig_types[223]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator swig_types[224]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__ColumnType_t swig_types[225]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator swig_types[226]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t swig_types[227]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator swig_types[228]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator swig_types[229]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t swig_types[230]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator swig_types[231]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t swig_types[232]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator swig_types[233]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetReader_t swig_types[234]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator swig_types[235]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t swig_types[236]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator swig_types[237]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__XYCoord_t swig_types[238]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator swig_types[239]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator swig_types[240]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t swig_types[241]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator swig_types[242]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator swig_types[243]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t swig_types[244]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t swig_types[245]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__FPoint_t swig_types[246]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__FRegion_t swig_types[247]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__Point_t swig_types[248]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__Region_t swig_types[249]
#define SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t swig_types[250]
#define SWIGTYPE_p_std__vectorTbool_t swig_types[251]
#define SWIGTYPE_p_std__vectorTbool_t__const_iterator swig_types[252]
#define SWIGTYPE_p_std__vectorTbool_t__iterator swig_types[253]
#define SWIGTYPE_p_std__vectorTchar_t swig_types[254]
#define SWIGTYPE_p_std__vectorTfloat_t swig_types[255]
#define SWIGTYPE_p_std__vectorTfloat_t__const_iterator swig_types[256]
#define SWIGTYPE_p_std__vectorTfloat_t__iterator swig_types[257]
#define SWIGTYPE_p_std__vectorTint16_t_t__const_iterator swig_types[258]
#define SWIGTYPE_p_std__vectorTint16_t_t__iterator swig_types[259]
#define SWIGTYPE_p_std__vectorTint32_t_t__const_iterator swig_types[260]
#define SWIGTYPE_p_std__vectorTint32_t_t__iterator swig_types[261]
#define SWIGTYPE_p_std__vectorTint64_t_t__const_iterator swig_types[262]
#define SWIGTYPE_p_std__vectorTint64_t_t__iterator swig_types[263]
#define SWIGTYPE_p_std__vectorTint8_t_t__const_iterator swig_types[264]
#define SWIGTYPE_p_std__vectorTint8_t_t__iterator swig_types[265]
#define SWIGTYPE_p_std__vectorTint_t swig_types[266]
#define SWIGTYPE_p_std__vectorTlong_long_t swig_types[267]
#define SWIGTYPE_p_std__vectorTshort_t swig_types[268]
#define SWIGTYPE_p_std__vectorTstd__string_t swig_types[269]
#define SWIGTYPE_p_std__vectorTstd__wstring_t swig_types[270]
#define SWIGTYPE_p_std__vectorTstd__wstring_t__const_iterator swig_types[271]
#define SWIGTYPE_p_std__vectorTstd__wstring_t__iterator swig_types[272]
#define SWIGTYPE_p_std__vectorTu_int16_t_t__const_iterator swig_types[273]
#define SWIGTYPE_p_std__vectorTu_int16_t_t__iterator swig_types[274]
#define SWIGTYPE_p_std__vectorTu_int32_t_t__const_iterator swig_types[275]
#define SWIGTYPE_p_std__vectorTu_int32_t_t__iterator swig_types[276]
#define SWIGTYPE_p_std__vectorTu_int64_t_t__const_iterator swig_types[277]
#define SWIGTYPE_p_std__vectorTu_int64_t_t__iterator swig_types[278]
#define SWIGTYPE_p_std__vectorTu_int8_t_t__const_iterator swig_types[279]
#define SWIGTYPE_p_std__vectorTu_int8_t_t__iterator swig_types[280]
#define SWIGTYPE_p_std__vectorTunsigned_char_t swig_types[281]
#define SWIGTYPE_p_std__vectorTunsigned_int_t swig_types[282]
#define SWIGTYPE_p_std__vectorTunsigned_long_long_t swig_types[283]
#define SWIGTYPE_p_std__vectorTunsigned_short_t swig_types[284]
#define SWIGTYPE_p_std__wstring swig_types[285]
#define SWIGTYPE_p_unsigned_char swig_types[286]
#define SWIGTYPE_p_unsigned_int swig_types[287]
#define SWIGTYPE_p_unsigned_long_long swig_types[288]
#define SWIGTYPE_p_unsigned_short swig_types[289]
#define SWIGTYPE_p_void swig_types[290]
#define SWIGTYPE_p_wchar_t swig_types[291]
#define SWIGTYPE_p_wstring swig_types[292]
static swig_type_info *swig_types[293];
static swig_module_info swig_module = {swig_types, 293, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_affx_fusion

#define SWIG_name   "affx_fusionc::boot_affx_fusion"
#define SWIG_prefix "affx_fusionc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include <string>

double SwigSvToNumber(SV* sv) {
    return SvIOK(sv) ? double(SvIVX(sv)) : SvNVX(sv);
}
std::string SwigSvToString(SV* sv) {
    STRLEN len;
    return SvPV(sv,len);
}
void SwigSvFromString(SV* sv, const std::string& s) {
    sv_setpv(sv,s.c_str());
}


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define SWIG_exception(a,b)   SWIG_croak(b)


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>



#include "../../portability/src/AffymetrixBaseTypes.h"

#include "../../utils/src/AffymetrixGuid.h"
#include "../../utils/src/AffyStlCollectionTypes.h"
#include "../../utils/src/checksum.h"
#include "../../utils/src/Coords.h"
#include "../../utils/src/DateTime.h"
#include "../../utils/src/FileUtils.h"
#include "../../utils/src/StringUtils.h"
#include "../../utils/src/Subgrids.h"

#include "../../exception/src/ExceptionBase.h"
#include "../../exception/src/DevelopmentException.h"
#include "../../exception/src/InterpretationException.h"

#include "../../parameter/src/ParameterException.h"
#include "../../parameter/src/Parameter.h"
#include "../../parameter/src/AffymetrixParameterConsts.h"
#include "../../parameter/src/ParameterNameValueType.h"

#include "../../Array/src/ArrayAttributes.h"
#include "../../Array/src/ArrayAudit.h"
#include "../../Array/src/ArrayAuditActionTypes.h"
#include "../../Array/src/ArrayId.h"
#include "../../Array/src/ArrayData.h"

#include "../../data/src/CDFData.h"
#include "../../data/src/CDFProbeGroupInformation.h"
#include "../../data/src/CDFProbeInformation.h"
#include "../../data/src/CDFProbeSetInformation.h"
#include "../../data/src/CDFQCProbeInformation.h"
#include "../../data/src/CDFQCProbeSetInformation.h"
#include "../../data/src/CHPBackgroundZone.h"
#include "../../data/src/CHPData.h"
#include "../../data/src/CHPExpressionEntry.h"
#include "../../data/src/CHPGenotypeEntry.h"
#include "../../data/src/CHPUniversalEntry.h"
#include "../../data/src/CelFileData.h"
#include "../../data/src/ColumnTypes.h"
#include "../../data/src/DataException.h"
#include "../../data/src/DataGroup.h"
#include "../../data/src/DataGroupHeader.h"
#include "../../data/src/DataSet.h"
#include "../../data/src/DataSetHeader.h"
#include "../../data/src/FileHeader.h"
#include "../../data/src/GenericData.h"
#include "../../data/src/GenericDataHeader.h"
#include "../../data/src/GenericDataTypes.h"
#include "../../data/src/cdfdatatypes.h"

#include "../../parsers/src/ArrayFileReader.h"
#include "../../parsers/src/AuditFileConstants.h"
#include "../../parsers/src/AuditFileReader.h"
#include "../../parsers/src/CDFFileReader.h"
#include "../../parsers/src/CHPFileReader.h"
#include "../../parsers/src/CelFileReader.h"
#include "../../parsers/src/DataGroupHeaderReader.h"
#include "../../parsers/src/DataGroupReader.h"
#include "../../parsers/src/DataSetHeaderReader.h"
#include "../../parsers/src/DataSetReader.h"
#include "../../parsers/src/FileException.h"
#include "../../parsers/src/FileHeaderReader.h"
#include "../../parsers/src/FileInput.h"
#include "../../parsers/src/GenericDataHeaderReader.h"
#include "../../parsers/src/GenericFileReader.h"
#include "../../parsers/src/GridControlFileReader.h"
#include "../../parsers/src/TemplateFileReader.h"
#include "../../parsers/src/TextFileReader.h"

#include "../../template/src/TemplateAuditActionTypes.h"
#include "../../template/src/TemplateData.h"

#include "../../../portability/affy-base-types.h"
#include "../../../file/FileIO.h"
#include "../../../file/GridCoordinates.h"
#include "../../../file/TagValuePair.h"
#include "../../../file/CDFFileData.h"
#include "../../../file/CELFileData.h"
#include "../../../file/CHPFileData.h"
#include "../../../file/BARFileData.h"
#include "../../../file/BPMAPFileData.h"
#include "../../../file/EXPFileData.h"
#include "../../../file/GRCFileData.h"
#include "../../../file/MSKFileData.h"
#include "../../../file/PSIFileData.h"
#include "../../../file/DttArrayFileReader.h"

#include "../src/CalvinAdapter/CalvinCELDataAdapter.h"
#include "../src/CalvinAdapter/CalvinCHPDataAdapter.h"

#include "../src/FusionTagValuePairType.h"
#include "../src/FusionArrayFileReader.h"
#include "../src/FusionProbeSetResults.h"
#include "../src/FusionCDFData.h"
#include "../src/FusionCDFQCProbeSetNames.h"
#include "../src/FusionCELDataAdapterInterface.h"
#include "../src/FusionCELData.h"
#include "../src/FusionCHPDataAdapterInterface.h"
#include "../src/FusionCHPData.h"

using namespace affymetrix_fusion_io;


#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_affx_fusion_var::
class _wrap_affx_fusion_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_val_ARRAY_FILE_CREATEION_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::ARRAY_FILE_CREATEION_ACTION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_FLUIDICS_INSTRUMENT_CONTROL_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::FLUIDICS_INSTRUMENT_CONTROL_ACTION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_SCAN_INSTRUMENT_CONTROL_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::SCAN_INSTRUMENT_CONTROL_ACTION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_MAGIC_NUM(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) affymetrix_calvin_io::MAGIC_NUM);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_VERSION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setuv(sv, (UV) affymetrix_calvin_io::VERSION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_SCAN_ACQUISITION_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::SCAN_ACQUISITION_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_INTENSITY_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::INTENSITY_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_EXPRESSION_RESULTS_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::EXPRESSION_RESULTS_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_GENOTYPING_RESULTS_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::GENOTYPING_RESULTS_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_RESEQUENCING_RESULTS_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::RESEQUENCING_RESULTS_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_TAG_RESULTS_DATA_TYPE(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(SvRV(sv), (IV) &affymetrix_calvin_data::TAG_RESULTS_DATA_TYPE);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_TEMPLATE_FILE_CREATEION_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::TEMPLATE_FILE_CREATEION_ACTION);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) affymetrix_calvin_array::TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION);
    return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_new_AffymetrixGuid) {
    {
        affymetrix_calvin_utilities::AffymetrixGuid *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_AffymetrixGuid();");
        }
        result = (affymetrix_calvin_utilities::AffymetrixGuid *)new affymetrix_calvin_utilities::AffymetrixGuid();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__AffymetrixGuid, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_AffymetrixGuid) {
    {
        affymetrix_calvin_utilities::AffymetrixGuid *arg1 = (affymetrix_calvin_utilities::AffymetrixGuid *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_AffymetrixGuid(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__AffymetrixGuid,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_AffymetrixGuid. Expected _p_affymetrix_calvin_utilities__AffymetrixGuid");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AffymetrixGuid_GenerateNewGuid) {
    {
        affymetrix_calvin_utilities::AffymetrixGuidType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: AffymetrixGuid_GenerateNewGuid();");
        }
        result = affymetrix_calvin_utilities::AffymetrixGuid::GenerateNewGuid();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CheckSum_OnesComplementCheckSum) {
    {
        void *arg1 = (void *) 0 ;
        size_t arg2 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CheckSum_OnesComplementCheckSum(addr,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of CheckSum_OnesComplementCheckSum. Expected _p_void");
            }
        }
        arg2 = (size_t) SvUV(ST(1));
        result = (u_int16_t)affymetrix_calvin_utilities::CheckSum::OnesComplementCheckSum(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CheckSum) {
    {
        affymetrix_calvin_utilities::CheckSum *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CheckSum();");
        }
        result = (affymetrix_calvin_utilities::CheckSum *)new affymetrix_calvin_utilities::CheckSum();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__CheckSum, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CheckSum) {
    {
        affymetrix_calvin_utilities::CheckSum *arg1 = (affymetrix_calvin_utilities::CheckSum *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CheckSum(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__CheckSum,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CheckSum. Expected _p_affymetrix_calvin_utilities__CheckSum");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_x_set) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FPoint_x_set(self,x);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_x_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->x = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_x_get) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FPoint_x_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_x_get. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        result = (float) ((arg1)->x);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_y_set) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FPoint_y_set(self,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_y_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->y = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_y_get) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FPoint_y_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_y_get. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        result = (float) ((arg1)->y);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_FPoint_equals) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FPoint_FPoint_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_FPoint_equals. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FPoint_FPoint_equals. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator ==((affymetrix_calvin_utilities::FPoint const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FPoint_FPoint_not_equals) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FPoint_FPoint_not_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of FPoint_FPoint_not_equals. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FPoint_FPoint_not_equals. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::FPoint const *)arg1)->operator !=((affymetrix_calvin_utilities::FPoint const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FPoint) {
    {
        affymetrix_calvin_utilities::FPoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FPoint();");
        }
        result = (affymetrix_calvin_utilities::FPoint *)new affymetrix_calvin_utilities::FPoint();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FPoint) {
    {
        affymetrix_calvin_utilities::FPoint *arg1 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FPoint(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FPoint. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRegion_Clear) {
    {
        affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRegion_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRegion_Clear. Expected _p_affymetrix_calvin_utilities__FRegion");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRegion_pts_set) {
    {
        affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
        std::vector<affymetrix_calvin_utilities::FPoint > *arg2 = (std::vector<affymetrix_calvin_utilities::FPoint > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FRegion_pts_set(self,pts);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRegion_pts_set. Expected _p_affymetrix_calvin_utilities__FRegion");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__FPoint_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FRegion_pts_set. Expected _p_std__vectorTaffymetrix_calvin_utilities__FPoint_t");
            }
        }
        if (arg1) (arg1)->pts = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRegion_pts_get) {
    {
        affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
        std::vector<affymetrix_calvin_utilities::FPoint > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRegion_pts_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRegion_pts_get. Expected _p_affymetrix_calvin_utilities__FRegion");
            }
        }
        result = (std::vector<affymetrix_calvin_utilities::FPoint > *)& ((arg1)->pts);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__FPoint_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FRegion) {
    {
        affymetrix_calvin_utilities::FRegion *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FRegion();");
        }
        result = (affymetrix_calvin_utilities::FRegion *)new affymetrix_calvin_utilities::FRegion();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FRegion) {
    {
        affymetrix_calvin_utilities::FRegion *arg1 = (affymetrix_calvin_utilities::FRegion *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FRegion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FRegion. Expected _p_affymetrix_calvin_utilities__FRegion");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FRect__SWIG_0) {
    {
        affymetrix_calvin_utilities::FRect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FRect();");
        }
        result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FRect, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FRect__SWIG_1) {
    {
        affymetrix_calvin_utilities::FRegion *arg1 = 0 ;
        affymetrix_calvin_utilities::FRect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_FRect(r);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_FRect. Expected _p_affymetrix_calvin_utilities__FRegion");
            }
        }
        result = (affymetrix_calvin_utilities::FRect *)new affymetrix_calvin_utilities::FRect((affymetrix_calvin_utilities::FRegion const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FRect, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FRect) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_FRect__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_FRect__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_FRect'");
    XSRETURN(0);
}


XS(_wrap_FRect_op_FRegion) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FRegion result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_op_FRegion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_op_FRegion. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (arg1)->operator affymetrix_calvin_utilities::FRegion();
        
        {
            affymetrix_calvin_utilities::FRegion * resultobj = new affymetrix_calvin_utilities::FRegion((affymetrix_calvin_utilities::FRegion &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_utilities__FRegion, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_IsEmpty) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_IsEmpty(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_IsEmpty. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::FRect const *)arg1)->IsEmpty();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_upperleft_set) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FRect_upperleft_set(self,upperleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_upperleft_set. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FRect_upperleft_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        if (arg1) (arg1)->upperleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_upperleft_get) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_upperleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_upperleft_get. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_upperright_set) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FRect_upperright_set(self,upperright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_upperright_set. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FRect_upperright_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        if (arg1) (arg1)->upperright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_upperright_get) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_upperright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_upperright_get. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->upperright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_lowerright_set) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FRect_lowerright_set(self,lowerright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_lowerright_set. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FRect_lowerright_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        if (arg1) (arg1)->lowerright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_lowerright_get) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_lowerright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_lowerright_get. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_lowerleft_set) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *arg2 = (affymetrix_calvin_utilities::FPoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FRect_lowerleft_set(self,lowerleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_lowerleft_set. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of FRect_lowerleft_set. Expected _p_affymetrix_calvin_utilities__FPoint");
            }
        }
        if (arg1) (arg1)->lowerleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FRect_lowerleft_get) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        affymetrix_calvin_utilities::FPoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FRect_lowerleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of FRect_lowerleft_get. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        result = (affymetrix_calvin_utilities::FPoint *)& ((arg1)->lowerleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FRect) {
    {
        affymetrix_calvin_utilities::FRect *arg1 = (affymetrix_calvin_utilities::FRect *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FRect(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FRect. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_x_set) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Point_x_set(self,x);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_x_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->x = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_x_get) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Point_x_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_x_get. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        result = (int32_t) ((arg1)->x);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_y_set) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Point_y_set(self,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_y_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->y = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_y_get) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Point_y_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_y_get. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        result = (int32_t) ((arg1)->y);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_Point_equals) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Point_Point_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_Point_equals. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Point_Point_equals. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator ==((affymetrix_calvin_utilities::Point const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Point_Point_not_equals) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Point_Point_not_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of Point_Point_not_equals. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Point_Point_not_equals. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::Point const *)arg1)->operator !=((affymetrix_calvin_utilities::Point const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Point) {
    {
        affymetrix_calvin_utilities::Point *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_Point();");
        }
        result = (affymetrix_calvin_utilities::Point *)new affymetrix_calvin_utilities::Point();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Point, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Point) {
    {
        affymetrix_calvin_utilities::Point *arg1 = (affymetrix_calvin_utilities::Point *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Point(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Point. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PointU16_t_x_set) {
    {
        affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PointU16_t_x_set(self,x);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of PointU16_t_x_set. Expected _p_affymetrix_calvin_utilities__PointU16_t");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        if (arg1) (arg1)->x = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PointU16_t_x_get) {
    {
        affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PointU16_t_x_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of PointU16_t_x_get. Expected _p_affymetrix_calvin_utilities__PointU16_t");
            }
        }
        result = (u_int16_t) ((arg1)->x);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PointU16_t_y_set) {
    {
        affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: PointU16_t_y_set(self,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of PointU16_t_y_set. Expected _p_affymetrix_calvin_utilities__PointU16_t");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        if (arg1) (arg1)->y = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_PointU16_t_y_get) {
    {
        affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: PointU16_t_y_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of PointU16_t_y_get. Expected _p_affymetrix_calvin_utilities__PointU16_t");
            }
        }
        result = (u_int16_t) ((arg1)->y);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_PointU16_t) {
    {
        affymetrix_calvin_utilities::PointU16_t *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_PointU16_t();");
        }
        result = (affymetrix_calvin_utilities::PointU16_t *)new affymetrix_calvin_utilities::PointU16_t();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_PointU16_t) {
    {
        affymetrix_calvin_utilities::PointU16_t *arg1 = (affymetrix_calvin_utilities::PointU16_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_PointU16_t(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_PointU16_t. Expected _p_affymetrix_calvin_utilities__PointU16_t");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Region_Clear) {
    {
        affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Region_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Region,0) < 0) {
                SWIG_croak("Type error in argument 1 of Region_Clear. Expected _p_affymetrix_calvin_utilities__Region");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Region_pts_set) {
    {
        affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
        std::vector<affymetrix_calvin_utilities::Point > *arg2 = (std::vector<affymetrix_calvin_utilities::Point > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Region_pts_set(self,pts);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Region,0) < 0) {
                SWIG_croak("Type error in argument 1 of Region_pts_set. Expected _p_affymetrix_calvin_utilities__Region");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__Point_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of Region_pts_set. Expected _p_std__vectorTaffymetrix_calvin_utilities__Point_t");
            }
        }
        if (arg1) (arg1)->pts = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Region_pts_get) {
    {
        affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
        std::vector<affymetrix_calvin_utilities::Point > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Region_pts_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Region,0) < 0) {
                SWIG_croak("Type error in argument 1 of Region_pts_get. Expected _p_affymetrix_calvin_utilities__Region");
            }
        }
        result = (std::vector<affymetrix_calvin_utilities::Point > *)& ((arg1)->pts);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffymetrix_calvin_utilities__Point_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Region) {
    {
        affymetrix_calvin_utilities::Region *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_Region();");
        }
        result = (affymetrix_calvin_utilities::Region *)new affymetrix_calvin_utilities::Region();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Region, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Region) {
    {
        affymetrix_calvin_utilities::Region *arg1 = (affymetrix_calvin_utilities::Region *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Region(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Region,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Region. Expected _p_affymetrix_calvin_utilities__Region");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Rect__SWIG_0) {
    {
        affymetrix_calvin_utilities::Rect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_Rect();");
        }
        result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Rect, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Rect__SWIG_1) {
    {
        affymetrix_calvin_utilities::Region *arg1 = 0 ;
        affymetrix_calvin_utilities::Rect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_Rect(r);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Region,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_Rect. Expected _p_affymetrix_calvin_utilities__Region");
            }
        }
        result = (affymetrix_calvin_utilities::Rect *)new affymetrix_calvin_utilities::Rect((affymetrix_calvin_utilities::Region const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Rect, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Rect) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_Rect__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__Region, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_Rect__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_Rect'");
    XSRETURN(0);
}


XS(_wrap_Rect_op_Region) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Region result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_op_Region(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_op_Region. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (arg1)->operator affymetrix_calvin_utilities::Region();
        
        {
            affymetrix_calvin_utilities::Region * resultobj = new affymetrix_calvin_utilities::Region((affymetrix_calvin_utilities::Region &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_utilities__Region, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_IsEmpty) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_IsEmpty(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_IsEmpty. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (bool)((affymetrix_calvin_utilities::Rect const *)arg1)->IsEmpty();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_upperleft_set) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Rect_upperleft_set(self,upperleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_upperleft_set. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Rect_upperleft_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        if (arg1) (arg1)->upperleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_upperleft_get) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_upperleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_upperleft_get. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Point, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_upperright_set) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Rect_upperright_set(self,upperright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_upperright_set. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Rect_upperright_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        if (arg1) (arg1)->upperright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_upperright_get) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_upperright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_upperright_get. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (affymetrix_calvin_utilities::Point *)& ((arg1)->upperright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Point, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_lowerright_set) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Rect_lowerright_set(self,lowerright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_lowerright_set. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Rect_lowerright_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        if (arg1) (arg1)->lowerright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_lowerright_get) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_lowerright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_lowerright_get. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Point, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_lowerleft_set) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *arg2 = (affymetrix_calvin_utilities::Point *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Rect_lowerleft_set(self,lowerleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_lowerleft_set. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Point,0) < 0) {
                SWIG_croak("Type error in argument 2 of Rect_lowerleft_set. Expected _p_affymetrix_calvin_utilities__Point");
            }
        }
        if (arg1) (arg1)->lowerleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Rect_lowerleft_get) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        affymetrix_calvin_utilities::Point *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Rect_lowerleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of Rect_lowerleft_get. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        result = (affymetrix_calvin_utilities::Point *)& ((arg1)->lowerleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Point, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Rect) {
    {
        affymetrix_calvin_utilities::Rect *arg1 = (affymetrix_calvin_utilities::Rect *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Rect(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Rect. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DateTime) {
    {
        affymetrix_calvin_utilities::DateTime *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DateTime();");
        }
        result = (affymetrix_calvin_utilities::DateTime *)new affymetrix_calvin_utilities::DateTime();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DateTime) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DateTime(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DateTime. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Date__SWIG_0) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_Date(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Date. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Date();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Date__SWIG_1) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DateTime_Date(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Date. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DateTime_Date. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        (arg1)->Date(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Date) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DateTime_Date__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DateTime_Date__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DateTime_Date'");
    XSRETURN(0);
}


XS(_wrap_DateTime_Time__SWIG_0) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_Time(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Time. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        result = ((affymetrix_calvin_utilities::DateTime const *)arg1)->Time();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Time__SWIG_1) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DateTime_Time(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Time. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DateTime_Time. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        (arg1)->Time(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Time) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DateTime_Time__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DateTime_Time__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DateTime_Time'");
    XSRETURN(0);
}


XS(_wrap_DateTime_Clear) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Clear. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_GetCurrentDateTime) {
    {
        affymetrix_calvin_utilities::DateTime result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: DateTime_GetCurrentDateTime();");
        }
        result = affymetrix_calvin_utilities::DateTime::GetCurrentDateTime();
        
        {
            affymetrix_calvin_utilities::DateTime * resultobj = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_IsUTC) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_IsUTC(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_IsUTC. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        result = (bool)(arg1)->IsUTC();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_ToString) {
    {
        affymetrix_calvin_utilities::DateTime *arg1 = (affymetrix_calvin_utilities::DateTime *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_ToString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_ToString. Expected _p_affymetrix_calvin_utilities__DateTime");
            }
        }
        result = (arg1)->ToString();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DateTime_Parse) {
    {
        std::wstring arg1 ;
        affymetrix_calvin_utilities::DateTime result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DateTime_Parse(value);");
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(0),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of DateTime_Parse. Expected _p_std__wstring");
            }
            arg1 = *argp;
        }
        result = affymetrix_calvin_utilities::DateTime::Parse(arg1);
        
        {
            affymetrix_calvin_utilities::DateTime * resultobj = new affymetrix_calvin_utilities::DateTime((affymetrix_calvin_utilities::DateTime &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileUtils_Exists) {
    {
        char *arg1 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileUtils_Exists(fileName);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (bool)affymetrix_calvin_utilities::FileUtils::Exists((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileUtils_LockFile) {
    {
        char *arg1 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileUtils_LockFile(fileName);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (bool)affymetrix_calvin_utilities::FileUtils::LockFile((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileUtils_UnlockFile) {
    {
        char *arg1 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileUtils_UnlockFile(fileName);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (bool)affymetrix_calvin_utilities::FileUtils::UnlockFile((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileUtils_ListFiles) {
    {
        char *arg1 = (char *) 0 ;
        char *arg2 = (char *) 0 ;
        SwigValueWrapper<std::list<std::string > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileUtils_ListFiles(pathName,ext);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = affymetrix_calvin_utilities::FileUtils::ListFiles((char const *)arg1,(char const *)arg2);
        
        {
            std::list<std::string > * resultobj = new std::list<std::string >((std::list<std::string > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__listTstd__string_t, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FileUtils) {
    {
        affymetrix_calvin_utilities::FileUtils *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FileUtils();");
        }
        result = (affymetrix_calvin_utilities::FileUtils *)new affymetrix_calvin_utilities::FileUtils();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FileUtils, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileUtils) {
    {
        affymetrix_calvin_utilities::FileUtils *arg1 = (affymetrix_calvin_utilities::FileUtils *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileUtils(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__FileUtils,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileUtils. Expected _p_affymetrix_calvin_utilities__FileUtils");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimLeft__SWIG_0) {
    {
        std::string *arg1 = 0 ;
        char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: StringUtils_STLTrimLeft(s,chTarget);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimLeft. Expected _p_std__string");
            }
        }
        arg2 = (char) *SvPV(ST(1),PL_na);
        affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimLeft__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_STLTrimLeft(s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimLeft. Expected _p_std__string");
            }
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimRight__SWIG_0) {
    {
        std::string *arg1 = 0 ;
        char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: StringUtils_STLTrimRight(s,chTarget);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimRight. Expected _p_std__string");
            }
        }
        arg2 = (char) *SvPV(ST(1),PL_na);
        affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimRight__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_STLTrimRight(s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimRight. Expected _p_std__string");
            }
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimLeft__SWIG_2) {
    {
        std::wstring *arg1 = 0 ;
        wchar_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: StringUtils_STLTrimLeft(s,chTarget);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimLeft. Expected _p_std__wstring");
            }
        }
        {
            wchar_t * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of StringUtils_STLTrimLeft. Expected _p_wchar_t");
            }
            arg2 = *argp;
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimLeft__SWIG_3) {
    {
        std::wstring *arg1 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_STLTrimLeft(s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimLeft. Expected _p_std__wstring");
            }
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimLeft(*arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimLeft) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimLeft__SWIG_1); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimLeft__SWIG_3); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_wchar_t, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimLeft__SWIG_2); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimLeft__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'StringUtils_STLTrimLeft'");
    XSRETURN(0);
}


XS(_wrap_StringUtils_STLTrimRight__SWIG_2) {
    {
        std::wstring *arg1 = 0 ;
        wchar_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: StringUtils_STLTrimRight(s,chTarget);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimRight. Expected _p_std__wstring");
            }
        }
        {
            wchar_t * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of StringUtils_STLTrimRight. Expected _p_wchar_t");
            }
            arg2 = *argp;
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimRight__SWIG_3) {
    {
        std::wstring *arg1 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_STLTrimRight(s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_STLTrimRight. Expected _p_std__wstring");
            }
        }
        affymetrix_calvin_utilities::StringUtils::STLTrimRight(*arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_STLTrimRight) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimRight__SWIG_1); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimRight__SWIG_3); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_wchar_t, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimRight__SWIG_2); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_StringUtils_STLTrimRight__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'StringUtils_STLTrimRight'");
    XSRETURN(0);
}


XS(_wrap_StringUtils_ConvertWCSToMBS) {
    {
        std::wstring *arg1 = 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_ConvertWCSToMBS(source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of StringUtils_ConvertWCSToMBS. Expected _p_std__wstring");
            }
        }
        result = affymetrix_calvin_utilities::StringUtils::ConvertWCSToMBS((std::wstring const &)*arg1);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_StringUtils_ConvertMBSToWCS) {
    {
        std::string *arg1 = 0 ;
        std::wstring result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StringUtils_ConvertMBSToWCS(source);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of StringUtils_ConvertMBSToWCS.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        result = affymetrix_calvin_utilities::StringUtils::ConvertMBSToWCS((std::string const &)*arg1);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_StringUtils) {
    {
        affymetrix_calvin_utilities::StringUtils *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_StringUtils();");
        }
        result = (affymetrix_calvin_utilities::StringUtils *)new affymetrix_calvin_utilities::StringUtils();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__StringUtils, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_StringUtils) {
    {
        affymetrix_calvin_utilities::StringUtils *arg1 = (affymetrix_calvin_utilities::StringUtils *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_StringUtils(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__StringUtils,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_StringUtils. Expected _p_affymetrix_calvin_utilities__StringUtils");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_row_set) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Subgrid_row_set(self,row);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_row_set. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->row = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_row_get) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Subgrid_row_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_row_get. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        result = (int32_t) ((arg1)->row);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_col_set) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Subgrid_col_set(self,col);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_col_set. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->col = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_col_get) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Subgrid_col_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_col_get. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        result = (int32_t) ((arg1)->col);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_pixelgrid_set) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        affymetrix_calvin_utilities::FRect *arg2 = (affymetrix_calvin_utilities::FRect *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Subgrid_pixelgrid_set(self,pixelgrid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_pixelgrid_set. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__FRect,0) < 0) {
                SWIG_croak("Type error in argument 2 of Subgrid_pixelgrid_set. Expected _p_affymetrix_calvin_utilities__FRect");
            }
        }
        if (arg1) (arg1)->pixelgrid = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_pixelgrid_get) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        affymetrix_calvin_utilities::FRect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Subgrid_pixelgrid_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_pixelgrid_get. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        result = (affymetrix_calvin_utilities::FRect *)& ((arg1)->pixelgrid);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__FRect, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_cellgrid_set) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        affymetrix_calvin_utilities::Rect *arg2 = (affymetrix_calvin_utilities::Rect *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Subgrid_cellgrid_set(self,cellgrid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_cellgrid_set. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_utilities__Rect,0) < 0) {
                SWIG_croak("Type error in argument 2 of Subgrid_cellgrid_set. Expected _p_affymetrix_calvin_utilities__Rect");
            }
        }
        if (arg1) (arg1)->cellgrid = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Subgrid_cellgrid_get) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        affymetrix_calvin_utilities::Rect *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Subgrid_cellgrid_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of Subgrid_cellgrid_get. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        result = (affymetrix_calvin_utilities::Rect *)& ((arg1)->cellgrid);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Rect, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Subgrid) {
    {
        affymetrix_calvin_utilities::Subgrid *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_Subgrid();");
        }
        result = (affymetrix_calvin_utilities::Subgrid *)new affymetrix_calvin_utilities::Subgrid();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Subgrid) {
    {
        affymetrix_calvin_utilities::Subgrid *arg1 = (affymetrix_calvin_utilities::Subgrid *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Subgrid(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Subgrid. Expected _p_affymetrix_calvin_utilities__Subgrid");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CalvinException();");
        }
        result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException__SWIG_1) {
    {
        std::wstring arg1 ;
        std::wstring arg2 ;
        std::wstring arg3 ;
        std::string arg4 ;
        u_int16_t arg5 ;
        u_int64_t arg6 ;
        affymetrix_calvin_exceptions::CalvinException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 6)) {
            SWIG_croak("Usage: new_CalvinException(_Source,_Description,_TimeStamp,_FileName,_LineNumber,_ErrorCode);");
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(0),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CalvinException. Expected _p_std__wstring");
            }
            arg1 = *argp;
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_CalvinException. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(2),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_CalvinException. Expected _p_std__wstring");
            }
            arg3 = *argp;
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(3), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 4 of new_CalvinException.");
            } else {
                arg4 = std::string(ptr, len);
            }
        }
        arg5 = (u_int16_t) SvUV(ST(4));
        arg6 = (u_int64_t) strtoull(SvPV(ST(5), PL_na), 0, 0);
        result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3,arg4,arg5,arg6);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException__SWIG_2) {
    {
        std::wstring arg1 ;
        std::wstring arg2 ;
        u_int64_t arg3 ;
        affymetrix_calvin_exceptions::CalvinException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: new_CalvinException(_Source,_Description,_ErrorCode);");
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(0),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CalvinException. Expected _p_std__wstring");
            }
            arg1 = *argp;
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_CalvinException. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        arg3 = (u_int64_t) strtoull(SvPV(ST(2), PL_na), 0, 0);
        result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException__SWIG_3) {
    {
        std::wstring arg1 ;
        u_int64_t arg2 ;
        affymetrix_calvin_exceptions::CalvinException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_CalvinException(_Description,_ErrorCode);");
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(0),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CalvinException. Expected _p_std__wstring");
            }
            arg1 = *argp;
        }
        arg2 = (u_int64_t) strtoull(SvPV(ST(1), PL_na), 0, 0);
        result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException__SWIG_4) {
    {
        u_int64_t arg1 ;
        affymetrix_calvin_exceptions::CalvinException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_CalvinException(_ErrorCode);");
        }
        arg1 = (u_int64_t) strtoull(SvPV(ST(0), PL_na), 0, 0);
        result = (affymetrix_calvin_exceptions::CalvinException *)new affymetrix_calvin_exceptions::CalvinException(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CalvinException) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CalvinException__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CalvinException__SWIG_4); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CalvinException__SWIG_3); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CalvinException__SWIG_2); return;
                }
            }
        }
    }
    if (items == 6) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = SvPOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CalvinException__SWIG_1); return;
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_CalvinException'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_Source__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_Source(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_Source. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (arg1)->Source();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_Source__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_Source(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_Source. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CalvinException_Source. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        (arg1)->Source(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_Source) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_Source__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_Source__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_Source'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_Description__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_Description(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_Description. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (arg1)->Description();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_Description__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_Description(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_Description. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CalvinException_Description. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        (arg1)->Description(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_Description) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_Description__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_Description__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_Description'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_TimeStamp__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_TimeStamp(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_TimeStamp. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (arg1)->TimeStamp();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_TimeStamp__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_TimeStamp(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_TimeStamp. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CalvinException_TimeStamp. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        (arg1)->TimeStamp(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_TimeStamp) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_TimeStamp__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_TimeStamp__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_TimeStamp'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_SourceFile__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_SourceFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_SourceFile. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (arg1)->SourceFile();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_SourceFile__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_SourceFile(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_SourceFile. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CalvinException_SourceFile.");
            } else {
                arg2 = std::string(ptr, len);
            }
        }
        (arg1)->SourceFile(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_SourceFile) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_SourceFile__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_SourceFile__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_SourceFile'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_LineNumber__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_LineNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_LineNumber. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (u_int16_t)(arg1)->LineNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_LineNumber__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_LineNumber(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_LineNumber. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->LineNumber(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_LineNumber) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_LineNumber__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_LineNumber__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_LineNumber'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_ErrorCode__SWIG_0) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        u_int64_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_ErrorCode(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_ErrorCode. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (u_int64_t)(arg1)->ErrorCode();
        
        {
            char temp[256];
            sprintf(temp,"%llu", (unsigned long long) result);
            ST(argvi) = sv_newmortal();
            sv_setpv((SV*)ST(argvi++), temp);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_ErrorCode__SWIG_1) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        u_int64_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CalvinException_ErrorCode(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_ErrorCode. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        arg2 = (u_int64_t) strtoull(SvPV(ST(1), PL_na), 0, 0);
        (arg1)->ErrorCode(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CalvinException_ErrorCode) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_ErrorCode__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CalvinException_ErrorCode__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CalvinException_ErrorCode'");
    XSRETURN(0);
}


XS(_wrap_CalvinException_ToString) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CalvinException_ToString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of CalvinException_ToString. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        result = (arg1)->ToString();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CalvinException) {
    {
        affymetrix_calvin_exceptions::CalvinException *arg1 = (affymetrix_calvin_exceptions::CalvinException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CalvinException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CalvinException. Expected _p_affymetrix_calvin_exceptions__CalvinException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_NotImplementedException) {
    {
        affymetrix_calvin_exceptions::NotImplementedException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_NotImplementedException();");
        }
        result = (affymetrix_calvin_exceptions::NotImplementedException *)new affymetrix_calvin_exceptions::NotImplementedException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__NotImplementedException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_NotImplementedException) {
    {
        affymetrix_calvin_exceptions::NotImplementedException *arg1 = (affymetrix_calvin_exceptions::NotImplementedException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_NotImplementedException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__NotImplementedException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_NotImplementedException. Expected _p_affymetrix_calvin_exceptions__NotImplementedException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FormatException) {
    {
        affymetrix_calvin_exceptions::FormatException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FormatException();");
        }
        result = (affymetrix_calvin_exceptions::FormatException *)new affymetrix_calvin_exceptions::FormatException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__FormatException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FormatException) {
    {
        affymetrix_calvin_exceptions::FormatException *arg1 = (affymetrix_calvin_exceptions::FormatException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FormatException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__FormatException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FormatException. Expected _p_affymetrix_calvin_exceptions__FormatException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterMismatchException) {
    {
        affymetrix_calvin_exceptions::ParameterMismatchException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterMismatchException();");
        }
        result = (affymetrix_calvin_exceptions::ParameterMismatchException *)new affymetrix_calvin_exceptions::ParameterMismatchException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__ParameterMismatchException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterMismatchException) {
    {
        affymetrix_calvin_exceptions::ParameterMismatchException *arg1 = (affymetrix_calvin_exceptions::ParameterMismatchException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterMismatchException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__ParameterMismatchException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterMismatchException. Expected _p_affymetrix_calvin_exceptions__ParameterMismatchException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UnexpectedParameterException) {
    {
        std::wstring *arg1 = 0 ;
        affymetrix_calvin_exceptions::UnexpectedParameterException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_UnexpectedParameterException(expectedType_);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_UnexpectedParameterException. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_exceptions::UnexpectedParameterException *)new affymetrix_calvin_exceptions::UnexpectedParameterException((std::wstring const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedParameterException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UnexpectedParameterException) {
    {
        affymetrix_calvin_exceptions::UnexpectedParameterException *arg1 = (affymetrix_calvin_exceptions::UnexpectedParameterException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UnexpectedParameterException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedParameterException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UnexpectedParameterException. Expected _p_affymetrix_calvin_exceptions__UnexpectedParameterException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_OutOfRangeParameterException) {
    {
        std::wstring *arg1 = 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_exceptions::OutOfRangeParameterException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_OutOfRangeParameterException(lower_,upper_);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_OutOfRangeParameterException. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_OutOfRangeParameterException. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_exceptions::OutOfRangeParameterException *)new affymetrix_calvin_exceptions::OutOfRangeParameterException((std::wstring const &)*arg1,(std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__OutOfRangeParameterException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_OutOfRangeParameterException) {
    {
        affymetrix_calvin_exceptions::OutOfRangeParameterException *arg1 = (affymetrix_calvin_exceptions::OutOfRangeParameterException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_OutOfRangeParameterException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__OutOfRangeParameterException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_OutOfRangeParameterException. Expected _p_affymetrix_calvin_exceptions__OutOfRangeParameterException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_Name_set) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValuePair_Name_set(self,Name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_Name_set. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValuePair_Name_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Name = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_Name_get) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValuePair_Name_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_Name_get. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        result =  ((arg1)->Name);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_Value_set) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValuePair_Value_set(self,Value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_Value_set. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValuePair_Value_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Value = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_Value_get) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValuePair_Value_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_Value_get. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        result =  ((arg1)->Value);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_ParameterNameValuePair_copy) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
        affymetrix_calvin_parameter::_tagParameterNameValuePair result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValuePair_ParameterNameValuePair_copy(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_ParameterNameValuePair_copy. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        {
            affymetrix_calvin_parameter::_tagParameterNameValuePair * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValuePair_ParameterNameValuePair_copy. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_parameter::_tagParameterNameValuePair * resultobj = new affymetrix_calvin_parameter::_tagParameterNameValuePair((affymetrix_calvin_parameter::_tagParameterNameValuePair &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_ParameterNameValuePair_equals_obj) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        affymetrix_calvin_parameter::_tagParameterNameValuePair arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValuePair_ParameterNameValuePair_equals_obj(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_ParameterNameValuePair_equals_obj. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        {
            affymetrix_calvin_parameter::_tagParameterNameValuePair * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValuePair_ParameterNameValuePair_equals_obj. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
            arg2 = *argp;
        }
        result = (bool)(arg1)->operator ==(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        std::wstring *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name. Expected _p_std__wstring");
            }
        }
        result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValuePair) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterNameValuePair();");
        }
        result = (affymetrix_calvin_parameter::ParameterNameValuePair *)new affymetrix_calvin_parameter::ParameterNameValuePair();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterNameValuePair) {
    {
        affymetrix_calvin_parameter::ParameterNameValuePair *arg1 = (affymetrix_calvin_parameter::ParameterNameValuePair *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterNameValuePair(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterNameValuePair. Expected _p_affymetrix_calvin_parameter___tagParameterNameValuePair");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_Name_set) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_Name_set(self,Name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_Name_set. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_Name_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Name = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_Name_get) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_Name_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_Name_get. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        result =  ((arg1)->Name);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_Value_set) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_Value_set(self,Value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_Value_set. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_Value_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Value = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_Value_get) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_Value_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_Value_get. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        result =  ((arg1)->Value);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_ControlledVocabulary_set) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::vector<std::wstring > *arg2 = (std::vector<std::wstring > *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_ControlledVocabulary_set(self,ControlledVocabulary);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_ControlledVocabulary_set. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTstd__wstring_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_ControlledVocabulary_set. Expected _p_std__vectorTstd__wstring_t");
            }
        }
        if (arg1) (arg1)->ControlledVocabulary = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_ControlledVocabulary_get) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::vector<std::wstring > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_ControlledVocabulary_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_ControlledVocabulary_get. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        result = (std::vector<std::wstring > *)& ((arg1)->ControlledVocabulary);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTstd__wstring_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
        affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary * resultobj = new affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary((affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
            arg2 = *argp;
        }
        result = (bool)(arg1)->operator ==(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        std::wstring *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name. Expected _p_std__wstring");
            }
        }
        result = (bool)(arg1)->operator ==((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValueControlVocabulary) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterNameValueControlVocabulary();");
        }
        result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *)new affymetrix_calvin_parameter::ParameterNameValueControlVocabulary();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterNameValueControlVocabulary) {
    {
        affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *arg1 = (affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterNameValueControlVocabulary(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterNameValueControlVocabulary. Expected _p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i8_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_i8_set(self,i8);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i8_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (int8_t) *SvPV(ST(1),PL_na);
        if (arg1) (arg1)->i8 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i8_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_i8_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i8_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (int8_t) ((arg1)->i8);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i16_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_i16_set(self,i16);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i16_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (int16_t) SvIV(ST(1));
        if (arg1) (arg1)->i16 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i16_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_i16_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i16_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (int16_t) ((arg1)->i16);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i32_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_i32_set(self,i32);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i32_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->i32 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_i32_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_i32_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_i32_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (int32_t) ((arg1)->i32);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu8_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_iu8_set(self,iu8);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu8_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        if (arg1) (arg1)->iu8 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu8_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_iu8_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu8_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (u_int8_t) ((arg1)->iu8);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu16_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_iu16_set(self,iu16);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu16_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        if (arg1) (arg1)->iu16 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu16_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_iu16_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu16_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (u_int16_t) ((arg1)->iu16);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu32_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_iu32_set(self,iu32);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu32_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        if (arg1) (arg1)->iu32 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_iu32_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_iu32_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_iu32_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (u_int32_t) ((arg1)->iu32);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_f32_set) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterDataValue_f32_set(self,f32);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_f32_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->f32 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterDataValue_f32_get) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterDataValue_f32_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterDataValue_f32_get. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        result = (float) ((arg1)->f32);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterDataValue) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterDataValue();");
        }
        result = (affymetrix_calvin_parameter::ParameterDataValue *)new affymetrix_calvin_parameter::ParameterDataValue();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterDataValue) {
    {
        affymetrix_calvin_parameter::ParameterDataValue *arg1 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterDataValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterDataValue. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_paramValueType_set) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        affymetrix_calvin_parameter::ParameterValueType arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterValue_paramValueType_set(self,paramValueType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_paramValueType_set. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        arg2 = (affymetrix_calvin_parameter::ParameterValueType) SvUV(ST(1));
        if (arg1) (arg1)->paramValueType = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_paramValueType_get) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        affymetrix_calvin_parameter::ParameterValueType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterValue_paramValueType_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_paramValueType_get. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        result = (affymetrix_calvin_parameter::ParameterValueType) ((arg1)->paramValueType);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_valueSize_set) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterValue_valueSize_set(self,valueSize);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_valueSize_set. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->valueSize = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_valueSize_get) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterValue_valueSize_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_valueSize_get. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        result = (int32_t) ((arg1)->valueSize);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_paramValue_set) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        affymetrix_calvin_parameter::ParameterDataValue *arg2 = (affymetrix_calvin_parameter::ParameterDataValue *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterValue_paramValue_set(self,paramValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_paramValue_set. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterValue_paramValue_set. Expected _p_affymetrix_calvin_parameter___ParameterDataValue");
            }
        }
        if (arg1) (arg1)->paramValue = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterValue_paramValue_get) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        affymetrix_calvin_parameter::ParameterDataValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterValue_paramValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterValue_paramValue_get. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        result = (affymetrix_calvin_parameter::ParameterDataValue *)& ((arg1)->paramValue);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterValue) {
    {
        affymetrix_calvin_parameter::ParameterValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterValue();");
        }
        result = (affymetrix_calvin_parameter::ParameterValue *)new affymetrix_calvin_parameter::ParameterValue();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterValue) {
    {
        affymetrix_calvin_parameter::ParameterValue *arg1 = (affymetrix_calvin_parameter::ParameterValue *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterValue. Expected _p_affymetrix_calvin_parameter___tagParameterValue");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIMEValue__SWIG_0) {
    {
        affymetrix_calvin_parameter::MIMEValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_MIMEValue();");
        }
        result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIMEValue__SWIG_1) {
    {
        void *arg1 = (void *) 0 ;
        u_int32_t arg2 ;
        affymetrix_calvin_parameter::MIMEValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_MIMEValue(value,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, 0,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_MIMEValue. Expected _p_void");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((void const *)arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIMEValue__SWIG_2) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = 0 ;
        affymetrix_calvin_parameter::MIMEValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_MIMEValue(source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_MIMEValue. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        result = (affymetrix_calvin_parameter::MIMEValue *)new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_MIMEValue) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_MIMEValue__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_MIMEValue__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, 0, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_MIMEValue__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_MIMEValue'");
    XSRETURN(0);
}


XS(_wrap_delete_MIMEValue) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_MIMEValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_MIMEValue. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_MIMEValue_copy) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
        affymetrix_calvin_parameter::MIMEValue *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIMEValue_MIMEValue_copy(self,source);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_MIMEValue_copy. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of MIMEValue_MIMEValue_copy. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            affymetrix_calvin_parameter::MIMEValue &_result_ref = (arg1)->operator =((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
            result = (affymetrix_calvin_parameter::MIMEValue *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_MIMEValue_equals) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIMEValue_MIMEValue_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_MIMEValue_equals. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of MIMEValue_MIMEValue_equals. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        result = (bool)(arg1)->operator ==((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_MIMEValue_not_equals) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIMEValue_MIMEValue_not_equals(self,lhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_MIMEValue_not_equals. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of MIMEValue_MIMEValue_not_equals. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        result = (bool)(arg1)->operator !=((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_SetValue) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        void *arg2 = (void *) 0 ;
        u_int32_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: MIMEValue_SetValue(self,value,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_SetValue. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of MIMEValue_SetValue. Expected _p_void");
            }
        }
        arg3 = (u_int32_t) SvUV(ST(2));
        (arg1)->SetValue((void const *)arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_GetValue) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        u_int32_t *arg2 = 0 ;
        void *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MIMEValue_GetValue(self,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_GetValue. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of MIMEValue_GetValue. Expected _p_unsigned_int");
            }
        }
        result = (void *)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->GetValue(*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_void, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MIMEValue_Size) {
    {
        affymetrix_calvin_parameter::MIMEValue *arg1 = (affymetrix_calvin_parameter::MIMEValue *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MIMEValue_Size(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 1 of MIMEValue_Size. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_parameter::MIMEValue const *)arg1)->Size();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValueType__SWIG_0) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ParameterNameValueType();");
        }
        result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValueType__SWIG_1) {
    {
        std::wstring *arg1 = 0 ;
        void *arg2 = (void *) 0 ;
        int32_t arg3 ;
        std::wstring *arg4 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: new_ParameterNameValueType(name,mimeValue,mimeValueSize,mimeType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_ParameterNameValueType. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, 0,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_ParameterNameValueType. Expected _p_void");
            }
        }
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 4 of new_ParameterNameValueType. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(void const *)arg2,arg3,(std::wstring const &)*arg4);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValueType__SWIG_2) {
    {
        std::wstring *arg1 = 0 ;
        affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
        std::wstring *arg3 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: new_ParameterNameValueType(name,mimeValue,mimeType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_ParameterNameValueType. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_ParameterNameValueType. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_ParameterNameValueType. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_parameter::ParameterNameValueType *)new affymetrix_calvin_parameter::ParameterNameValueType((std::wstring const &)*arg1,(affymetrix_calvin_parameter::MIMEValue const &)*arg2,(std::wstring const &)*arg3);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ParameterNameValueType) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_ParameterNameValueType__SWIG_0); return;
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_ParameterNameValueType__SWIG_2); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, 0, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_ParameterNameValueType__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_ParameterNameValueType'");
    XSRETURN(0);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_copy) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_copy(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_copy. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_copy. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (arg1)->operator =((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        {
            affymetrix_calvin_parameter::ParameterNameValueType * resultobj = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_equals_obj) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_equals_obj(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_equals_obj. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_equals_obj. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_not_equals_obj) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_not_equals_obj(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_not_equals_obj. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_not_equals_obj. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_equals_name) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_equals_name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_equals_name. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_equals_name. Expected _p_std__wstring");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator ==((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_not_equals_name) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_not_equals_name(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_not_equals_name. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_not_equals_name. Expected _p_std__wstring");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator !=((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_less_than) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_less_than(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_less_than. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_less_than. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator <((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ParameterNameValueType_greater_than) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_ParameterNameValueType_greater_than(self,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ParameterNameValueType_greater_than. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_ParameterNameValueType_greater_than. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->operator >((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetName) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetName. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetName) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetName. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_SetName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetParameterType) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType::ParameterType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetParameterType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetParameterType. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (affymetrix_calvin_parameter::ParameterNameValueType::ParameterType)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetParameterType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueInt8) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueInt8(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueInt8. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt8();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueInt8) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueInt8(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueInt8. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (int8_t) *SvPV(ST(1),PL_na);
        (arg1)->SetValueInt8(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueUInt8) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueUInt8(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueUInt8. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (u_int8_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt8();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueUInt8) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueUInt8(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueUInt8. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetValueUInt8(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueInt16) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueInt16(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueInt16. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt16();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueInt16) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueInt16(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueInt16. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (int16_t) SvIV(ST(1));
        (arg1)->SetValueInt16(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueUInt16) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueUInt16(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueUInt16. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (u_int16_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt16();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueUInt16) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueUInt16(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueUInt16. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetValueUInt16(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueInt32) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueInt32(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueInt32. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueInt32();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueInt32) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueInt32(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueInt32. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetValueInt32(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueUInt32) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueUInt32(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueUInt32. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (u_int32_t)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueUInt32();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueUInt32) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueUInt32(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueUInt32. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetValueUInt32(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueFloat) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueFloat(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueFloat. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = (float)((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueFloat();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueFloat) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueFloat(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueFloat. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetValueFloat(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueText) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueText(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueText. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueText();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueText) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueText(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueText. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_SetValueText. Expected _p_std__wstring");
            }
        }
        (arg1)->SetValueText((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetValueAscii) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetValueAscii(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetValueAscii. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        try {
            result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetValueAscii();
        }
        catch(affymetrix_calvin_exceptions::ParameterMismatchException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ParameterMismatchException exception thrown");
            
        }
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetValueAscii) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetValueAscii(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetValueAscii. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of ParameterNameValueType_SetValueAscii.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetValueAscii((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetMIMEType) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetMIMEType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetMIMEType. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetMIMEType) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetMIMEType(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetMIMEType. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_SetMIMEType. Expected _p_std__wstring");
            }
        }
        (arg1)->SetMIMEType((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_GetMIMEValue) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::MIMEValue result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_GetMIMEValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_GetMIMEValue. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = ((affymetrix_calvin_parameter::ParameterNameValueType const *)arg1)->GetMIMEValue();
        
        {
            affymetrix_calvin_parameter::MIMEValue * resultobj = new affymetrix_calvin_parameter::MIMEValue((affymetrix_calvin_parameter::MIMEValue &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_SetMIMEValue) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        affymetrix_calvin_parameter::MIMEValue *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ParameterNameValueType_SetMIMEValue(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_SetMIMEValue. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue,0) < 0) {
                SWIG_croak("Type error in argument 2 of ParameterNameValueType_SetMIMEValue. Expected _p_affymetrix_calvin_parameter__MIMEValue");
            }
        }
        (arg1)->SetMIMEValue((affymetrix_calvin_parameter::MIMEValue const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ParameterNameValueType_ToString) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ParameterNameValueType_ToString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ParameterNameValueType_ToString. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (arg1)->ToString();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ParameterNameValueType) {
    {
        affymetrix_calvin_parameter::ParameterNameValueType *arg1 = (affymetrix_calvin_parameter::ParameterNameValueType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ParameterNameValueType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ParameterNameValueType. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ArrayAttributes) {
    {
        affymetrix_calvin_array::ArrayAttributes *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ArrayAttributes();");
        }
        result = (affymetrix_calvin_array::ArrayAttributes *)new affymetrix_calvin_array::ArrayAttributes();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ArrayAttributes) {
    {
        affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ArrayAttributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ArrayAttributes. Expected _p_affymetrix_calvin_array__ArrayAttributes");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAttributes_Identifier) {
    {
        affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAttributes_Identifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAttributes_Identifier. Expected _p_affymetrix_calvin_array__ArrayAttributes");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->Identifier();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAttributes_Attributes) {
    {
        affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValuePairVector *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAttributes_Attributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAttributes_Attributes. Expected _p_affymetrix_calvin_array__ArrayAttributes");
            }
        }
        {
            affymetrix_calvin_parameter::ParameterNameValuePairVector &_result_ref = (arg1)->Attributes();
            result = (affymetrix_calvin_parameter::ParameterNameValuePairVector *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAttributes_Clear) {
    {
        affymetrix_calvin_array::ArrayAttributes *arg1 = (affymetrix_calvin_array::ArrayAttributes *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAttributes_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAttributes_Clear. Expected _p_affymetrix_calvin_array__ArrayAttributes");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ArrayAuditEntry) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ArrayAuditEntry();");
        }
        result = (affymetrix_calvin_array::ArrayAuditEntry *)new affymetrix_calvin_array::ArrayAuditEntry();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ArrayAuditEntry) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ArrayAuditEntry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ArrayAuditEntry. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_UserName) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        std::wstring *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_UserName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_UserName. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            std::wstring &_result_ref = (arg1)->UserName();
            result = (std::wstring *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__wstring, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_DateTime) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_utilities::DateTime *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_DateTime(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_DateTime. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_utilities::DateTime &_result_ref = (arg1)->DateTime();
            result = (affymetrix_calvin_utilities::DateTime *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_ActionType) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_ActionType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_ActionType. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ActionType();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_ArrayGuid) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_ArrayGuid(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_ArrayGuid. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArrayGuid();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_InputFileGuids) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_InputFileGuids(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_InputFileGuids. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->InputFileGuids();
            result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTstd__string_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_OutputFileGuids) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_OutputFileGuids(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_OutputFileGuids. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidTypeList &_result_ref = (arg1)->OutputFileGuids();
            result = (affymetrix_calvin_utilities::AffymetrixGuidTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTstd__string_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_ActionParameters) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValuePairList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_ActionParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_ActionParameters. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        {
            affymetrix_calvin_parameter::ParameterNameValuePairList &_result_ref = (arg1)->ActionParameters();
            result = (affymetrix_calvin_parameter::ParameterNameValuePairList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayAuditEntry_Clear) {
    {
        affymetrix_calvin_array::ArrayAuditEntry *arg1 = (affymetrix_calvin_array::ArrayAuditEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayAuditEntry_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayAuditEntry_Clear. Expected _p_affymetrix_calvin_array__ArrayAuditEntry");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ArrayData) {
    {
        affymetrix_calvin_array::ArrayData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ArrayData();");
        }
        result = (affymetrix_calvin_array::ArrayData *)new affymetrix_calvin_array::ArrayData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_array__ArrayData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ArrayData) {
    {
        affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ArrayData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ArrayData. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayData_ArraySetIdentifier) {
    {
        affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayData_ArraySetIdentifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayData_ArraySetIdentifier. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType &_result_ref = (arg1)->ArraySetIdentifier();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayData_PhysicalArraysAttributes) {
    {
        affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
        affymetrix_calvin_array::ArrayAttributesVector *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayData_PhysicalArraysAttributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayData_PhysicalArraysAttributes. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        {
            affymetrix_calvin_array::ArrayAttributesVector &_result_ref = (arg1)->PhysicalArraysAttributes();
            result = (affymetrix_calvin_array::ArrayAttributesVector *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayData_UserAttributes) {
    {
        affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayData_UserAttributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayData_UserAttributes. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        {
            affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector &_result_ref = (arg1)->UserAttributes();
            result = (affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayData_Clear) {
    {
        affymetrix_calvin_array::ArrayData *arg1 = (affymetrix_calvin_array::ArrayData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayData_Clear. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFData__SWIG_0) {
    {
        affymetrix_calvin_io::CDFData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFData();");
        }
        result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFData__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        affymetrix_calvin_io::CDFData *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_CDFData(filename);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_CDFData.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        result = (affymetrix_calvin_io::CDFData *)new affymetrix_calvin_io::CDFData((std::string const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFData) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CDFData__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CDFData__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_CDFData'");
    XSRETURN(0);
}


XS(_wrap_delete_CDFData) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFData. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_Clear) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_Clear. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_SetFilename) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFData_SetFilename(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_SetFilename. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CDFData_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetFilename) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetFilename. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetProbeSetCnt) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetProbeSetCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetProbeSetCnt. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (int32_t)(arg1)->GetProbeSetCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_SetProbeSetCnt) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        u_int32_t arg2 ;
        CDFDataTypeIds arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFData_SetProbeSetCnt(self,cnt,type);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_SetProbeSetCnt. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        arg3 = (CDFDataTypeIds) SvIV(ST(2));
        (arg1)->SetProbeSetCnt(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_SetArrayRows) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFData_SetArrayRows(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_SetArrayRows. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetArrayRows(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetArrayRows) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetArrayRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetArrayRows. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (u_int32_t)(arg1)->GetArrayRows();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_SetArrayCols) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFData_SetArrayCols(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_SetArrayCols. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetArrayCols(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetArrayCols) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetArrayCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetArrayCols. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (u_int32_t)(arg1)->GetArrayCols();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_SetRefSequence) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFData_SetRefSequence(self,seq);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_SetRefSequence. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CDFData_SetRefSequence.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetRefSequence((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetRefSequence) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetRefSequence(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetRefSequence. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (arg1)->GetRefSequence();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetDataTypeId) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetDataTypeId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetDataTypeId. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (arg1)->GetDataTypeId();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetFileHeader) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        FileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetFileHeader. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        result = (FileHeader *)(arg1)->GetFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetGenericData) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        GenericData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFData_GetGenericData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetGenericData. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        {
            GenericData &_result_ref = (arg1)->GetGenericData();
            result = (GenericData *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericData, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetProbeSetInformation__SWIG_0) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        int32_t arg2 ;
        CDFProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFData_GetProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFData_GetProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        (arg1)->GetProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetProbeSetInformation__SWIG_1) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::wstring *arg2 = 0 ;
        CDFProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFData_GetProbeSetInformation(self,probeSetName,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CDFData_GetProbeSetInformation. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFData_GetProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        (arg1)->GetProbeSetInformation((std::wstring const &)*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetProbeSetInformation) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFData_GetProbeSetInformation__SWIG_1); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFData_GetProbeSetInformation__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CDFData_GetProbeSetInformation'");
    XSRETURN(0);
}


XS(_wrap_CDFData_GetQCProbeSetInformation__SWIG_0) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        int32_t arg2 ;
        CDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFData_GetQCProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetQCProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFData_GetQCProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetQCProbeSetInformation__SWIG_1) {
    {
        affymetrix_calvin_io::CDFData *arg1 = (affymetrix_calvin_io::CDFData *) 0 ;
        std::wstring *arg2 = 0 ;
        CDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFData_GetQCProbeSetInformation(self,probeSetName,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFData_GetQCProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CDFData_GetQCProbeSetInformation. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFData_GetQCProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation((std::wstring const &)*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFData_GetQCProbeSetInformation) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFData_GetQCProbeSetInformation__SWIG_1); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFData_GetQCProbeSetInformation__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CDFData_GetQCProbeSetInformation'");
    XSRETURN(0);
}


XS(_wrap_new_CDFProbeGroupInformation) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFProbeGroupInformation();");
        }
        result = (affymetrix_calvin_io::CDFProbeGroupInformation *)new affymetrix_calvin_io::CDFProbeGroupInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFProbeGroupInformation) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFProbeGroupInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFProbeGroupInformation. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetDirection) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetDirection. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        result = (DirectionType)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetNumLists) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetNumLists. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetNumCells) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetNumCells. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetNumCellsPerList) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetNumCellsPerList. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetName) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetName. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        result = ((affymetrix_calvin_io::CDFProbeGroupInformation const *)arg1)->GetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeGroupInformation_GetCell) {
    {
        affymetrix_calvin_io::CDFProbeGroupInformation *arg1 = (affymetrix_calvin_io::CDFProbeGroupInformation *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::CDFProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFProbeGroupInformation_GetCell(self,cell_index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeGroupInformation_GetCell. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFProbeGroupInformation_GetCell. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        (arg1)->GetCell(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFProbeInformation) {
    {
        affymetrix_calvin_io::CDFProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFProbeInformation();");
        }
        result = (affymetrix_calvin_io::CDFProbeInformation *)new affymetrix_calvin_io::CDFProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetListIndex) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetListIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetListIndex. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetListIndex();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetExpos) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetExpos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetExpos. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (int)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetExpos();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetX) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetX. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetY) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetY. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetPBase) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetPBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetPBase. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetPBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeInformation_GetTBase) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeInformation_GetTBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeInformation_GetTBase. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        result = (int8_t)((affymetrix_calvin_io::CDFProbeInformation const *)arg1)->GetTBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFProbeInformation) {
    {
        affymetrix_calvin_io::CDFProbeInformation *arg1 = (affymetrix_calvin_io::CDFProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFProbeInformation. Expected _p_affymetrix_calvin_io__CDFProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFProbeSetInformation) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFProbeSetInformation();");
        }
        result = (affymetrix_calvin_io::CDFProbeSetInformation *)new affymetrix_calvin_io::CDFProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFProbeSetInformation) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetName) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetName. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = ((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetDirection) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        affymetrix_calvin_io::DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetDirection. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (affymetrix_calvin_io::DirectionType)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetNumLists) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetNumLists. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetNumGroups) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetNumGroups(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetNumGroups. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumGroups();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetNumCells) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetNumCells. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetNumCellsPerList) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetNumCellsPerList. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetProbeSetNumber) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetProbeSetNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetProbeSetNumber. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetGroupInformation) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        u_int32_t arg2 ;
        affymetrix_calvin_io::CDFProbeGroupInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetGroupInformation(self,groupIdx,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetGroupInformation. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFProbeSetInformation_GetGroupInformation. Expected _p_affymetrix_calvin_io__CDFProbeGroupInformation");
            }
        }
        (arg1)->GetGroupInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFProbeSetInformation_GetProbeSetType) {
    {
        affymetrix_calvin_io::CDFProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFProbeSetInformation *) 0 ;
        CDFDataTypeIds result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFProbeSetInformation_GetProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFProbeSetInformation_GetProbeSetType. Expected _p_affymetrix_calvin_io__CDFProbeSetInformation");
            }
        }
        result = (CDFDataTypeIds)((affymetrix_calvin_io::CDFProbeSetInformation const *)arg1)->GetProbeSetType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFQCProbeInformation) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFQCProbeInformation();");
        }
        result = (affymetrix_calvin_io::CDFQCProbeInformation *)new affymetrix_calvin_io::CDFQCProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeInformation_GetX) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeInformation_GetX. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeInformation_GetY) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeInformation_GetY. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeInformation_GetPLen) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeInformation_GetPLen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeInformation_GetPLen. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->GetPLen();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeInformation_IsPerfectMatchProbe) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeInformation_IsPerfectMatchProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeInformation_IsPerfectMatchProbe. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeInformation_IsBackgroundProbe) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeInformation_IsBackgroundProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeInformation_IsBackgroundProbe. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        result = (bool)((affymetrix_calvin_io::CDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFQCProbeInformation) {
    {
        affymetrix_calvin_io::CDFQCProbeInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFQCProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFQCProbeInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFQCProbeSetInformation) {
    {
        affymetrix_calvin_io::CDFQCProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFQCProbeSetInformation();");
        }
        result = (affymetrix_calvin_io::CDFQCProbeSetInformation *)new affymetrix_calvin_io::CDFQCProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFQCProbeSetInformation) {
    {
        affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFQCProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFQCProbeSetInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeSetInformation_GetQCProbeSetType) {
    {
        affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeSetInformation_GetQCProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeSetInformation_GetQCProbeSetType. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        result = ((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeSetInformation_GetNumCells) {
    {
        affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFQCProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeSetInformation_GetNumCells. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::CDFQCProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFQCProbeSetInformation_GetProbeInformation) {
    {
        affymetrix_calvin_io::CDFQCProbeSetInformation *arg1 = (affymetrix_calvin_io::CDFQCProbeSetInformation *) 0 ;
        int arg2 ;
        affymetrix_calvin_io::CDFQCProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFQCProbeSetInformation_GetProbeInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFQCProbeSetInformation_GetProbeInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeSetInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CDFQCProbeSetInformation_GetProbeInformation. Expected _p_affymetrix_calvin_io__CDFQCProbeInformation");
            }
        }
        (arg1)->GetProbeInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPBackgroundZone__SWIG_0) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPBackgroundZone();");
        }
        result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPBackgroundZone__SWIG_1) {
    {
        float arg1 ;
        float arg2 ;
        float arg3 ;
        float arg4 ;
        affymetrix_calvin_io::CHPBackgroundZone *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: new_CHPBackgroundZone(x,y,bg,smooth);");
        }
        arg1 = (float) SvNV(ST(0));
        
        arg2 = (float) SvNV(ST(1));
        
        arg3 = (float) SvNV(ST(2));
        
        arg4 = (float) SvNV(ST(3));
        
        result = (affymetrix_calvin_io::CHPBackgroundZone *)new affymetrix_calvin_io::CHPBackgroundZone(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPBackgroundZone) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPBackgroundZone__SWIG_0); return;
    }
    if (items == 4) {
        int _v;
        {
            _v = SvNIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvNIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPBackgroundZone__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_CHPBackgroundZone'");
    XSRETURN(0);
}


XS(_wrap_delete_CHPBackgroundZone) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPBackgroundZone(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPBackgroundZone. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_Clear) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPBackgroundZone_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_Clear. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_CHPBackgroundZone_assign) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        affymetrix_calvin_io::CHPBackgroundZone arg2 ;
        affymetrix_calvin_io::CHPBackgroundZone result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPBackgroundZone_CHPBackgroundZone_assign(self,zn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_CHPBackgroundZone_assign. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        {
            affymetrix_calvin_io::CHPBackgroundZone * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPBackgroundZone_CHPBackgroundZone_assign. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_io::CHPBackgroundZone * resultobj = new affymetrix_calvin_io::CHPBackgroundZone((affymetrix_calvin_io::CHPBackgroundZone &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_GetCenterX) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPBackgroundZone_GetCenterX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_GetCenterX. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterX();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_GetCenterY) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPBackgroundZone_GetCenterY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_GetCenterY. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetCenterY();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_GetBackground) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPBackgroundZone_GetBackground(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_GetBackground. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetBackground();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_GetSmoothFactor) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPBackgroundZone_GetSmoothFactor(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_GetSmoothFactor. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPBackgroundZone const *)arg1)->GetSmoothFactor();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_SetCenterX) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPBackgroundZone_SetCenterX(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_SetCenterX. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetCenterX(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_SetCenterY) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPBackgroundZone_SetCenterY(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_SetCenterY. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetCenterY(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_SetBackground) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPBackgroundZone_SetBackground(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_SetBackground. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetBackground(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPBackgroundZone_SetSmoothFactor) {
    {
        affymetrix_calvin_io::CHPBackgroundZone *arg1 = (affymetrix_calvin_io::CHPBackgroundZone *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPBackgroundZone_SetSmoothFactor(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPBackgroundZone_SetSmoothFactor. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSmoothFactor(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPData__SWIG_0) {
    {
        affymetrix_calvin_io::CHPData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPData();");
        }
        result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPData__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        affymetrix_calvin_io::CHPData *result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_CHPData(filename,type);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_CHPData.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of new_CHPData.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        result = (affymetrix_calvin_io::CHPData *)new affymetrix_calvin_io::CHPData((std::string const &)*arg1,(std::string const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPData) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPData__SWIG_0); return;
    }
    if (items == 2) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPData__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_CHPData'");
    XSRETURN(0);
}


XS(_wrap_delete_CHPData) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPData. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_Clear) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_Clear. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetFilename) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetFilename(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetFilename. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CHPData_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetFilename) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetFilename. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = ((affymetrix_calvin_io::CHPData const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetVersion) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetVersion. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (u_int8_t)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetMagic) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetMagic(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetMagic. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (u_int8_t)(arg1)->GetMagic();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetRows) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetRows. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (int32_t)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetRows) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetRows(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetRows. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetRows(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetCols) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetCols. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (int32_t)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetCols) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetCols(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetCols. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetCols(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetProgId) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetProgId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetProgId. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetProgId();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetProgId) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetProgId(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetProgId. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_SetProgId. Expected _p_std__wstring");
            }
        }
        (arg1)->SetProgId((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetArrayType) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetArrayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetArrayType. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetArrayType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetAssayType) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetAssayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetAssayType. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetAssayType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetArrayType) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetArrayType(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetArrayType. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_SetArrayType. Expected _p_std__wstring");
            }
        }
        (arg1)->SetArrayType((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetAlgName) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetAlgName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetAlgName. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetAlgName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetAlgName) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetAlgName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetAlgName. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_SetAlgName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetAlgName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetParentCell) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetParentCell(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetParentCell. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetParentCell();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetParentCell) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetParentCell(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetParentCell. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_SetParentCell. Expected _p_std__wstring");
            }
        }
        (arg1)->SetParentCell((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetAlgVersion) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetAlgVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetAlgVersion. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetAlgVersion();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetAlgVersion) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetAlgVersion(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetAlgVersion. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_SetAlgVersion. Expected _p_std__wstring");
            }
        }
        (arg1)->SetAlgVersion((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_AddAlgParam) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        std::wstring *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_AddAlgParam(self,name,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_AddAlgParam. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_AddAlgParam. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_AddAlgParam. Expected _p_std__wstring");
            }
        }
        (arg1)->AddAlgParam((std::wstring const &)*arg2,(std::wstring const &)*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetAlgParam) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        ParameterNameValueType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_GetAlgParam(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetAlgParam. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_GetAlgParam. Expected _p_std__wstring");
            }
        }
        result = (arg1)->GetAlgParam((std::wstring const &)*arg2);
        
        {
            ParameterNameValueType * resultobj = new ParameterNameValueType((ParameterNameValueType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_AddChipSum) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        std::wstring *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_AddChipSum(self,name,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_AddChipSum. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_AddChipSum. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_AddChipSum. Expected _p_std__wstring");
            }
        }
        (arg1)->AddChipSum((std::wstring const &)*arg2,(std::wstring const &)*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetChipSums) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        SwigValueWrapper<std::vector<affymetrix_calvin_parameter::ParameterNameValueType > > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetChipSums(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetChipSums. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (arg1)->GetChipSums();
        
        {
            ParameterNameValueTypeVector * resultobj = new ParameterNameValueTypeVector((ParameterNameValueTypeVector &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetChipSum) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        std::wstring *arg2 = 0 ;
        ParameterNameValueType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_GetChipSum(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetChipSum. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPData_GetChipSum. Expected _p_std__wstring");
            }
        }
        result = (arg1)->GetChipSum((std::wstring const &)*arg2);
        
        {
            ParameterNameValueType * resultobj = new ParameterNameValueType((ParameterNameValueType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetFileHeader) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        FileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetFileHeader. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (FileHeader *)(arg1)->GetFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetGenericData) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        GenericData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetGenericData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetGenericData. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        {
            GenericData &_result_ref = (arg1)->GetGenericData();
            result = (GenericData *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericData, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetEntryCount) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetEntryCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetEntryCount. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetEntryCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetEntryCount) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetEntryCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetEntryCount. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (int32_t)(arg1)->GetEntryCount();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetExpressionEntry) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        CHPExpressionEntry *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_GetExpressionEntry(self,row,e);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetExpressionEntry. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_GetExpressionEntry. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        (arg1)->GetExpressionEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetGenotypeEntry) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        CHPGenotypeEntry *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_GetGenotypeEntry(self,row,e);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetGenotypeEntry. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_GetGenotypeEntry. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        (arg1)->GetGenotypeEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetUniversalEntry) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        CHPUniversalEntry *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_GetUniversalEntry(self,row,e);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetUniversalEntry. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_GetUniversalEntry. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        (arg1)->GetUniversalEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetBackgroundZoneCnt) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPData_GetBackgroundZoneCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetBackgroundZoneCnt. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        result = (int32_t)(arg1)->GetBackgroundZoneCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_SetBackgroundZoneCnt) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPData_SetBackgroundZoneCnt(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_SetBackgroundZoneCnt. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetBackgroundZoneCnt(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetBackgroundZone) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::CHPBackgroundZone *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CHPData_GetBackgroundZone(self,row,zone);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetBackgroundZone. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone,0) < 0) {
                SWIG_croak("Type error in argument 3 of CHPData_GetBackgroundZone. Expected _p_affymetrix_calvin_io__CHPBackgroundZone");
            }
        }
        (arg1)->GetBackgroundZone(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPData_GetBackgroundZones) {
    {
        affymetrix_calvin_io::CHPData *arg1 = (affymetrix_calvin_io::CHPData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        affymetrix_calvin_io::CHPBackgroundZoneVector *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CHPData_GetBackgroundZones(self,row,rowCnt,zones);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPData_GetBackgroundZones. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CHPData_GetBackgroundZones. Expected _p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t");
            }
        }
        (arg1)->GetBackgroundZones(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPExpressionEntry__SWIG_0) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPExpressionEntry();");
        }
        result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPExpressionEntry__SWIG_1) {
    {
        std::wstring *arg1 = 0 ;
        u_int8_t arg2 ;
        float arg3 ;
        float arg4 ;
        u_int16_t arg5 ;
        u_int16_t arg6 ;
        u_int8_t arg7 ;
        float arg8 ;
        float arg9 ;
        float arg10 ;
        float arg11 ;
        u_int16_t arg12 ;
        affymetrix_calvin_io::CHPExpressionEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 12) || (items > 12)) {
            SWIG_croak("Usage: new_CHPExpressionEntry(probeSetname,detection,detectionPValue,signal,numPairs,numPairsUsed,change,changePValue,sigLogRatio,sigLogRatioLo,sigLogRatioHi,commonPairs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CHPExpressionEntry. Expected _p_std__wstring");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        arg3 = (float) SvNV(ST(2));
        
        arg4 = (float) SvNV(ST(3));
        
        arg5 = (u_int16_t) SvUV(ST(4));
        arg6 = (u_int16_t) SvUV(ST(5));
        arg7 = (u_int8_t) SvUV(ST(6));
        arg8 = (float) SvNV(ST(7));
        
        arg9 = (float) SvNV(ST(8));
        
        arg10 = (float) SvNV(ST(9));
        
        arg11 = (float) SvNV(ST(10));
        
        arg12 = (u_int16_t) SvUV(ST(11));
        result = (affymetrix_calvin_io::CHPExpressionEntry *)new affymetrix_calvin_io::CHPExpressionEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPExpressionEntry) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPExpressionEntry__SWIG_0); return;
    }
    if (items == 12) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = SvIOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    {
                                        _v = SvNIOK(ST(7)) ? 1 : 0;
                                    }
                                    if (_v) {
                                        {
                                            _v = SvNIOK(ST(8)) ? 1 : 0;
                                        }
                                        if (_v) {
                                            {
                                                _v = SvNIOK(ST(9)) ? 1 : 0;
                                            }
                                            if (_v) {
                                                {
                                                    _v = SvNIOK(ST(10)) ? 1 : 0;
                                                }
                                                if (_v) {
                                                    {
                                                        _v = SvIOK(ST(11)) ? 1 : 0;
                                                    }
                                                    if (_v) {
                                                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPExpressionEntry__SWIG_1); return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_CHPExpressionEntry'");
    XSRETURN(0);
}


XS(_wrap_delete_CHPExpressionEntry) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPExpressionEntry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPExpressionEntry. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_Clear) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_Clear. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_CHPExpressionEntry_assign) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        affymetrix_calvin_io::CHPExpressionEntry arg2 ;
        affymetrix_calvin_io::CHPExpressionEntry result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_CHPExpressionEntry_assign(self,zn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_CHPExpressionEntry_assign. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        {
            affymetrix_calvin_io::CHPExpressionEntry * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPExpressionEntry_CHPExpressionEntry_assign. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_io::CHPExpressionEntry * resultobj = new affymetrix_calvin_io::CHPExpressionEntry((affymetrix_calvin_io::CHPExpressionEntry &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetProbeSetName) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetProbeSetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetProbeSetName. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = ((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetProbeSetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetDetection) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetDetection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetDetection. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetection();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetDetectionPValue) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetDetectionPValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetDetectionPValue. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetDetectionPValue();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetSignal) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetSignal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetSignal. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSignal();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetNumPairs) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetNumPairs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetNumPairs. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairs();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetNumPairsUsed) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetNumPairsUsed(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetNumPairsUsed. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetNumPairsUsed();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetChange) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetChange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetChange. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChange();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetChangePValue) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetChangePValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetChangePValue. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetChangePValue();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetSigLogRatio) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetSigLogRatio(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetSigLogRatio. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatio();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetSigLogRatioLo) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetSigLogRatioLo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetSigLogRatioLo. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioLo();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetSigLogRatioHi) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetSigLogRatioHi(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetSigLogRatioHi. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetSigLogRatioHi();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_GetCommonPairs) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPExpressionEntry_GetCommonPairs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_GetCommonPairs. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        result = (u_int16_t)((affymetrix_calvin_io::CHPExpressionEntry const *)arg1)->GetCommonPairs();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetProbeSetName) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetProbeSetName(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetProbeSetName. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPExpressionEntry_SetProbeSetName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetProbeSetName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetDetection) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetDetection(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetDetection. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetDetection(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetDetectionPValue) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetDetectionPValue(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetDetectionPValue. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetDetectionPValue(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetSignal) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetSignal(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetSignal. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSignal(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetNumPairs) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetNumPairs(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetNumPairs. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetNumPairs(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetNumPairsUsed) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetNumPairsUsed(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetNumPairsUsed. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetNumPairsUsed(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetChange) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetChange(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetChange. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetChange(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetChangePValue) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetChangePValue(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetChangePValue. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetChangePValue(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetSigLogRatio) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetSigLogRatio(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetSigLogRatio. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSigLogRatio(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetSigLogRatioLo) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetSigLogRatioLo(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetSigLogRatioLo. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSigLogRatioLo(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetSigLogRatioHi) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetSigLogRatioHi(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetSigLogRatioHi. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSigLogRatioHi(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPExpressionEntry_SetCommonPairs) {
    {
        affymetrix_calvin_io::CHPExpressionEntry *arg1 = (affymetrix_calvin_io::CHPExpressionEntry *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPExpressionEntry_SetCommonPairs(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPExpressionEntry_SetCommonPairs. Expected _p_affymetrix_calvin_io__CHPExpressionEntry");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetCommonPairs(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPGenotypeEntry__SWIG_0) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPGenotypeEntry();");
        }
        result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPGenotypeEntry__SWIG_1) {
    {
        std::wstring *arg1 = 0 ;
        u_int8_t arg2 ;
        float arg3 ;
        float arg4 ;
        float arg5 ;
        float arg6 ;
        float arg7 ;
        float arg8 ;
        float arg9 ;
        affymetrix_calvin_io::CHPGenotypeEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 9) || (items > 9)) {
            SWIG_croak("Usage: new_CHPGenotypeEntry(probeSetname,call,confidence,RAS1,RAS2,AACall,ABCall,BBCall,NoCall);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CHPGenotypeEntry. Expected _p_std__wstring");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        arg3 = (float) SvNV(ST(2));
        
        arg4 = (float) SvNV(ST(3));
        
        arg5 = (float) SvNV(ST(4));
        
        arg6 = (float) SvNV(ST(5));
        
        arg7 = (float) SvNV(ST(6));
        
        arg8 = (float) SvNV(ST(7));
        
        arg9 = (float) SvNV(ST(8));
        
        result = (affymetrix_calvin_io::CHPGenotypeEntry *)new affymetrix_calvin_io::CHPGenotypeEntry((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPGenotypeEntry) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPGenotypeEntry__SWIG_0); return;
    }
    if (items == 9) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvNIOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = SvNIOK(ST(5)) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = SvNIOK(ST(6)) ? 1 : 0;
                                }
                                if (_v) {
                                    {
                                        _v = SvNIOK(ST(7)) ? 1 : 0;
                                    }
                                    if (_v) {
                                        {
                                            _v = SvNIOK(ST(8)) ? 1 : 0;
                                        }
                                        if (_v) {
                                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPGenotypeEntry__SWIG_1); return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'new_CHPGenotypeEntry'");
    XSRETURN(0);
}


XS(_wrap_delete_CHPGenotypeEntry) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPGenotypeEntry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPGenotypeEntry. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_Clear) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_Clear. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_CHPGenotypeEntry_assign) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        affymetrix_calvin_io::CHPGenotypeEntry arg2 ;
        affymetrix_calvin_io::CHPGenotypeEntry result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_CHPGenotypeEntry_assign(self,zn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_CHPGenotypeEntry_assign. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        {
            affymetrix_calvin_io::CHPGenotypeEntry * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPGenotypeEntry_CHPGenotypeEntry_assign. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_io::CHPGenotypeEntry * resultobj = new affymetrix_calvin_io::CHPGenotypeEntry((affymetrix_calvin_io::CHPGenotypeEntry &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetProbeSetName) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetProbeSetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetProbeSetName. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = ((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetProbeSetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetCall();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetConfidence) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetConfidence(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetConfidence. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetConfidence();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetRAS1) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetRAS1(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetRAS1. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS1();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetRAS2) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetRAS2(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetRAS2. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetRAS2();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetAACall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetAACall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetAACall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetAACall();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetABCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetABCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetABCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetABCall();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetBBCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetBBCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetBBCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetBBCall();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_GetNoCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPGenotypeEntry_GetNoCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_GetNoCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPGenotypeEntry const *)arg1)->GetNoCall();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetProbeSetName) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetProbeSetName(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetProbeSetName. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPGenotypeEntry_SetProbeSetName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetProbeSetName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetConfidence) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetConfidence(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetConfidence. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetConfidence(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetRAS1) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetRAS1(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetRAS1. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetRAS1(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetRAS2) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetRAS2(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetRAS2. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetRAS2(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetAACall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetAACall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetAACall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetAACall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetABCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetABCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetABCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetABCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetBBCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetBBCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetBBCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetBBCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPGenotypeEntry_SetNoCall) {
    {
        affymetrix_calvin_io::CHPGenotypeEntry *arg1 = (affymetrix_calvin_io::CHPGenotypeEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPGenotypeEntry_SetNoCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPGenotypeEntry_SetNoCall. Expected _p_affymetrix_calvin_io__CHPGenotypeEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetNoCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPUniversalEntry__SWIG_0) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPUniversalEntry();");
        }
        result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPUniversalEntry__SWIG_1) {
    {
        float arg1 ;
        affymetrix_calvin_io::CHPUniversalEntry *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_CHPUniversalEntry(background);");
        }
        arg1 = (float) SvNV(ST(0));
        
        result = (affymetrix_calvin_io::CHPUniversalEntry *)new affymetrix_calvin_io::CHPUniversalEntry(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CHPUniversalEntry) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPUniversalEntry__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvNIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CHPUniversalEntry__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_CHPUniversalEntry'");
    XSRETURN(0);
}


XS(_wrap_delete_CHPUniversalEntry) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPUniversalEntry(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPUniversalEntry. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPUniversalEntry_Clear) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPUniversalEntry_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPUniversalEntry_Clear. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPUniversalEntry_CHPUniversalEntry_assign) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
        affymetrix_calvin_io::CHPUniversalEntry arg2 ;
        affymetrix_calvin_io::CHPUniversalEntry result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPUniversalEntry_CHPUniversalEntry_assign(self,zn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPUniversalEntry_CHPUniversalEntry_assign. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        {
            affymetrix_calvin_io::CHPUniversalEntry * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPUniversalEntry_CHPUniversalEntry_assign. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_calvin_io::CHPUniversalEntry * resultobj = new affymetrix_calvin_io::CHPUniversalEntry((affymetrix_calvin_io::CHPUniversalEntry &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPUniversalEntry_GetBackground) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPUniversalEntry_GetBackground(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPUniversalEntry_GetBackground. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        result = (float)((affymetrix_calvin_io::CHPUniversalEntry const *)arg1)->GetBackground();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPUniversalEntry_SetBackground) {
    {
        affymetrix_calvin_io::CHPUniversalEntry *arg1 = (affymetrix_calvin_io::CHPUniversalEntry *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPUniversalEntry_SetBackground(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPUniversalEntry_SetBackground. Expected _p_affymetrix_calvin_io__CHPUniversalEntry");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetBackground(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XYCoord__SWIG_0) {
    {
        affymetrix_calvin_io::XYCoord *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_XYCoord();");
        }
        result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__XYCoord, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XYCoord__SWIG_1) {
    {
        int16_t arg1 ;
        int16_t arg2 ;
        affymetrix_calvin_io::XYCoord *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_XYCoord(x,y);");
        }
        arg1 = (int16_t) SvIV(ST(0));
        arg2 = (int16_t) SvIV(ST(1));
        result = (affymetrix_calvin_io::XYCoord *)new affymetrix_calvin_io::XYCoord(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__XYCoord, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_XYCoord) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XYCoord__SWIG_0); return;
    }
    if (items == 2) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_XYCoord__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'new_XYCoord'");
    XSRETURN(0);
}


XS(_wrap_delete_XYCoord) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_XYCoord(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_XYCoord. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_xCoord_set) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_xCoord_set(self,xCoord);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_xCoord_set. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        arg2 = (int16_t) SvIV(ST(1));
        if (arg1) (arg1)->xCoord = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_xCoord_get) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XYCoord_xCoord_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_xCoord_get. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (int16_t) ((arg1)->xCoord);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_yCoord_set) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_yCoord_set(self,yCoord);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_yCoord_set. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        arg2 = (int16_t) SvIV(ST(1));
        if (arg1) (arg1)->yCoord = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_yCoord_get) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: XYCoord_yCoord_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_yCoord_get. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (int16_t) ((arg1)->yCoord);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_XYCoord_assign) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        affymetrix_calvin_io::XYCoord *arg2 = 0 ;
        affymetrix_calvin_io::XYCoord result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_XYCoord_assign(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_XYCoord_assign. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 2 of XYCoord_XYCoord_assign. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (arg1)->operator =((affymetrix_calvin_io::XYCoord const &)*arg2);
        
        {
            affymetrix_calvin_io::XYCoord * resultobj = new affymetrix_calvin_io::XYCoord((affymetrix_calvin_io::XYCoord &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__XYCoord, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_XYCoord_equals) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        affymetrix_calvin_io::XYCoord *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_XYCoord_equals(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_XYCoord_equals. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 2 of XYCoord_XYCoord_equals. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator ==((affymetrix_calvin_io::XYCoord const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_XYCoord_not_equals) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        affymetrix_calvin_io::XYCoord *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_XYCoord_not_equals(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_XYCoord_not_equals. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 2 of XYCoord_XYCoord_not_equals. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator !=((affymetrix_calvin_io::XYCoord const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_XYCoord_XYCoord_less_than) {
    {
        affymetrix_calvin_io::XYCoord *arg1 = (affymetrix_calvin_io::XYCoord *) 0 ;
        affymetrix_calvin_io::XYCoord *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: XYCoord_XYCoord_less_than(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 1 of XYCoord_XYCoord_less_than. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__XYCoord,0) < 0) {
                SWIG_croak("Type error in argument 2 of XYCoord_XYCoord_less_than. Expected _p_affymetrix_calvin_io__XYCoord");
            }
        }
        result = (bool)((affymetrix_calvin_io::XYCoord const *)arg1)->operator <((affymetrix_calvin_io::XYCoord const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CelFileData__SWIG_0) {
    {
        affymetrix_calvin_io::CelFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CelFileData();");
        }
        result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CelFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CelFileData__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        affymetrix_calvin_io::CelFileData *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_CelFileData(filename);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_CelFileData.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        result = (affymetrix_calvin_io::CelFileData *)new affymetrix_calvin_io::CelFileData((std::string const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CelFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CelFileData) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CelFileData__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CelFileData__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_CelFileData'");
    XSRETURN(0);
}


XS(_wrap_delete_CelFileData) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CelFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CelFileData. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_Clear) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_Clear. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetFilename) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetFilename(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetFilename. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CelFileData_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetFilename) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetFilename. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = ((affymetrix_calvin_io::CelFileData const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetIntensityCount) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetIntensityCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetIntensityCount. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetIntensityCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetStdDevCount) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetStdDevCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetStdDevCount. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetStdDevCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetPixelCount) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetPixelCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetPixelCount. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetPixelCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetOutlierCount) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetOutlierCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetOutlierCount. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetOutlierCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetMaskCount) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetMaskCount(self,ln);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetMaskCount. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetMaskCount(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetFileHeader) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        FileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetFileHeader. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (FileHeader *)(arg1)->GetFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetVersion) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetVersion. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (u_int8_t)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetArrayType) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetArrayType(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetArrayType. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_SetArrayType. Expected _p_std__wstring");
            }
        }
        (arg1)->SetArrayType((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetArrayType) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetArrayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetArrayType. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (arg1)->GetArrayType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetAlgorithmName) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetAlgorithmName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetAlgorithmName. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_SetAlgorithmName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetAlgorithmName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetAlgorithmName) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetAlgorithmName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetAlgorithmName. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (arg1)->GetAlgorithmName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetRows) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetRows(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetRows. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetRows(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetRows) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetRows. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (int32_t)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_SetCols) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_SetCols(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_SetCols. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetCols(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetCols) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetCols. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (int32_t)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetNumCells) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetNumCells. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (int32_t)(arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetAlgorithmParameters) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        ParameterNameValueTypeVector *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_GetAlgorithmParameters(self,algParams);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetAlgorithmParameters. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_GetAlgorithmParameters. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t");
            }
        }
        (arg1)->GetAlgorithmParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_FindAlgorithmParameter) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        std::wstring *arg2 = 0 ;
        ParameterNameValueType *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CelFileData_FindAlgorithmParameter(self,name,param);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_FindAlgorithmParameter. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_FindAlgorithmParameter. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CelFileData_FindAlgorithmParameter. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)(arg1)->FindAlgorithmParameter((std::wstring const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_AddAlgorithmParameter) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        ParameterNameValueType *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_AddAlgorithmParameter(self,nvt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_AddAlgorithmParameter. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_AddAlgorithmParameter. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        (arg1)->AddAlgorithmParameter(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetData) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        float *arg3 = 0 ;
        float *arg4 = 0 ;
        int16_t *arg5 = 0 ;
        bool *arg6 = 0 ;
        bool *arg7 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: CelFileData_GetData(self,cellIdx,intensity,stdev,numPixels,outlier,masked);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetData. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 3 of CelFileData_GetData. Expected _p_float");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetData. Expected _p_float");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 5 of CelFileData_GetData. Expected _p_short");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(5), (void **) &arg6, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 6 of CelFileData_GetData. Expected _p_bool");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(6), (void **) &arg7, SWIGTYPE_p_bool,0) < 0) {
                SWIG_croak("Type error in argument 7 of CelFileData_GetData. Expected _p_bool");
            }
        }
        (arg1)->GetData(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_HasStdev) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_HasStdev(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_HasStdev. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (bool)(arg1)->HasStdev();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_HasNumPixels) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileData_HasNumPixels(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_HasNumPixels. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        result = (bool)(arg1)->HasNumPixels();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetIntensities) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        FloatVector *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CelFileData_GetIntensities(self,cellIdxStart,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetIntensities. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTfloat_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetIntensities. Expected _p_std__vectorTfloat_t");
            }
        }
        result = (bool)(arg1)->GetIntensities(arg2,arg3,*arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetStdev) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        FloatVector *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CelFileData_GetStdev(self,cellIdxStart,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetStdev. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTfloat_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetStdev. Expected _p_std__vectorTfloat_t");
            }
        }
        result = (bool)(arg1)->GetStdev(arg2,arg3,*arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetNumPixels) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        Int16Vector *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CelFileData_GetNumPixels(self,cellIdxStart,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetNumPixels. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTshort_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetNumPixels. Expected _p_std__vectorTshort_t");
            }
        }
        result = (bool)(arg1)->GetNumPixels(arg2,arg3,*arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetOutliers) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        BoolVector *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CelFileData_GetOutliers(self,cellIdxStart,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetOutliers. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTbool_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetOutliers. Expected _p_std__vectorTbool_t");
            }
        }
        result = (bool)(arg1)->GetOutliers(arg2,arg3,*arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetMasked) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        BoolVector *arg4 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CelFileData_GetMasked(self,cellIdxStart,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetMasked. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__vectorTbool_t,0) < 0) {
                SWIG_croak("Type error in argument 4 of CelFileData_GetMasked. Expected _p_std__vectorTbool_t");
            }
        }
        result = (bool)(arg1)->GetMasked(arg2,arg3,*arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetOutlierCoords) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_GetOutlierCoords(self,coords);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetOutlierCoords. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__XYCoord_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_GetOutlierCoords. Expected _p_std__vectorTaffymetrix_calvin_io__XYCoord_t");
            }
        }
        (arg1)->GetOutlierCoords(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileData_GetMaskedCoords) {
    {
        affymetrix_calvin_io::CelFileData *arg1 = (affymetrix_calvin_io::CelFileData *) 0 ;
        affymetrix_calvin_io::XYCoordVector *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileData_GetMaskedCoords(self,coords);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileData_GetMaskedCoords. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__XYCoord_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileData_GetMaskedCoords. Expected _p_std__vectorTaffymetrix_calvin_io__XYCoord_t");
            }
        }
        (arg1)->GetMaskedCoords(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ColumnType) {
    {
        affymetrix_calvin_io::DataSetColumnTypes arg1 ;
        int32_t arg2 ;
        affymetrix_calvin_io::ColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_ColumnType(type_,totalSize);");
        }
        arg1 = (affymetrix_calvin_io::DataSetColumnTypes) SvIV(ST(0));
        arg2 = (int32_t) SvIV(ST(1));
        result = (affymetrix_calvin_io::ColumnType *)new affymetrix_calvin_io::ColumnType(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__ColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ColumnType_ColumnType_equals) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        affymetrix_calvin_io::ColumnType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ColumnType_ColumnType_equals(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ColumnType_ColumnType_equals. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ColumnType_ColumnType_equals. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator ==((affymetrix_calvin_io::ColumnType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ColumnType_ColumnType_not_equals) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        affymetrix_calvin_io::ColumnType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ColumnType_ColumnType_not_equals(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ColumnType_ColumnType_not_equals. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 2 of ColumnType_ColumnType_not_equals. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        result = (bool)((affymetrix_calvin_io::ColumnType const *)arg1)->operator !=((affymetrix_calvin_io::ColumnType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ColumnType_GetColumnType) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        affymetrix_calvin_io::DataSetColumnTypes result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ColumnType_GetColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ColumnType_GetColumnType. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        result = (affymetrix_calvin_io::DataSetColumnTypes)((affymetrix_calvin_io::ColumnType const *)arg1)->GetColumnType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ColumnType_GetSize) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ColumnType_GetSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ColumnType_GetSize. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ColumnType_GetLength) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ColumnType_GetLength(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ColumnType_GetLength. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::ColumnType const *)arg1)->GetLength();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ColumnType) {
    {
        affymetrix_calvin_io::ColumnType *arg1 = (affymetrix_calvin_io::ColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ColumnType. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ByteColumnType) {
    {
        affymetrix_calvin_io::ByteColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ByteColumnType();");
        }
        result = (affymetrix_calvin_io::ByteColumnType *)new affymetrix_calvin_io::ByteColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__ByteColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ByteColumnType) {
    {
        affymetrix_calvin_io::ByteColumnType *arg1 = (affymetrix_calvin_io::ByteColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ByteColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ByteColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ByteColumnType. Expected _p_affymetrix_calvin_io__ByteColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UByteColumnType) {
    {
        affymetrix_calvin_io::UByteColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_UByteColumnType();");
        }
        result = (affymetrix_calvin_io::UByteColumnType *)new affymetrix_calvin_io::UByteColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__UByteColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UByteColumnType) {
    {
        affymetrix_calvin_io::UByteColumnType *arg1 = (affymetrix_calvin_io::UByteColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UByteColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__UByteColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UByteColumnType. Expected _p_affymetrix_calvin_io__UByteColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ShortColumnType) {
    {
        affymetrix_calvin_io::ShortColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ShortColumnType();");
        }
        result = (affymetrix_calvin_io::ShortColumnType *)new affymetrix_calvin_io::ShortColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__ShortColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ShortColumnType) {
    {
        affymetrix_calvin_io::ShortColumnType *arg1 = (affymetrix_calvin_io::ShortColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ShortColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ShortColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ShortColumnType. Expected _p_affymetrix_calvin_io__ShortColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UShortColumnType) {
    {
        affymetrix_calvin_io::UShortColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_UShortColumnType();");
        }
        result = (affymetrix_calvin_io::UShortColumnType *)new affymetrix_calvin_io::UShortColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__UShortColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UShortColumnType) {
    {
        affymetrix_calvin_io::UShortColumnType *arg1 = (affymetrix_calvin_io::UShortColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UShortColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__UShortColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UShortColumnType. Expected _p_affymetrix_calvin_io__UShortColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_IntColumnType) {
    {
        affymetrix_calvin_io::IntColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_IntColumnType();");
        }
        result = (affymetrix_calvin_io::IntColumnType *)new affymetrix_calvin_io::IntColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__IntColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_IntColumnType) {
    {
        affymetrix_calvin_io::IntColumnType *arg1 = (affymetrix_calvin_io::IntColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_IntColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__IntColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_IntColumnType. Expected _p_affymetrix_calvin_io__IntColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UIntColumnType) {
    {
        affymetrix_calvin_io::UIntColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_UIntColumnType();");
        }
        result = (affymetrix_calvin_io::UIntColumnType *)new affymetrix_calvin_io::UIntColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__UIntColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UIntColumnType) {
    {
        affymetrix_calvin_io::UIntColumnType *arg1 = (affymetrix_calvin_io::UIntColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UIntColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__UIntColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UIntColumnType. Expected _p_affymetrix_calvin_io__UIntColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FloatColumnType) {
    {
        affymetrix_calvin_io::FloatColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FloatColumnType();");
        }
        result = (affymetrix_calvin_io::FloatColumnType *)new affymetrix_calvin_io::FloatColumnType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FloatColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FloatColumnType) {
    {
        affymetrix_calvin_io::FloatColumnType *arg1 = (affymetrix_calvin_io::FloatColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FloatColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FloatColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FloatColumnType. Expected _p_affymetrix_calvin_io__FloatColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ASCIIColumnType) {
    {
        int32_t arg1 ;
        affymetrix_calvin_io::ASCIIColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_ASCIIColumnType(maxLn);");
        }
        arg1 = (int32_t) SvIV(ST(0));
        result = (affymetrix_calvin_io::ASCIIColumnType *)new affymetrix_calvin_io::ASCIIColumnType(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__ASCIIColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ASCIIColumnType) {
    {
        affymetrix_calvin_io::ASCIIColumnType *arg1 = (affymetrix_calvin_io::ASCIIColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ASCIIColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ASCIIColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ASCIIColumnType. Expected _p_affymetrix_calvin_io__ASCIIColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UnicodeColumnType) {
    {
        int32_t arg1 ;
        affymetrix_calvin_io::UnicodeColumnType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_UnicodeColumnType(maxLn);");
        }
        arg1 = (int32_t) SvIV(ST(0));
        result = (affymetrix_calvin_io::UnicodeColumnType *)new affymetrix_calvin_io::UnicodeColumnType(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__UnicodeColumnType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UnicodeColumnType) {
    {
        affymetrix_calvin_io::UnicodeColumnType *arg1 = (affymetrix_calvin_io::UnicodeColumnType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UnicodeColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__UnicodeColumnType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UnicodeColumnType. Expected _p_affymetrix_calvin_io__UnicodeColumnType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataSetNotOpenException) {
    {
        affymetrix_calvin_exceptions::DataSetNotOpenException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataSetNotOpenException();");
        }
        result = (affymetrix_calvin_exceptions::DataSetNotOpenException *)new affymetrix_calvin_exceptions::DataSetNotOpenException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotOpenException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataSetNotOpenException) {
    {
        affymetrix_calvin_exceptions::DataSetNotOpenException *arg1 = (affymetrix_calvin_exceptions::DataSetNotOpenException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataSetNotOpenException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotOpenException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataSetNotOpenException. Expected _p_affymetrix_calvin_exceptions__DataSetNotOpenException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ColumnIndexOutOfBoundsException) {
    {
        affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ColumnIndexOutOfBoundsException();");
        }
        result = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ColumnIndexOutOfBoundsException) {
    {
        affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ColumnIndexOutOfBoundsException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ColumnIndexOutOfBoundsException. Expected _p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_RowIndexOutOfBoundsException) {
    {
        affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_RowIndexOutOfBoundsException();");
        }
        result = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *)new affymetrix_calvin_exceptions::RowIndexOutOfBoundsException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_RowIndexOutOfBoundsException) {
    {
        affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *arg1 = (affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_RowIndexOutOfBoundsException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_RowIndexOutOfBoundsException. Expected _p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UnexpectedColumnTypeException) {
    {
        affymetrix_calvin_exceptions::UnexpectedColumnTypeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_UnexpectedColumnTypeException();");
        }
        result = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *)new affymetrix_calvin_exceptions::UnexpectedColumnTypeException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UnexpectedColumnTypeException) {
    {
        affymetrix_calvin_exceptions::UnexpectedColumnTypeException *arg1 = (affymetrix_calvin_exceptions::UnexpectedColumnTypeException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UnexpectedColumnTypeException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UnexpectedColumnTypeException. Expected _p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupNotFoundException) {
    {
        affymetrix_calvin_exceptions::DataGroupNotFoundException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataGroupNotFoundException();");
        }
        result = (affymetrix_calvin_exceptions::DataGroupNotFoundException *)new affymetrix_calvin_exceptions::DataGroupNotFoundException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__DataGroupNotFoundException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataGroupNotFoundException) {
    {
        affymetrix_calvin_exceptions::DataGroupNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataGroupNotFoundException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataGroupNotFoundException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__DataGroupNotFoundException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataGroupNotFoundException. Expected _p_affymetrix_calvin_exceptions__DataGroupNotFoundException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataSetNotFoundException) {
    {
        affymetrix_calvin_exceptions::DataSetNotFoundException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataSetNotFoundException();");
        }
        result = (affymetrix_calvin_exceptions::DataSetNotFoundException *)new affymetrix_calvin_exceptions::DataSetNotFoundException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotFoundException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataSetNotFoundException) {
    {
        affymetrix_calvin_exceptions::DataSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::DataSetNotFoundException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataSetNotFoundException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotFoundException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataSetNotFoundException. Expected _p_affymetrix_calvin_exceptions__DataSetNotFoundException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ProbeSetNotFoundException) {
    {
        affymetrix_calvin_exceptions::ProbeSetNotFoundException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ProbeSetNotFoundException();");
        }
        result = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *)new affymetrix_calvin_exceptions::ProbeSetNotFoundException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__ProbeSetNotFoundException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ProbeSetNotFoundException) {
    {
        affymetrix_calvin_exceptions::ProbeSetNotFoundException *arg1 = (affymetrix_calvin_exceptions::ProbeSetNotFoundException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ProbeSetNotFoundException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__ProbeSetNotFoundException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ProbeSetNotFoundException. Expected _p_affymetrix_calvin_exceptions__ProbeSetNotFoundException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFAccessNotSupportedByModeException) {
    {
        affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFAccessNotSupportedByModeException();");
        }
        result = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *)new affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFAccessNotSupportedByModeException) {
    {
        affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *arg1 = (affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFAccessNotSupportedByModeException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFAccessNotSupportedByModeException. Expected _p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroup) {
    {
        std::string *arg1 = 0 ;
        DataGroupHeader *arg2 = 0 ;
        void *arg3 = (void *) 0 ;
        affymetrix_calvin_io::DataGroup *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: new_DataGroup(filename,dch,handle);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_DataGroup.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_DataGroup. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_DataGroup. Expected _p_void");
            }
        }
        result = (affymetrix_calvin_io::DataGroup *)new affymetrix_calvin_io::DataGroup((std::string const &)*arg1,(DataGroupHeader const &)*arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroup, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroup_Header) {
    {
        affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroup_Header(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroup,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroup_Header. Expected _p_affymetrix_calvin_io__DataGroup");
            }
        }
        {
            affymetrix_calvin_io::DataGroupHeader const &_result_ref = (arg1)->Header();
            result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroup_DataSet__SWIG_0) {
    {
        affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
        u_int32_t arg2 ;
        affymetrix_calvin_io::DataSet *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroup_DataSet(self,dataSetIdx);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroup,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroup_DataSet. Expected _p_affymetrix_calvin_io__DataGroup");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        try {
            result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSet, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroup_DataSet__SWIG_1) {
    {
        affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_io::DataSet *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroup_DataSet(self,dataSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroup,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroup_DataSet. Expected _p_affymetrix_calvin_io__DataGroup");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroup_DataSet. Expected _p_std__wstring");
            }
        }
        try {
            result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSet, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroup_DataSet) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroup, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataGroup_DataSet__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroup, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataGroup_DataSet__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DataGroup_DataSet'");
    XSRETURN(0);
}


XS(_wrap_delete_DataGroup) {
    {
        affymetrix_calvin_io::DataGroup *arg1 = (affymetrix_calvin_io::DataGroup *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataGroup(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroup,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataGroup. Expected _p_affymetrix_calvin_io__DataGroup");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupHeader__SWIG_0) {
    {
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataGroupHeader();");
        }
        result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupHeader__SWIG_1) {
    {
        std::wstring *arg1 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_DataGroupHeader(n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DataGroupHeader. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_io::DataGroupHeader *)new affymetrix_calvin_io::DataGroupHeader((std::wstring const &)*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupHeader) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DataGroupHeader__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_DataGroupHeader__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_DataGroupHeader'");
    XSRETURN(0);
}


XS(_wrap_delete_DataGroupHeader) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataGroupHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataGroupHeader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_Clear) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupHeader_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_Clear. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_SetName) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_SetName(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_SetName. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeader_SetName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetName) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupHeader_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetName. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetDataSetCnt) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupHeader_GetDataSetCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetDataSetCnt. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_AddDataSetHdr) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        DataSetHeader *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_AddDataSetHdr(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_AddDataSetHdr. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeader_AddDataSetHdr. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddDataSetHdr((DataSetHeader const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetDataSet) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        int32_t arg2 ;
        DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_GetDataSet(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetDataSet. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            DataSetHeader &_result_ref = (arg1)->GetDataSet(arg2);
            result = (DataSetHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetDataSetConst) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        int32_t arg2 ;
        DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_GetDataSetConst(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetDataSetConst. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            DataSetHeader const &_result_ref = ((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetConst(arg2);
            result = (DataSetHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetDataSetIterators) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        DataSetHdrIt *arg2 = 0 ;
        DataSetHdrIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataGroupHeader_GetDataSetIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetDataSetIterators. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeader_GetDataSetIterators. Expected _p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeader_GetDataSetIterators. Expected _p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator");
            }
        }
        (arg1)->GetDataSetIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_SetDataSetPos) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_SetDataSetPos(self,pos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_SetDataSetPos. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetDataSetPos(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetDataSetPos) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupHeader_GetDataSetPos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetDataSetPos. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetDataSetPos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_SetNextCubePos) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_SetNextCubePos(self,pos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_SetNextCubePos. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetNextCubePos(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_GetNextCubePos) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupHeader_GetNextCubePos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_GetNextCubePos. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::DataGroupHeader const *)arg1)->GetNextCubePos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeader_FindDataSetHeader) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupHeader_FindDataSetHeader(self,dataSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeader_FindDataSetHeader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeader_FindDataSetHeader. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_io::DataSetHeader *)(arg1)->FindDataSetHeader((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataSet) {
    {
        std::string *arg1 = 0 ;
        affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
        void *arg3 = (void *) 0 ;
        affymetrix_calvin_io::DataSet *result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: new_DataSet(fileName,header,handle);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of new_DataSet.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_DataSet. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, 0,0) < 0) {
                SWIG_croak("Type error in argument 3 of new_DataSet. Expected _p_void");
            }
        }
        result = (affymetrix_calvin_io::DataSet *)new affymetrix_calvin_io::DataSet((std::string const &)*arg1,(affymetrix_calvin_io::DataSetHeader const &)*arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSet, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Delete) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Delete(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Delete. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        (arg1)->Delete();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Open) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Open(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Open. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        result = (bool)(arg1)->Open();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Close) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Close. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Header) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Header(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Header. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        {
            affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->Header();
            result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Rows) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Rows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Rows. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        result = (int32_t)(arg1)->Rows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_Cols) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_Cols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_Cols. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        result = (int32_t)(arg1)->Cols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_IsOpen) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_IsOpen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_IsOpen. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        result = (bool)(arg1)->IsOpen();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_0) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        u_int8_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_unsigned_char");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_1) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int8_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_char,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_char");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_2) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        u_int16_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_unsigned_short");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_3) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int16_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_short");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_4) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        u_int32_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_unsigned_int");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_5) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_int");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_6) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        float *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_float");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_7) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        std::string *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_std__string");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_8) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        std::wstring *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_GetData(self,row,col,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 4 of DataSet_GetData. Expected _p_std__wstring");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,*arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_9) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Uint8Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTunsigned_char_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTunsigned_char_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_10) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Int8Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTchar_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTchar_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_11) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Uint16Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTunsigned_short_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTunsigned_short_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_12) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Int16Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTshort_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTshort_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_13) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Uint32Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTunsigned_int_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTunsigned_int_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_14) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        Int32Vector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTint_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTint_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_15) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        FloatVector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTfloat_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTfloat_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_16) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        std::vector<std::string > *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTstd__string_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTstd__string_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData__SWIG_17) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        WStringVector *arg5 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetData(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetData. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__vectorTstd__wstring_t,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetData. Expected _p_std__vectorTstd__wstring_t");
            }
        }
        try {
            (arg1)->GetData(arg2,arg3,arg4,*arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetData) {
    dXSARGS;
    
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_unsigned_char, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_0); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_char, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_1); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_unsigned_short, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_2); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_short, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_3); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_unsigned_int, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_4); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_int, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_5); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_float, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_6); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_7); return;
                    }
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_8); return;
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTunsigned_char_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_9); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTchar_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_10); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTunsigned_short_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_11); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTshort_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_12); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTunsigned_int_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_13); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTint_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_14); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTfloat_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_15); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTstd__string_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_16); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__vectorTstd__wstring_t, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetData__SWIG_17); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DataSet_GetData'");
    XSRETURN(0);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_0) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        u_int8_t *arg5 = (u_int8_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_unsigned_char");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_1) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        int8_t *arg5 = (int8_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        if (!SvOK((SV*) ST(4))) arg5 = 0;
        else arg5 = (int8_t *) SvPV(ST(4), PL_na);
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_2) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        u_int16_t *arg5 = (u_int16_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_unsigned_short");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_3) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        int16_t *arg5 = (int16_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_short");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_4) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        u_int32_t *arg5 = (u_int32_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_unsigned_int");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_5) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        int32_t *arg5 = (int32_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_int");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_6) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        float *arg5 = (float *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_float");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_7) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        std::string *arg5 = (std::string *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_std__string");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw__SWIG_8) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        int32_t arg4 ;
        std::wstring *arg5 = (std::wstring *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: DataSet_GetDataRaw(self,col,startRow,count,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_GetDataRaw. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (int32_t) SvIV(ST(3));
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 5 of DataSet_GetDataRaw. Expected _p_std__wstring");
            }
        }
        try {
            result = (int32_t)(arg1)->GetDataRaw(arg2,arg3,arg4,arg5);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_GetDataRaw) {
    dXSARGS;
    
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_unsigned_char, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_0); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_unsigned_short, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_2); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_short, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_3); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_unsigned_int, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_4); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_int, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_5); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_float, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_6); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_7); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *tmp;
                            if (SWIG_ConvertPtr(ST(4), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_8); return;
                        }
                    }
                }
            }
        }
    }
    if (items == 5) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSet, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = SvPOK(ST(4)) ? 1 : 0;
                        }
                        if (_v) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSet_GetDataRaw__SWIG_1); return;
                        }
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'DataSet_GetDataRaw'");
    XSRETURN(0);
}


XS(_wrap_DataSet_CheckRowColumnAndType) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t arg2 ;
        int32_t arg3 ;
        affymetrix_calvin_io::DataSetColumnTypes arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSet_CheckRowColumnAndType(self,row,col,type);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_CheckRowColumnAndType. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        arg3 = (int32_t) SvIV(ST(2));
        arg4 = (affymetrix_calvin_io::DataSetColumnTypes) SvIV(ST(3));
        try {
            (arg1)->CheckRowColumnAndType(arg2,arg3,arg4);
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::RowIndexOutOfBoundsException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::RowIndexOutOfBoundsException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::UnexpectedColumnTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::UnexpectedColumnTypeException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSet_BytesPerRow) {
    {
        affymetrix_calvin_io::DataSet *arg1 = (affymetrix_calvin_io::DataSet *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSet_BytesPerRow(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSet,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSet_BytesPerRow. Expected _p_affymetrix_calvin_io__DataSet");
            }
        }
        result = (int32_t)(arg1)->BytesPerRow();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataSetHeader) {
    {
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataSetHeader();");
        }
        result = (affymetrix_calvin_io::DataSetHeader *)new affymetrix_calvin_io::DataSetHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataSetHeader) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataSetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataSetHeader. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_Clear) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_Clear. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetDataSize) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetDataSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetDataSize. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetRowSize) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetRowSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetRowSize. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_SetName) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_SetName(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_SetName. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeader_SetName. Expected _p_std__wstring");
            }
        }
        (arg1)->SetName((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetName) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetName. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetNameValParamCnt) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetNameValParamCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetNameValParamCnt. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValParamCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddNameValParam) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_AddNameValParam(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddNameValParam. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeader_AddNameValParam. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetNameValIterators) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataSetHeader_GetNameValIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetNameValIterators. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeader_GetNameValIterators. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeader_GetNameValIterators. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator");
            }
        }
        ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetNameValIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_FindNameValParam) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataSetHeader_FindNameValParam(self,name,result);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_FindNameValParam. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeader_FindNameValParam. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeader_FindNameValParam. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)((affymetrix_calvin_io::DataSetHeader const *)arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        affymetrix_calvin_io::ColumnType *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_AddColumnType(self,colType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__ColumnType,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeader_AddColumnType. Expected _p_affymetrix_calvin_io__ColumnType");
            }
        }
        (arg1)->AddColumnType((affymetrix_calvin_io::ColumnType const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddIntColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddIntColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddIntColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddIntColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddUIntColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddUIntColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddUIntColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddUIntColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddShortColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddShortColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddShortColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddShortColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddUShortColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddUShortColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddUShortColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddUShortColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddByteColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddByteColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddByteColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddByteColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddUByteColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddUByteColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddUByteColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddUByteColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddFloatColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_AddFloatColumnType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddFloatColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->AddFloatColumnType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddAsciiColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_AddAsciiColumnType(self,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddAsciiColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->AddAsciiColumnType(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_AddUnicodeColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_AddUnicodeColumnType(self,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_AddUnicodeColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->AddUnicodeColumnType(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetColumnType) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t arg2 ;
        SwigValueWrapper<affymetrix_calvin_io::ColumnType > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_GetColumnType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetColumnType. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = ((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnType(arg2);
        
        {
            affymetrix_calvin_io::ColumnType * resultobj = new affymetrix_calvin_io::ColumnType((affymetrix_calvin_io::ColumnType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__ColumnType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetRowCnt) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetRowCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetRowCnt. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetRowCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_SetRowCnt) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_SetRowCnt(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_SetRowCnt. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetRowCnt(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetColumnCnt) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetColumnCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetColumnCnt. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetColumnCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_SetHeaderStartFilePos) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_SetHeaderStartFilePos(self,pos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_SetHeaderStartFilePos. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetHeaderStartFilePos(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetHeaderStartFilePos) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetHeaderStartFilePos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetHeaderStartFilePos. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetHeaderStartFilePos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_SetDataStartFilePos) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetHeader_SetDataStartFilePos(self,pos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_SetDataStartFilePos. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetDataStartFilePos(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeader_GetDataStartFilePos) {
    {
        affymetrix_calvin_io::DataSetHeader *arg1 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetHeader_GetDataStartFilePos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeader_GetDataStartFilePos. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::DataSetHeader const *)arg1)->GetDataStartFilePos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FileHeader) {
    {
        affymetrix_calvin_io::FileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FileHeader();");
        }
        result = (affymetrix_calvin_io::FileHeader *)new affymetrix_calvin_io::FileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileHeader) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileHeader. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_Clear) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_Clear. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_SetFilename) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_SetFilename(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_SetFilename. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of FileHeader_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetFilename) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetFilename. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetMagicNumber) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetMagicNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetMagicNumber. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetMagicNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetVersion) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetVersion. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (u_int8_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetDataGroupCnt) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetDataGroupCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetDataGroupCnt. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_AddDataGroupHdr) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_AddDataGroupHdr(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_AddDataGroupHdr. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of FileHeader_AddDataGroupHdr. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        (arg1)->AddDataGroupHdr((affymetrix_calvin_io::DataGroupHeader const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetDataGroup) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_GetDataGroup(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetDataGroup. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            affymetrix_calvin_io::DataGroupHeader &_result_ref = (arg1)->GetDataGroup(arg2);
            result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetDataGroupConst) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_GetDataGroupConst(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetDataGroupConst. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        {
            affymetrix_calvin_io::DataGroupHeader const &_result_ref = ((affymetrix_calvin_io::FileHeader const *)arg1)->GetDataGroupConst(arg2);
            result = (affymetrix_calvin_io::DataGroupHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetDataGroupIts) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        affymetrix_calvin_io::DataGroupHdrIt *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHdrIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FileHeader_GetDataGroupIts(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetDataGroupIts. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of FileHeader_GetDataGroupIts. Expected _p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of FileHeader_GetDataGroupIts. Expected _p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator");
            }
        }
        (arg1)->GetDataGroupIts(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_SetGenericDataHdr) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        GenericDataHeader *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_SetGenericDataHdr(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_SetGenericDataHdr. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of FileHeader_SetGenericDataHdr. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        (arg1)->SetGenericDataHdr((GenericDataHeader const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetGenericDataHdr) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        GenericDataHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetGenericDataHdr(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetGenericDataHdr. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (GenericDataHeader *)(arg1)->GetGenericDataHdr();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_FindDataGroupHeader) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_FindDataGroupHeader(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_FindDataGroupHeader. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of FileHeader_FindDataGroupHeader. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetNumDataGroups) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetNumDataGroups(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetNumDataGroups. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::FileHeader const *)arg1)->GetNumDataGroups();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_SetNumDataGroups) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_SetNumDataGroups(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_SetNumDataGroups. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        (arg1)->SetNumDataGroups(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_GetFirstDataGroupFilePos) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeader_GetFirstDataGroupFilePos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_GetFirstDataGroupFilePos. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (u_int32_t)(arg1)->GetFirstDataGroupFilePos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeader_SetFirstDataGroupFilePos) {
    {
        affymetrix_calvin_io::FileHeader *arg1 = (affymetrix_calvin_io::FileHeader *) 0 ;
        u_int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileHeader_SetFirstDataGroupFilePos(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeader_SetFirstDataGroupFilePos. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        (arg1)->SetFirstDataGroupFilePos(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GenericData) {
    {
        affymetrix_calvin_io::GenericData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GenericData();");
        }
        result = (affymetrix_calvin_io::GenericData *)new affymetrix_calvin_io::GenericData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GenericData) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GenericData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GenericData. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FileIdentifier) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_FileIdentifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_FileIdentifier. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        result = (arg1)->FileIdentifier();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_ArrayFileIdentifier) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_ArrayFileIdentifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_ArrayFileIdentifier. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        result = (arg1)->ArrayFileIdentifier();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_Header) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        affymetrix_calvin_io::FileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_Header(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_Header. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            affymetrix_calvin_io::FileHeader &_result_ref = (arg1)->Header();
            result = (affymetrix_calvin_io::FileHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataGroupCnt) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_DataGroupCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataGroupCnt. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::GenericData const *)arg1)->DataGroupCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataGroupNames) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::vector<std::wstring > *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_DataGroupNames(self,names);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataGroupNames. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTstd__wstring_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_DataGroupNames. Expected _p_std__vectorTstd__wstring_t");
            }
        }
        (arg1)->DataGroupNames(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSetCnt__SWIG_0) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        u_int32_t arg2 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_DataSetCnt(self,dataGroupIdx);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSetCnt. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        try {
            result = (u_int32_t)(arg1)->DataSetCnt(arg2);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSetCnt__SWIG_1) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::wstring *arg2 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_DataSetCnt(self,dataGroupName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSetCnt. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_DataSetCnt. Expected _p_std__wstring");
            }
        }
        try {
            result = (u_int32_t)(arg1)->DataSetCnt((std::wstring const &)*arg2);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSetCnt) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSetCnt__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSetCnt__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericData_DataSetCnt'");
    XSRETURN(0);
}


XS(_wrap_GenericData_DataSetNames__SWIG_0) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        u_int32_t arg2 ;
        std::vector<std::wstring > *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericData_DataSetNames(self,dataGroupIdx,names);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSetNames. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTstd__wstring_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericData_DataSetNames. Expected _p_std__vectorTstd__wstring_t");
            }
        }
        try {
            (arg1)->DataSetNames(arg2,*arg3);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSetNames__SWIG_1) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::wstring *arg2 = 0 ;
        std::vector<std::wstring > *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericData_DataSetNames(self,dataGroupName,names);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSetNames. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_DataSetNames. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTstd__wstring_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericData_DataSetNames. Expected _p_std__vectorTstd__wstring_t");
            }
        }
        try {
            (arg1)->DataSetNames((std::wstring const &)*arg2,*arg3);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSetNames) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__vectorTstd__wstring_t, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSetNames__SWIG_1); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__vectorTstd__wstring_t, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSetNames__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericData_DataSetNames'");
    XSRETURN(0);
}


XS(_wrap_GenericData_DataSet__SWIG_0) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        u_int32_t arg2 ;
        u_int32_t arg3 ;
        affymetrix_calvin_io::DataSet *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericData_DataSet(self,dataGroupIdx,dataSetIdx);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSet. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        arg3 = (u_int32_t) SvUV(ST(2));
        try {
            result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet(arg2,arg3);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSet, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSet__SWIG_1) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::wstring *arg2 = 0 ;
        std::wstring *arg3 = 0 ;
        affymetrix_calvin_io::DataSet *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericData_DataSet(self,dataGroupName,dataSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataSet. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_DataSet. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericData_DataSet. Expected _p_std__wstring");
            }
        }
        try {
            result = (affymetrix_calvin_io::DataSet *)(arg1)->DataSet((std::wstring const &)*arg2,(std::wstring const &)*arg3);
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotFoundException exception thrown");
            
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSet, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_DataSet) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSet__SWIG_1); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_DataSet__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericData_DataSet'");
    XSRETURN(0);
}


XS(_wrap_GenericData_DataGroup) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        u_int32_t arg2 ;
        SwigValueWrapper<affymetrix_calvin_io::DataGroup > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_DataGroup(self,dataGroupFilePos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_DataGroup. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        result = (arg1)->DataGroup(arg2);
        
        {
            affymetrix_calvin_io::DataGroup * resultobj = new affymetrix_calvin_io::DataGroup((affymetrix_calvin_io::DataGroup &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__DataGroup, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_Clear) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_Clear. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_ReadFullDataSetHeader) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_ReadFullDataSetHeader(self,dph);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_ReadFullDataSetHeader. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_ReadFullDataSetHeader. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        (arg1)->ReadFullDataSetHeader(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_IsDPHPartiallyRead) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        affymetrix_calvin_io::DataSetHeader *arg2 = (affymetrix_calvin_io::DataSetHeader *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_IsDPHPartiallyRead(self,dph);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_IsDPHPartiallyRead. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_IsDPHPartiallyRead. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (bool)(arg1)->IsDPHPartiallyRead((affymetrix_calvin_io::DataSetHeader const *)arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_OpenFStream) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::ifstream *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_OpenFStream(self,fileStream);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_OpenFStream. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_OpenFStream. Expected _p_std__ifstream");
            }
        }
        try {
            (arg1)->OpenFStream(*arg2);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FindDataGroupHeader__SWIG_0) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_FindDataGroupHeader(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_FindDataGroupHeader. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_FindDataGroupHeader. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader((std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FindDataGroupHeader__SWIG_1) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::DataGroupHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_FindDataGroupHeader(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_FindDataGroupHeader. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = (affymetrix_calvin_io::DataGroupHeader *)(arg1)->FindDataGroupHeader(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FindDataGroupHeader) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_FindDataGroupHeader__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_FindDataGroupHeader__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericData_FindDataGroupHeader'");
    XSRETURN(0);
}


XS(_wrap_GenericData_FindDataSetHeader__SWIG_0) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        u_int32_t arg2 ;
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_FindDataSetHeader(dch,dataSetIdx);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_FindDataSetHeader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg2 = (u_int32_t) SvUV(ST(1));
        result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FindDataSetHeader__SWIG_1) {
    {
        affymetrix_calvin_io::DataGroupHeader *arg1 = (affymetrix_calvin_io::DataGroupHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericData_FindDataSetHeader(dch,dataSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_FindDataSetHeader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericData_FindDataSetHeader. Expected _p_std__wstring");
            }
        }
        result = (affymetrix_calvin_io::DataSetHeader *)affymetrix_calvin_io::GenericData::FindDataSetHeader(arg1,(std::wstring const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_FindDataSetHeader) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_FindDataSetHeader__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericData_FindDataSetHeader__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericData_FindDataSetHeader'");
    XSRETURN(0);
}


XS(_wrap_GenericData_MapFile) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_MapFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_MapFile. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        result = (bool)(arg1)->MapFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericData_UnmapFile) {
    {
        affymetrix_calvin_io::GenericData *arg1 = (affymetrix_calvin_io::GenericData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericData_UnmapFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericData_UnmapFile. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        (arg1)->UnmapFile();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GenericDataHeader) {
    {
        affymetrix_calvin_io::GenericDataHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GenericDataHeader();");
        }
        result = (affymetrix_calvin_io::GenericDataHeader *)new affymetrix_calvin_io::GenericDataHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GenericDataHeader) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GenericDataHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GenericDataHeader. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_Clear) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_Clear. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_SetFileTypeId) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_SetFileTypeId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_SetFileTypeId. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of GenericDataHeader_SetFileTypeId.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFileTypeId((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetFileTypeId) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetFileTypeId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetFileTypeId. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileTypeId();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_SetFileId) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_SetFileId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_SetFileId. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of GenericDataHeader_SetFileId.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFileId((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetFileId) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetFileId(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetFileId. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileId();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_SetFileCreationTime) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_SetFileCreationTime(self,f);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_SetFileCreationTime. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_SetFileCreationTime. Expected _p_std__wstring");
            }
        }
        (arg1)->SetFileCreationTime((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetFileCreationTime) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetFileCreationTime(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetFileCreationTime. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetFileCreationTime();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_SetLocale) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_SetLocale(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_SetLocale. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_SetLocale. Expected _p_std__wstring");
            }
        }
        (arg1)->SetLocale((std::wstring const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetLocale) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetLocale(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetLocale. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetLocale();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_AddNameValParam) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_AddNameValParam(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_AddNameValParam. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_AddNameValParam. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        (arg1)->AddNameValParam((affymetrix_calvin_parameter::ParameterNameValueType const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetNameValParam) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_parameter::ParameterNameValueType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_GetNameValParam(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetNameValParam. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = (arg1)->GetNameValParam(arg2);
        
        {
            affymetrix_calvin_parameter::ParameterNameValueType * resultobj = new affymetrix_calvin_parameter::ParameterNameValueType((affymetrix_calvin_parameter::ParameterNameValueType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetNameValParamCnt) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetNameValParamCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetNameValParamCnt. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetNameValParamCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetNameValIterators) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueTypeIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericDataHeader_GetNameValIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetNameValIterators. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_GetNameValIterators. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericDataHeader_GetNameValIterators. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator");
            }
        }
        (arg1)->GetNameValIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetParentCnt) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericDataHeader_GetParentCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetParentCnt. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParentCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_AddParent) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_AddParent(self,hdr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_AddParent. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_AddParent. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        (arg1)->AddParent((affymetrix_calvin_io::GenericDataHeader const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetParent) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        int32_t arg2 ;
        affymetrix_calvin_io::GenericDataHeader result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeader_GetParent(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetParent. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = ((affymetrix_calvin_io::GenericDataHeader const *)arg1)->GetParent(arg2);
        
        {
            affymetrix_calvin_io::GenericDataHeader * resultobj = new affymetrix_calvin_io::GenericDataHeader((affymetrix_calvin_io::GenericDataHeader &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetParentIterators) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg2 = 0 ;
        std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericDataHeader_GetParentIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetParentIterators. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_GetParentIterators. Expected _p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericDataHeader_GetParentIterators. Expected _p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator");
            }
        }
        (arg1)->GetParentIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_FindNameValParam) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericDataHeader_FindNameValParam(self,name,result);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_FindNameValParam. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_FindNameValParam. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericDataHeader_FindNameValParam. Expected _p_affymetrix_calvin_parameter__ParameterNameValueType");
            }
        }
        result = (bool)(arg1)->FindNameValParam((std::wstring const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeader_GetNameValParamsBeginsWith) {
    {
        affymetrix_calvin_io::GenericDataHeader *arg1 = (affymetrix_calvin_io::GenericDataHeader *) 0 ;
        std::wstring *arg2 = 0 ;
        affymetrix_calvin_parameter::ParameterNameValueTypeVector *arg3 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericDataHeader_GetNameValParamsBeginsWith(self,beginsWith,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeader_GetNameValParamsBeginsWith. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeader_GetNameValParamsBeginsWith. Expected _p_std__wstring");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of GenericDataHeader_GetNameValParamsBeginsWith. Expected _p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t");
            }
        }
        result = (bool)(arg1)->GetNameValParamsBeginsWith((std::wstring const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ArrayFileReader) {
    {
        affymetrix_calvin_io::ArrayFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ArrayFileReader();");
        }
        result = (affymetrix_calvin_io::ArrayFileReader *)new affymetrix_calvin_io::ArrayFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ArrayFileReader) {
    {
        affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ArrayFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ArrayFileReader. Expected _p_affymetrix_calvin_io__ArrayFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_Read__SWIG_0) {
    {
        affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
        std::string *arg2 = 0 ;
        affymetrix_calvin_array::ArrayData *arg3 = 0 ;
        bool arg4 ;
        bool result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: ArrayFileReader_Read(self,fileName,arrayData,headerOnly);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayFileReader_Read. Expected _p_affymetrix_calvin_io__ArrayFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of ArrayFileReader_Read.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 3 of ArrayFileReader_Read. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        arg4 = (bool) SvIV(ST(3));
        result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_Read__SWIG_1) {
    {
        affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
        std::string *arg2 = 0 ;
        affymetrix_calvin_array::ArrayData *arg3 = 0 ;
        bool result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ArrayFileReader_Read(self,fileName,arrayData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayFileReader_Read. Expected _p_affymetrix_calvin_io__ArrayFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of ArrayFileReader_Read.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 3 of ArrayFileReader_Read. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_Read) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_array__ArrayData, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_ArrayFileReader_Read__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_array__ArrayData, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_ArrayFileReader_Read__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'ArrayFileReader_Read'");
    XSRETURN(0);
}


XS(_wrap_ArrayFileReader_DataTypeIdentifier__SWIG_0) {
    {
        affymetrix_calvin_io::ArrayFileReader *arg1 = (affymetrix_calvin_io::ArrayFileReader *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayFileReader_DataTypeIdentifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of ArrayFileReader_DataTypeIdentifier. Expected _p_affymetrix_calvin_io__ArrayFileReader");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_calvin_io::ArrayFileReader const *)arg1)->DataTypeIdentifier();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>(result->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, result->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_IsFileType) {
    {
        std::string *arg1 = 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *arg2 = 0 ;
        bool result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ArrayFileReader_IsFileType(fileName,dataTypeId);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of ArrayFileReader_IsFileType.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of ArrayFileReader_IsFileType.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        result = (bool)affymetrix_calvin_io::ArrayFileReader::IsFileType((std::string const &)*arg1,(std::string const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_DataTypeIdentifier__SWIG_1) {
    {
        std::string *arg1 = 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ArrayFileReader_DataTypeIdentifier(fileName);");
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(0), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 1 of ArrayFileReader_DataTypeIdentifier.");
            } else {
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        result = affymetrix_calvin_io::ArrayFileReader::DataTypeIdentifier((std::string const &)*arg1);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ArrayFileReader_DataTypeIdentifier) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_ArrayFileReader_DataTypeIdentifier__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            _v = SvPOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_ArrayFileReader_DataTypeIdentifier__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'ArrayFileReader_DataTypeIdentifier'");
    XSRETURN(0);
}


XS(_wrap_new_AuditFileReader) {
    {
        affymetrix_calvin_io::AuditFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_AuditFileReader();");
        }
        result = (affymetrix_calvin_io::AuditFileReader *)new affymetrix_calvin_io::AuditFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__AuditFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_AuditFileReader) {
    {
        affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_AuditFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__AuditFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_AuditFileReader. Expected _p_affymetrix_calvin_io__AuditFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AuditFileReader_Read) {
    {
        affymetrix_calvin_io::AuditFileReader *arg1 = (affymetrix_calvin_io::AuditFileReader *) 0 ;
        std::string *arg2 = 0 ;
        affymetrix_calvin_array::ArrayAuditEntryList *arg3 = 0 ;
        bool result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: AuditFileReader_Read(self,fileName,auditData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__AuditFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of AuditFileReader_Read. Expected _p_affymetrix_calvin_io__AuditFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of AuditFileReader_Read.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of AuditFileReader_Read. Expected _p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t");
            }
        }
        result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CDFFileReader) {
    {
        affymetrix_calvin_io::CDFFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CDFFileReader();");
        }
        result = (affymetrix_calvin_io::CDFFileReader *)new affymetrix_calvin_io::CDFFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CDFFileReader) {
    {
        affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CDFFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CDFFileReader. Expected _p_affymetrix_calvin_io__CDFFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFFileReader_GetFilename) {
    {
        affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CDFFileReader_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFFileReader_GetFilename. Expected _p_affymetrix_calvin_io__CDFFileReader");
            }
        }
        result = ((affymetrix_calvin_io::CDFFileReader const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFFileReader_SetFilename) {
    {
        affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFFileReader_SetFilename(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFFileReader_SetFilename. Expected _p_affymetrix_calvin_io__CDFFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CDFFileReader_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFFileReader_Read__SWIG_0) {
    {
        affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
        affymetrix_calvin_io::CDFData *arg2 = 0 ;
        affymetrix_calvin_io::CDFFileReader::ReadMode arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CDFFileReader_Read(self,data,mode);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFFileReader_Read. Expected _p_affymetrix_calvin_io__CDFFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 2 of CDFFileReader_Read. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        arg3 = (affymetrix_calvin_io::CDFFileReader::ReadMode) SvIV(ST(2));
        (arg1)->Read(*arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFFileReader_Read__SWIG_1) {
    {
        affymetrix_calvin_io::CDFFileReader *arg1 = (affymetrix_calvin_io::CDFFileReader *) 0 ;
        affymetrix_calvin_io::CDFData *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CDFFileReader_Read(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CDFFileReader_Read. Expected _p_affymetrix_calvin_io__CDFFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__CDFData,0) < 0) {
                SWIG_croak("Type error in argument 2 of CDFFileReader_Read. Expected _p_affymetrix_calvin_io__CDFData");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CDFFileReader_Read) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFFileReader_Read__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__CDFData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CDFFileReader_Read__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CDFFileReader_Read'");
    XSRETURN(0);
}


XS(_wrap_new_CHPFileReader) {
    {
        affymetrix_calvin_io::CHPFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CHPFileReader();");
        }
        result = (affymetrix_calvin_io::CHPFileReader *)new affymetrix_calvin_io::CHPFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CHPFileReader) {
    {
        affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CHPFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CHPFileReader. Expected _p_affymetrix_calvin_io__CHPFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPFileReader_GetFilename) {
    {
        affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CHPFileReader_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPFileReader_GetFilename. Expected _p_affymetrix_calvin_io__CHPFileReader");
            }
        }
        result = ((affymetrix_calvin_io::CHPFileReader const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPFileReader_SetFilename) {
    {
        affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPFileReader_SetFilename(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPFileReader_SetFilename. Expected _p_affymetrix_calvin_io__CHPFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CHPFileReader_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CHPFileReader_Read) {
    {
        affymetrix_calvin_io::CHPFileReader *arg1 = (affymetrix_calvin_io::CHPFileReader *) 0 ;
        affymetrix_calvin_io::CHPData *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CHPFileReader_Read(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CHPFileReader_Read. Expected _p_affymetrix_calvin_io__CHPFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__CHPData,0) < 0) {
                SWIG_croak("Type error in argument 2 of CHPFileReader_Read. Expected _p_affymetrix_calvin_io__CHPData");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CelFileReader) {
    {
        affymetrix_calvin_io::CelFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CelFileReader();");
        }
        result = (affymetrix_calvin_io::CelFileReader *)new affymetrix_calvin_io::CelFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__CelFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CelFileReader) {
    {
        affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CelFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CelFileReader. Expected _p_affymetrix_calvin_io__CelFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileReader_GetFilename) {
    {
        affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CelFileReader_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileReader_GetFilename. Expected _p_affymetrix_calvin_io__CelFileReader");
            }
        }
        result = ((affymetrix_calvin_io::CelFileReader const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileReader_SetFilename) {
    {
        affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileReader_SetFilename(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileReader_SetFilename. Expected _p_affymetrix_calvin_io__CelFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CelFileReader_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CelFileReader_Read) {
    {
        affymetrix_calvin_io::CelFileReader *arg1 = (affymetrix_calvin_io::CelFileReader *) 0 ;
        affymetrix_calvin_io::CelFileData *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CelFileReader_Read(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__CelFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CelFileReader_Read. Expected _p_affymetrix_calvin_io__CelFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__CelFileData,0) < 0) {
                SWIG_croak("Type error in argument 2 of CelFileReader_Read. Expected _p_affymetrix_calvin_io__CelFileData");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupHeaderReader) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataGroupHeaderReader();");
        }
        result = (affymetrix_calvin_io::DataGroupHeaderReader *)new affymetrix_calvin_io::DataGroupHeaderReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeaderReader_ReadAllMinimumInfo) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::FileHeader *arg3 = 0 ;
        u_int32_t arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataGroupHeaderReader_ReadAllMinimumInfo(self,fs,fh,dataGroupCnt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeaderReader_ReadAllMinimumInfo. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeaderReader_ReadAllMinimumInfo. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeaderReader_ReadAllMinimumInfo. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg4 = (u_int32_t) SvUV(ST(3));
        (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeaderReader_ReadAll) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::FileHeader *arg3 = 0 ;
        u_int32_t arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataGroupHeaderReader_ReadAll(self,fileStream,fh,dataGroupCnt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeaderReader_ReadAll. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeaderReader_ReadAll. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeaderReader_ReadAll. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        arg4 = (u_int32_t) SvUV(ST(3));
        (arg1)->ReadAll(*arg2,*arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeaderReader_ReadMinimumInfo) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataGroupHeaderReader_ReadMinimumInfo(self,fileStream,dch);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeaderReader_ReadMinimumInfo. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeaderReader_ReadMinimumInfo. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeaderReader_ReadMinimumInfo. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeaderReader_Read) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataGroupHeaderReader_Read(self,fileStream,dch);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeaderReader_Read. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeaderReader_Read. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeaderReader_Read. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupHeaderReader_ReadHeader) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataGroupHeaderReader_ReadHeader(self,fileStream,dch);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupHeaderReader_ReadHeader. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupHeaderReader_ReadHeader. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataGroupHeaderReader_ReadHeader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (u_int32_t)(arg1)->ReadHeader(*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataGroupHeaderReader) {
    {
        affymetrix_calvin_io::DataGroupHeaderReader *arg1 = (affymetrix_calvin_io::DataGroupHeaderReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataGroupHeaderReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataGroupHeaderReader. Expected _p_affymetrix_calvin_io__DataGroupHeaderReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataGroupReader) {
    {
        std::ifstream *arg1 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_DataGroupReader(o,hdr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DataGroupReader. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_DataGroupReader. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        result = (affymetrix_calvin_io::DataGroupReader *)new affymetrix_calvin_io::DataGroupReader(*arg1,*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataGroupReader) {
    {
        affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataGroupReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataGroupReader. Expected _p_affymetrix_calvin_io__DataGroupReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupReader_GetDataSetCnt) {
    {
        affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupReader_GetDataSetCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupReader_GetDataSetCnt. Expected _p_affymetrix_calvin_io__DataGroupReader");
            }
        }
        result = (int32_t)((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataSetCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupReader_GetDataGroupName) {
    {
        affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataGroupReader_GetDataGroupName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupReader_GetDataGroupName. Expected _p_affymetrix_calvin_io__DataGroupReader");
            }
        }
        result = ((affymetrix_calvin_io::DataGroupReader const *)arg1)->GetDataGroupName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupReader_GetDataSetReader__SWIG_0) {
    {
        affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
        int32_t arg2 ;
        SwigValueWrapper<DataSetReader > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupReader_GetDataSetReader(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupReader_GetDataSetReader. Expected _p_affymetrix_calvin_io__DataGroupReader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = (arg1)->GetDataSetReader(arg2);
        
        {
            DataSetReader * resultobj = new DataSetReader((DataSetReader &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupReader_GetDataSetReader__SWIG_1) {
    {
        affymetrix_calvin_io::DataGroupReader *arg1 = (affymetrix_calvin_io::DataGroupReader *) 0 ;
        std::wstring *arg2 = 0 ;
        SwigValueWrapper<DataSetReader > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataGroupReader_GetDataSetReader(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataGroupReader_GetDataSetReader. Expected _p_affymetrix_calvin_io__DataGroupReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataGroupReader_GetDataSetReader. Expected _p_std__wstring");
            }
        }
        result = (arg1)->GetDataSetReader((std::wstring const &)*arg2);
        
        {
            DataSetReader * resultobj = new DataSetReader((DataSetReader &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataGroupReader_GetDataSetReader) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataGroupReader_GetDataSetReader__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataGroupReader_GetDataSetReader__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DataGroupReader_GetDataSetReader'");
    XSRETURN(0);
}


XS(_wrap_new_DataSetHeaderReader) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DataSetHeaderReader();");
        }
        result = (affymetrix_calvin_io::DataSetHeaderReader *)new affymetrix_calvin_io::DataSetHeaderReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeaderReader_ReadAllMinimumInfo) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
        u_int32_t arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSetHeaderReader_ReadAllMinimumInfo(self,fileStream,dch,dataSetCnt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeaderReader_ReadAllMinimumInfo. Expected _p_affymetrix_calvin_io__DataSetHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeaderReader_ReadAllMinimumInfo. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeaderReader_ReadAllMinimumInfo. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg4 = (u_int32_t) SvUV(ST(3));
        (arg1)->ReadAllMinimumInfo(*arg2,*arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeaderReader_ReadAll) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataGroupHeader *arg3 = 0 ;
        u_int32_t arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: DataSetHeaderReader_ReadAll(self,fileStream,dch,dataSetCnt);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeaderReader_ReadAll. Expected _p_affymetrix_calvin_io__DataSetHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeaderReader_ReadAll. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeaderReader_ReadAll. Expected _p_affymetrix_calvin_io__DataGroupHeader");
            }
        }
        arg4 = (u_int32_t) SvUV(ST(3));
        (arg1)->ReadAll(*arg2,*arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeaderReader_ReadMinimumInfo) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataSetHeaderReader_ReadMinimumInfo(self,fileStream,dph);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeaderReader_ReadMinimumInfo. Expected _p_affymetrix_calvin_io__DataSetHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeaderReader_ReadMinimumInfo. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeaderReader_ReadMinimumInfo. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (u_int32_t)(arg1)->ReadMinimumInfo(*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetHeaderReader_Read) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        affymetrix_calvin_io::DataSetHeader *arg3 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: DataSetHeaderReader_Read(self,fileStream,dph);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetHeaderReader_Read. Expected _p_affymetrix_calvin_io__DataSetHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetHeaderReader_Read. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 3 of DataSetHeaderReader_Read. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (u_int32_t)(arg1)->Read(*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataSetHeaderReader) {
    {
        affymetrix_calvin_io::DataSetHeaderReader *arg1 = (affymetrix_calvin_io::DataSetHeaderReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataSetHeaderReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataSetHeaderReader. Expected _p_affymetrix_calvin_io__DataSetHeaderReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DataSetReader) {
    {
        std::ifstream *arg1 = 0 ;
        affymetrix_calvin_io::DataSetHeader *arg2 = 0 ;
        affymetrix_calvin_io::DataSetReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_DataSetReader(s,d);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_DataSetReader. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_DataSetReader. Expected _p_affymetrix_calvin_io__DataSetHeader");
            }
        }
        result = (affymetrix_calvin_io::DataSetReader *)new affymetrix_calvin_io::DataSetReader(*arg1,*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DataSetReader) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DataSetReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DataSetReader. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_GetDataSetName) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetReader_GetDataSetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_GetDataSetName. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        result = ((affymetrix_calvin_io::DataSetReader const *)arg1)->GetDataSetName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_GetDataSetHeader) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        affymetrix_calvin_io::DataSetHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DataSetReader_GetDataSetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_GetDataSetHeader. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            affymetrix_calvin_io::DataSetHeader const &_result_ref = (arg1)->GetDataSetHeader();
            result = (affymetrix_calvin_io::DataSetHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_0) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        int8_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_char");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_1) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        u_int8_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_unsigned_char");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_2) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        int16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_short");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_3) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        u_int16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_unsigned_short");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_4) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        int32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_int");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_5) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        u_int32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_unsigned_int");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_6) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        float *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_float");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_7) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        std::string *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_std__string");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read__SWIG_8) {
    {
        affymetrix_calvin_io::DataSetReader *arg1 = (affymetrix_calvin_io::DataSetReader *) 0 ;
        std::wstring *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DataSetReader_Read(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DataSetReader_Read. Expected _p_affymetrix_calvin_io__DataSetReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of DataSetReader_Read. Expected _p_std__wstring");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DataSetReader_Read) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_char, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_0); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_unsigned_char, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_short, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_2); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_unsigned_short, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_3); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_int, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_4); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_unsigned_int, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_5); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_float, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_6); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_7); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_DataSetReader_Read__SWIG_8); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'DataSetReader_Read'");
    XSRETURN(0);
}


XS(_wrap_new_FileNotFoundException) {
    {
        affymetrix_calvin_exceptions::FileNotFoundException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FileNotFoundException();");
        }
        result = (affymetrix_calvin_exceptions::FileNotFoundException *)new affymetrix_calvin_exceptions::FileNotFoundException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotFoundException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileNotFoundException) {
    {
        affymetrix_calvin_exceptions::FileNotFoundException *arg1 = (affymetrix_calvin_exceptions::FileNotFoundException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileNotFoundException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotFoundException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileNotFoundException. Expected _p_affymetrix_calvin_exceptions__FileNotFoundException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_InvalidVersionException) {
    {
        affymetrix_calvin_exceptions::InvalidVersionException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_InvalidVersionException();");
        }
        result = (affymetrix_calvin_exceptions::InvalidVersionException *)new affymetrix_calvin_exceptions::InvalidVersionException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidVersionException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_InvalidVersionException) {
    {
        affymetrix_calvin_exceptions::InvalidVersionException *arg1 = (affymetrix_calvin_exceptions::InvalidVersionException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_InvalidVersionException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidVersionException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_InvalidVersionException. Expected _p_affymetrix_calvin_exceptions__InvalidVersionException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_InvalidFileTypeException) {
    {
        affymetrix_calvin_exceptions::InvalidFileTypeException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_InvalidFileTypeException();");
        }
        result = (affymetrix_calvin_exceptions::InvalidFileTypeException *)new affymetrix_calvin_exceptions::InvalidFileTypeException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidFileTypeException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_InvalidFileTypeException) {
    {
        affymetrix_calvin_exceptions::InvalidFileTypeException *arg1 = (affymetrix_calvin_exceptions::InvalidFileTypeException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_InvalidFileTypeException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidFileTypeException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_InvalidFileTypeException. Expected _p_affymetrix_calvin_exceptions__InvalidFileTypeException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_UnableToOpenFileException) {
    {
        affymetrix_calvin_exceptions::UnableToOpenFileException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_UnableToOpenFileException();");
        }
        result = (affymetrix_calvin_exceptions::UnableToOpenFileException *)new affymetrix_calvin_exceptions::UnableToOpenFileException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__UnableToOpenFileException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_UnableToOpenFileException) {
    {
        affymetrix_calvin_exceptions::UnableToOpenFileException *arg1 = (affymetrix_calvin_exceptions::UnableToOpenFileException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_UnableToOpenFileException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__UnableToOpenFileException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_UnableToOpenFileException. Expected _p_affymetrix_calvin_exceptions__UnableToOpenFileException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FileNotOpenException) {
    {
        affymetrix_calvin_exceptions::FileNotOpenException *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FileNotOpenException();");
        }
        result = (affymetrix_calvin_exceptions::FileNotOpenException *)new affymetrix_calvin_exceptions::FileNotOpenException();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotOpenException, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileNotOpenException) {
    {
        affymetrix_calvin_exceptions::FileNotOpenException *arg1 = (affymetrix_calvin_exceptions::FileNotOpenException *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileNotOpenException(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotOpenException,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileNotOpenException. Expected _p_affymetrix_calvin_exceptions__FileNotOpenException");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FileHeaderReader) {
    {
        std::ifstream *arg1 = 0 ;
        affymetrix_calvin_io::FileHeader *arg2 = 0 ;
        affymetrix_calvin_io::FileHeaderReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_FileHeaderReader(fs,fh);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_FileHeaderReader. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__FileHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_FileHeaderReader. Expected _p_affymetrix_calvin_io__FileHeader");
            }
        }
        result = (affymetrix_calvin_io::FileHeaderReader *)new affymetrix_calvin_io::FileHeaderReader(*arg1,*arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeaderReader_Read) {
    {
        affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeaderReader_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeaderReader_Read. Expected _p_affymetrix_calvin_io__FileHeaderReader");
            }
        }
        try {
            (arg1)->Read();
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeaderReader_GetDataGroupCnt) {
    {
        affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeaderReader_GetDataGroupCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeaderReader_GetDataGroupCnt. Expected _p_affymetrix_calvin_io__FileHeaderReader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetDataGroupCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileHeaderReader_GetFirstDataGroupFilePos) {
    {
        affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileHeaderReader_GetFirstDataGroupFilePos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileHeaderReader_GetFirstDataGroupFilePos. Expected _p_affymetrix_calvin_io__FileHeaderReader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::FileHeaderReader const *)arg1)->GetFirstDataGroupFilePos();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileHeaderReader) {
    {
        affymetrix_calvin_io::FileHeaderReader *arg1 = (affymetrix_calvin_io::FileHeaderReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileHeaderReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileHeaderReader. Expected _p_affymetrix_calvin_io__FileHeaderReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt8__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt8. Expected _p_std__ifstream");
            }
        }
        result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt16__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt16. Expected _p_std__ifstream");
            }
        }
        result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt32__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt32(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt32. Expected _p_std__ifstream");
            }
        }
        result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt8__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt8. Expected _p_std__ifstream");
            }
        }
        result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt16__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt16. Expected _p_std__ifstream");
            }
        }
        result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt32__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt32(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt32. Expected _p_std__ifstream");
            }
        }
        result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadFloat__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadFloat(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadFloat. Expected _p_std__ifstream");
            }
        }
        result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt8__SWIG_1) {
    {
        char **arg1 = 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt8. Expected _p_p_char");
            }
        }
        result = (int8_t)affymetrix_calvin_io::FileInput::ReadInt8(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt8) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt8__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt8__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadInt8'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadInt16__SWIG_1) {
    {
        char **arg1 = 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt16. Expected _p_p_char");
            }
        }
        result = (int16_t)affymetrix_calvin_io::FileInput::ReadInt16(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt16) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt16__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt16__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadInt16'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadInt32__SWIG_1) {
    {
        char **arg1 = 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadInt32(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadInt32. Expected _p_p_char");
            }
        }
        result = (int32_t)affymetrix_calvin_io::FileInput::ReadInt32(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadInt32) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt32__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadInt32__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadInt32'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadUInt8__SWIG_1) {
    {
        char **arg1 = 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt8. Expected _p_p_char");
            }
        }
        result = (u_int8_t)affymetrix_calvin_io::FileInput::ReadUInt8(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt8) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt8__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt8__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadUInt8'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadUInt16__SWIG_1) {
    {
        char **arg1 = 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt16. Expected _p_p_char");
            }
        }
        result = (u_int16_t)affymetrix_calvin_io::FileInput::ReadUInt16(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt16) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt16__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt16__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadUInt16'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadUInt32__SWIG_1) {
    {
        char **arg1 = 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadUInt32(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadUInt32. Expected _p_p_char");
            }
        }
        result = (u_int32_t)affymetrix_calvin_io::FileInput::ReadUInt32(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadUInt32) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt32__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadUInt32__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadUInt32'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadFloat__SWIG_1) {
    {
        char **arg1 = 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadFloat(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadFloat. Expected _p_p_char");
            }
        }
        result = (float)affymetrix_calvin_io::FileInput::ReadFloat(*arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadFloat) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadFloat__SWIG_0); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadFloat__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadFloat'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadString16__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        int32_t arg2 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileInput_ReadString16(instr,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString16. Expected _p_std__ifstream");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString16__SWIG_1) {
    {
        std::ifstream *arg1 = 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadString16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString16. Expected _p_std__ifstream");
            }
        }
        result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString8__SWIG_0) {
    {
        std::ifstream *arg1 = 0 ;
        int32_t arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileInput_ReadString8(instr,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString8. Expected _p_std__ifstream");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString8__SWIG_1) {
    {
        std::ifstream *arg1 = 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadString8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString8. Expected _p_std__ifstream");
            }
        }
        result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString16__SWIG_2) {
    {
        char **arg1 = 0 ;
        int32_t arg2 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileInput_ReadString16(instr,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString16. Expected _p_p_char");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = affymetrix_calvin_io::FileInput::ReadString16(*arg1,arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString16__SWIG_3) {
    {
        char **arg1 = 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadString16(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString16. Expected _p_p_char");
            }
        }
        result = affymetrix_calvin_io::FileInput::ReadString16(*arg1);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString16) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString16__SWIG_1); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString16__SWIG_3); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString16__SWIG_2); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString16__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadString16'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadString8__SWIG_2) {
    {
        char **arg1 = 0 ;
        int32_t arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileInput_ReadString8(instr,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString8. Expected _p_p_char");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = affymetrix_calvin_io::FileInput::ReadString8(*arg1,arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString8__SWIG_3) {
    {
        char **arg1 = 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FileInput_ReadString8(instr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadString8. Expected _p_p_char");
            }
        }
        result = affymetrix_calvin_io::FileInput::ReadString8(*arg1);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FileInput_ReadString8) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString8__SWIG_1); return;
        }
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString8__SWIG_3); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_p_char, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString8__SWIG_2); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FileInput_ReadString8__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'FileInput_ReadString8'");
    XSRETURN(0);
}


XS(_wrap_FileInput_ReadBlob) {
    {
        std::ifstream *arg1 = 0 ;
        void **arg2 = 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FileInput_ReadBlob(instr,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of FileInput_ReadBlob. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_p_void,0) < 0) {
                SWIG_croak("Type error in argument 2 of FileInput_ReadBlob. Expected _p_p_void");
            }
        }
        result = (int32_t)affymetrix_calvin_io::FileInput::ReadBlob(*arg1,(void const *&)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FileInput) {
    {
        affymetrix_calvin_io::FileInput *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FileInput();");
        }
        result = (affymetrix_calvin_io::FileInput *)new affymetrix_calvin_io::FileInput();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__FileInput, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FileInput) {
    {
        affymetrix_calvin_io::FileInput *arg1 = (affymetrix_calvin_io::FileInput *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FileInput(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__FileInput,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FileInput. Expected _p_affymetrix_calvin_io__FileInput");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GenericDataHeaderReader) {
    {
        std::ifstream *arg1 = 0 ;
        affymetrix_calvin_io::GenericDataHeaderReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_GenericDataHeaderReader(fs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_GenericDataHeaderReader. Expected _p_std__ifstream");
            }
        }
        result = (affymetrix_calvin_io::GenericDataHeaderReader *)new affymetrix_calvin_io::GenericDataHeaderReader(*arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeaderReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericDataHeaderReader_Read) {
    {
        affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
        affymetrix_calvin_io::GenericDataHeader *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericDataHeaderReader_Read(self,gdh);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericDataHeaderReader_Read. Expected _p_affymetrix_calvin_io__GenericDataHeaderReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericDataHeaderReader_Read. Expected _p_affymetrix_calvin_io__GenericDataHeader");
            }
        }
        (arg1)->Read(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GenericDataHeaderReader) {
    {
        affymetrix_calvin_io::GenericDataHeaderReader *arg1 = (affymetrix_calvin_io::GenericDataHeaderReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GenericDataHeaderReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeaderReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GenericDataHeaderReader. Expected _p_affymetrix_calvin_io__GenericDataHeaderReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GenericFileReader) {
    {
        affymetrix_calvin_io::GenericFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GenericFileReader();");
        }
        result = (affymetrix_calvin_io::GenericFileReader *)new affymetrix_calvin_io::GenericFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GenericFileReader) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GenericFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GenericFileReader. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_GetFilename) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericFileReader_GetFilename(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_GetFilename. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        result = ((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetFilename();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_SetFilename) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericFileReader_SetFilename(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_SetFilename. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of GenericFileReader_SetFilename.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFilename((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_ReadHeader__SWIG_0) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        affymetrix_calvin_io::GenericData *arg2 = 0 ;
        affymetrix_calvin_io::GenericFileReader::ReadHeaderOption arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericFileReader_ReadHeader(self,data,option);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_ReadHeader. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericFileReader_ReadHeader. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg3 = (affymetrix_calvin_io::GenericFileReader::ReadHeaderOption) SvIV(ST(2));
        try {
            (arg1)->ReadHeader(*arg2,arg3);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidVersionException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidVersionException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_ReadHeader__SWIG_1) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        affymetrix_calvin_io::GenericData *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericFileReader_ReadHeader(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_ReadHeader. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericFileReader_ReadHeader. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        try {
            (arg1)->ReadHeader(*arg2);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidVersionException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidVersionException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_ReadHeader) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_ReadHeader__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_ReadHeader__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericFileReader_ReadHeader'");
    XSRETURN(0);
}


XS(_wrap_GenericFileReader_Open__SWIG_0) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        affymetrix_calvin_io::GenericData *arg2 = 0 ;
        affymetrix_calvin_io::GenericFileReader::OpenHint arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GenericFileReader_Open(self,data,hint);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_Open. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericFileReader_Open. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        arg3 = (affymetrix_calvin_io::GenericFileReader::OpenHint) SvIV(ST(2));
        try {
            (arg1)->Open(*arg2,arg3);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidVersionException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidVersionException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_Open__SWIG_1) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        affymetrix_calvin_io::GenericData *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericFileReader_Open(self,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_Open. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_calvin_io__GenericData,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericFileReader_Open. Expected _p_affymetrix_calvin_io__GenericData");
            }
        }
        try {
            (arg1)->Open(*arg2);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidVersionException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidVersionException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_Open) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_Open__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericData, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_Open__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericFileReader_Open'");
    XSRETURN(0);
}


XS(_wrap_GenericFileReader_GetDataGroupCnt) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericFileReader_GetDataGroupCnt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_GetDataGroupCnt. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        result = (u_int32_t)((affymetrix_calvin_io::GenericFileReader const *)arg1)->GetDataGroupCnt();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_GetDataGroupReader__SWIG_0) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        int32_t arg2 ;
        SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericFileReader_GetDataGroupReader(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_GetDataGroupReader. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        result = (arg1)->GetDataGroupReader(arg2);
        
        {
            affymetrix_calvin_io::DataGroupReader * resultobj = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_GetDataGroupReader__SWIG_1) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        std::wstring *arg2 = 0 ;
        SwigValueWrapper<affymetrix_calvin_io::DataGroupReader > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GenericFileReader_GetDataGroupReader(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_GetDataGroupReader. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of GenericFileReader_GetDataGroupReader. Expected _p_std__wstring");
            }
        }
        result = (arg1)->GetDataGroupReader((std::wstring const &)*arg2);
        
        {
            affymetrix_calvin_io::DataGroupReader * resultobj = new affymetrix_calvin_io::DataGroupReader((affymetrix_calvin_io::DataGroupReader &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GenericFileReader_GetDataGroupReader) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__wstring, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_GetDataGroupReader__SWIG_1); return;
            }
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GenericFileReader_GetDataGroupReader__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'GenericFileReader_GetDataGroupReader'");
    XSRETURN(0);
}


XS(_wrap_GenericFileReader_Close) {
    {
        affymetrix_calvin_io::GenericFileReader *arg1 = (affymetrix_calvin_io::GenericFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GenericFileReader_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GenericFileReader_Close. Expected _p_affymetrix_calvin_io__GenericFileReader");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GridControlFileReader) {
    {
        affymetrix_calvin_io::GridControlFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GridControlFileReader();");
        }
        result = (affymetrix_calvin_io::GridControlFileReader *)new affymetrix_calvin_io::GridControlFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__GridControlFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GridControlFileReader) {
    {
        affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GridControlFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GridControlFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GridControlFileReader. Expected _p_affymetrix_calvin_io__GridControlFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridControlFileReader_Read) {
    {
        affymetrix_calvin_io::GridControlFileReader *arg1 = (affymetrix_calvin_io::GridControlFileReader *) 0 ;
        std::string *arg2 = 0 ;
        affymetrix_grid_control::GridControlData *arg3 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GridControlFileReader_Read(self,fileName,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__GridControlFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridControlFileReader_Read. Expected _p_affymetrix_calvin_io__GridControlFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of GridControlFileReader_Read.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_grid_control__GridControlData,0) < 0) {
                SWIG_croak("Type error in argument 3 of GridControlFileReader_Read. Expected _p_affymetrix_grid_control__GridControlData");
            }
        }
        try {
            (arg1)->Read((std::string const &)*arg2,*arg3);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidVersionException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidVersionException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::InvalidFileTypeException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::InvalidFileTypeException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataGroupNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataGroupNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotFoundException exception thrown");
            
        }
        catch(affymetrix_calvin_exceptions::DataSetNotOpenException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::DataSetNotOpenException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_TemplateFileReader) {
    {
        affymetrix_calvin_io::TemplateFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_TemplateFileReader();");
        }
        result = (affymetrix_calvin_io::TemplateFileReader *)new affymetrix_calvin_io::TemplateFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__TemplateFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_TemplateFileReader) {
    {
        affymetrix_calvin_io::TemplateFileReader *arg1 = (affymetrix_calvin_io::TemplateFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_TemplateFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__TemplateFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_TemplateFileReader. Expected _p_affymetrix_calvin_io__TemplateFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_TextFileReader) {
    {
        affymetrix_calvin_io::TextFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_TextFileReader();");
        }
        result = (affymetrix_calvin_io::TextFileReader *)new affymetrix_calvin_io::TextFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_TextFileReader) {
    {
        affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_TextFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_TextFileReader. Expected _p_affymetrix_calvin_io__TextFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TextFileReader_ReadFile__SWIG_0) {
    {
        affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
        std::string *arg2 = 0 ;
        std::map<std::string,std::string > *arg3 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: TextFileReader_ReadFile(self,fileName,textData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of TextFileReader_ReadFile. Expected _p_affymetrix_calvin_io__TextFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of TextFileReader_ReadFile.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__mapTstd__string_std__string_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of TextFileReader_ReadFile. Expected _p_std__mapTstd__string_std__string_t");
            }
        }
        try {
            (arg1)->ReadFile((std::string const &)*arg2,*arg3);
        }
        catch(affymetrix_calvin_exceptions::FileNotFoundException &_e) {
            SWIG_croak("C++ affymetrix_calvin_exceptions::FileNotFoundException exception thrown");
            
        }
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TextFileReader_ReadFile__SWIG_1) {
    {
        affymetrix_calvin_io::TextFileReader *arg1 = (affymetrix_calvin_io::TextFileReader *) 0 ;
        std::ifstream *arg2 = 0 ;
        std::map<std::string,std::string > *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: TextFileReader_ReadFile(self,fileStream,textData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of TextFileReader_ReadFile. Expected _p_affymetrix_calvin_io__TextFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__ifstream,0) < 0) {
                SWIG_croak("Type error in argument 2 of TextFileReader_ReadFile. Expected _p_std__ifstream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__mapTstd__string_std__string_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of TextFileReader_ReadFile. Expected _p_std__mapTstd__string_std__string_t");
            }
        }
        (arg1)->ReadFile(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TextFileReader_ReadFile) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__ifstream, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__mapTstd__string_std__string_t, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_TextFileReader_ReadFile__SWIG_1); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_calvin_io__TextFileReader, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__mapTstd__string_std__string_t, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_TextFileReader_ReadFile__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'TextFileReader_ReadFile'");
    XSRETURN(0);
}


XS(_wrap_new_TemplateData) {
    {
        affymetrix_calvin_array::TemplateData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_TemplateData();");
        }
        result = (affymetrix_calvin_array::TemplateData *)new affymetrix_calvin_array::TemplateData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_array__TemplateData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_TemplateData) {
    {
        affymetrix_calvin_array::TemplateData *arg1 = (affymetrix_calvin_array::TemplateData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_TemplateData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_calvin_array__TemplateData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_TemplateData. Expected _p_affymetrix_calvin_array__TemplateData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUInt32_I) {
    {
        std::istream *arg1 = 0 ;
        uint32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUInt32_I(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUInt32_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUInt32_I. Expected _p_unsigned_int");
            }
        }
        ReadUInt32_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadInt32_I) {
    {
        std::istream *arg1 = 0 ;
        int32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadInt32_I(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadInt32_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadInt32_I. Expected _p_int");
            }
        }
        ReadInt32_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFloat_I) {
    {
        std::istream *arg1 = 0 ;
        float *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadFloat_I(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFloat_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadFloat_I. Expected _p_float");
            }
        }
        ReadFloat_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUInt16_I) {
    {
        std::istream *arg1 = 0 ;
        uint16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUInt16_I(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUInt16_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUInt16_I. Expected _p_unsigned_short");
            }
        }
        ReadUInt16_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadInt16_I) {
    {
        std::istream *arg1 = 0 ;
        int16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadInt16_I(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadInt16_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadInt16_I. Expected _p_short");
            }
        }
        ReadInt16_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadCString_I) {
    {
        std::istream *arg1 = 0 ;
        char **arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadCString_I(instr,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadCString_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadCString_I. Expected _p_p_char");
            }
        }
        ReadCString_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadString_I) {
    {
        std::istream *arg1 = 0 ;
        std::string *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadString_I(instr,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadString_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadString_I. Expected _p_std__string");
            }
        }
        ReadString_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUIntLenString_I) {
    {
        std::istream *arg1 = 0 ;
        std::string *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUIntLenString_I(instr,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUIntLenString_I. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUIntLenString_I. Expected _p_std__string");
            }
        }
        ReadUIntLenString_I(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUInt8) {
    {
        std::istream *arg1 = 0 ;
        uint8_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUInt8(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUInt8. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUInt8. Expected _p_unsigned_char");
            }
        }
        ReadUInt8(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadInt8) {
    {
        std::istream *arg1 = 0 ;
        int8_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadInt8(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadInt8. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadInt8. Expected _p_char");
            }
        }
        ReadInt8(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUInt32_N) {
    {
        std::istream *arg1 = 0 ;
        uint32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUInt32_N(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUInt32_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUInt32_N. Expected _p_unsigned_int");
            }
        }
        ReadUInt32_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadInt32_N) {
    {
        std::istream *arg1 = 0 ;
        int32_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadInt32_N(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadInt32_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadInt32_N. Expected _p_int");
            }
        }
        ReadInt32_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFloat_N) {
    {
        std::istream *arg1 = 0 ;
        float *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadFloat_N(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFloat_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadFloat_N. Expected _p_float");
            }
        }
        ReadFloat_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUInt16_N) {
    {
        std::istream *arg1 = 0 ;
        uint16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUInt16_N(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUInt16_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUInt16_N. Expected _p_unsigned_short");
            }
        }
        ReadUInt16_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadInt16_N) {
    {
        std::istream *arg1 = 0 ;
        int16_t *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadInt16_N(instr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadInt16_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadInt16_N. Expected _p_short");
            }
        }
        ReadInt16_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadCString_N) {
    {
        std::istream *arg1 = 0 ;
        char **arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadCString_N(instr,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadCString_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadCString_N. Expected _p_p_char");
            }
        }
        ReadCString_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadString_N) {
    {
        std::istream *arg1 = 0 ;
        std::string *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadString_N(instr,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadString_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadString_N. Expected _p_std__string");
            }
        }
        ReadString_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadUIntLenString_N) {
    {
        std::istream *arg1 = 0 ;
        std::string *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadUIntLenString_N(instr,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadUIntLenString_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadUIntLenString_N. Expected _p_std__string");
            }
        }
        ReadUIntLenString_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFixedString) {
    {
        std::istream *arg1 = 0 ;
        std::string *arg2 = 0 ;
        uint32_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ReadFixedString(instr,str,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFixedString. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadFixedString. Expected _p_std__string");
            }
        }
        arg3 = (uint32_t) SvUV(ST(2));
        ReadFixedString(*arg1,*arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFixedCString) {
    {
        std::istream *arg1 = 0 ;
        char *arg2 = (char *) 0 ;
        uint32_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ReadFixedCString(instr,str,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFixedCString. Expected _p_std__istream");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (uint32_t) SvUV(ST(2));
        ReadFixedCString(*arg1,arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFixedUCString) {
    {
        std::istream *arg1 = 0 ;
        unsigned char *arg2 = (unsigned char *) 0 ;
        uint32_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ReadFixedUCString(instr,str,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFixedUCString. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadFixedUCString. Expected _p_unsigned_char");
            }
        }
        arg3 = (uint32_t) SvUV(ST(2));
        ReadFixedUCString(*arg1,arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadCharacterArray) {
    {
        std::istream *arg1 = 0 ;
        char *arg2 = (char *) 0 ;
        uint32_t arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ReadCharacterArray(instr,str,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadCharacterArray. Expected _p_std__istream");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (uint32_t) SvUV(ST(2));
        ReadCharacterArray(*arg1,arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadNextLine) {
    {
        std::istream *arg1 = 0 ;
        char *arg2 = (char *) 0 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: ReadNextLine(instr,line,len);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadNextLine. Expected _p_std__istream");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (int) SvIV(ST(2));
        ReadNextLine(*arg1,arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ReadFloatFromOldBPMAP_N) {
    {
        std::istream *arg1 = 0 ;
        float *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ReadFloatFromOldBPMAP_N(instr,fval);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__istream,0) < 0) {
                SWIG_croak("Type error in argument 1 of ReadFloatFromOldBPMAP_N. Expected _p_std__istream");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 2 of ReadFloatFromOldBPMAP_N. Expected _p_float");
            }
        }
        ReadFloatFromOldBPMAP_N(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetUInt32_I) {
    {
        uint32_t *arg1 = (uint32_t *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetUInt32_I(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetUInt32_I. Expected _p_unsigned_int");
            }
        }
        result = (uint32_t)MmGetUInt32_I(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetInt32_I) {
    {
        int32_t *arg1 = (int32_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetInt32_I(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetInt32_I. Expected _p_int");
            }
        }
        result = (int32_t)MmGetInt32_I(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetUInt16_I) {
    {
        uint16_t *arg1 = (uint16_t *) 0 ;
        uint16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetUInt16_I(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetUInt16_I. Expected _p_unsigned_short");
            }
        }
        result = (uint16_t)MmGetUInt16_I(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetInt16_I) {
    {
        int16_t *arg1 = (int16_t *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetInt16_I(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetInt16_I. Expected _p_short");
            }
        }
        result = (int16_t)MmGetInt16_I(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetUInt8) {
    {
        uint8_t *arg1 = (uint8_t *) 0 ;
        uint8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetUInt8(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetUInt8. Expected _p_unsigned_char");
            }
        }
        result = (uint8_t)MmGetUInt8(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetInt8) {
    {
        int8_t *arg1 = (int8_t *) 0 ;
        int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetInt8(ptr);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (int8_t *) SvPV(ST(0), PL_na);
        result = (int8_t)MmGetInt8(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetUInt32_N) {
    {
        uint32_t *arg1 = (uint32_t *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetUInt32_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetUInt32_N. Expected _p_unsigned_int");
            }
        }
        result = (uint32_t)MmGetUInt32_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetUInt16_N) {
    {
        uint16_t *arg1 = (uint16_t *) 0 ;
        uint16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetUInt16_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetUInt16_N. Expected _p_unsigned_short");
            }
        }
        result = (uint16_t)MmGetUInt16_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetFloat_N) {
    {
        float *arg1 = (float *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetFloat_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetFloat_N. Expected _p_float");
            }
        }
        result = (float)MmGetFloat_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetInt32_N) {
    {
        int32_t *arg1 = (int32_t *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetInt32_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetInt32_N. Expected _p_int");
            }
        }
        result = (int32_t)MmGetInt32_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetInt16_N) {
    {
        int16_t *arg1 = (int16_t *) 0 ;
        int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetInt16_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetInt16_N. Expected _p_short");
            }
        }
        result = (int16_t)MmGetInt16_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetFloat_I) {
    {
        float *arg1 = (float *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetFloat_I(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetFloat_I. Expected _p_float");
            }
        }
        result = (float)MmGetFloat_I(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmGetFloatFromOldBPMAP_N) {
    {
        float *arg1 = (float *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: MmGetFloatFromOldBPMAP_N(ptr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmGetFloatFromOldBPMAP_N. Expected _p_float");
            }
        }
        result = (float)MmGetFloatFromOldBPMAP_N(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetUInt32_I) {
    {
        uint32_t *arg1 = (uint32_t *) 0 ;
        uint32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetUInt32_I(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetUInt32_I. Expected _p_unsigned_int");
            }
        }
        arg2 = (uint32_t) SvUV(ST(1));
        MmSetUInt32_I(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetUInt16_I) {
    {
        uint16_t *arg1 = (uint16_t *) 0 ;
        uint16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetUInt16_I(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetUInt16_I. Expected _p_unsigned_short");
            }
        }
        arg2 = (uint16_t) SvUV(ST(1));
        MmSetUInt16_I(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetUInt8) {
    {
        uint8_t *arg1 = (uint8_t *) 0 ;
        uint8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetUInt8(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_char,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetUInt8. Expected _p_unsigned_char");
            }
        }
        arg2 = (uint8_t) SvUV(ST(1));
        MmSetUInt8(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetFloat_I) {
    {
        float *arg1 = (float *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetFloat_I(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetFloat_I. Expected _p_float");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        MmSetFloat_I(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetUInt32_N) {
    {
        uint32_t *arg1 = (uint32_t *) 0 ;
        uint32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetUInt32_N(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_int,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetUInt32_N. Expected _p_unsigned_int");
            }
        }
        arg2 = (uint32_t) SvUV(ST(1));
        MmSetUInt32_N(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetUInt16_N) {
    {
        uint16_t *arg1 = (uint16_t *) 0 ;
        uint16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetUInt16_N(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_unsigned_short,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetUInt16_N. Expected _p_unsigned_short");
            }
        }
        arg2 = (uint16_t) SvUV(ST(1));
        MmSetUInt16_N(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_MmSetFloat_N) {
    {
        float *arg1 = (float *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: MmSetFloat_N(ptr,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_float,0) < 0) {
                SWIG_croak("Type error in argument 1 of MmSetFloat_N. Expected _p_float");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        MmSetFloat_N(arg1,arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinatePoint_x_set) {
    {
        CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CoordinatePoint_x_set(self,x);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinatePoint_x_set. Expected _p__CoordinatePoint");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->x = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinatePoint_x_get) {
    {
        CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CoordinatePoint_x_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinatePoint_x_get. Expected _p__CoordinatePoint");
            }
        }
        result = (int32_t) ((arg1)->x);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinatePoint_y_set) {
    {
        CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
        int32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CoordinatePoint_y_set(self,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinatePoint_y_set. Expected _p__CoordinatePoint");
            }
        }
        arg2 = (int32_t) SvIV(ST(1));
        if (arg1) (arg1)->y = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinatePoint_y_get) {
    {
        CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
        int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CoordinatePoint_y_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinatePoint_y_get. Expected _p__CoordinatePoint");
            }
        }
        result = (int32_t) ((arg1)->y);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CoordinatePoint) {
    {
        CoordinatePoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CoordinatePoint();");
        }
        result = (CoordinatePoint *)new CoordinatePoint();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__CoordinatePoint, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CoordinatePoint) {
    {
        CoordinatePoint *arg1 = (CoordinatePoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CoordinatePoint(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CoordinatePoint. Expected _p__CoordinatePoint");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_upperleft_set) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GridCoordinatesType_upperleft_set(self,upperleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_upperleft_set. Expected _p__GridCoordinatesType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of GridCoordinatesType_upperleft_set. Expected _p__CoordinatePoint");
            }
        }
        if (arg1) (arg1)->upperleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_upperleft_get) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GridCoordinatesType_upperleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_upperleft_get. Expected _p__GridCoordinatesType");
            }
        }
        result = (CoordinatePoint *)& ((arg1)->upperleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__CoordinatePoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_upperright_set) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GridCoordinatesType_upperright_set(self,upperright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_upperright_set. Expected _p__GridCoordinatesType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of GridCoordinatesType_upperright_set. Expected _p__CoordinatePoint");
            }
        }
        if (arg1) (arg1)->upperright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_upperright_get) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GridCoordinatesType_upperright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_upperright_get. Expected _p__GridCoordinatesType");
            }
        }
        result = (CoordinatePoint *)& ((arg1)->upperright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__CoordinatePoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_lowerright_set) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GridCoordinatesType_lowerright_set(self,lowerright);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_lowerright_set. Expected _p__GridCoordinatesType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of GridCoordinatesType_lowerright_set. Expected _p__CoordinatePoint");
            }
        }
        if (arg1) (arg1)->lowerright = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_lowerright_get) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GridCoordinatesType_lowerright_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_lowerright_get. Expected _p__GridCoordinatesType");
            }
        }
        result = (CoordinatePoint *)& ((arg1)->lowerright);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__CoordinatePoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_lowerleft_set) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *arg2 = (CoordinatePoint *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GridCoordinatesType_lowerleft_set(self,lowerleft);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_lowerleft_set. Expected _p__GridCoordinatesType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p__CoordinatePoint,0) < 0) {
                SWIG_croak("Type error in argument 2 of GridCoordinatesType_lowerleft_set. Expected _p__CoordinatePoint");
            }
        }
        if (arg1) (arg1)->lowerleft = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GridCoordinatesType_lowerleft_get) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        CoordinatePoint *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GridCoordinatesType_lowerleft_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GridCoordinatesType_lowerleft_get. Expected _p__GridCoordinatesType");
            }
        }
        result = (CoordinatePoint *)& ((arg1)->lowerleft);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__CoordinatePoint, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GridCoordinatesType) {
    {
        GridCoordinatesType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GridCoordinatesType();");
        }
        result = (GridCoordinatesType *)new GridCoordinatesType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__GridCoordinatesType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GridCoordinatesType) {
    {
        GridCoordinatesType *arg1 = (GridCoordinatesType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GridCoordinatesType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GridCoordinatesType. Expected _p__GridCoordinatesType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType_Tag_set) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: TagValuePairType_Tag_set(self,Tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType_Tag_set. Expected _p__TagValuePairType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of TagValuePairType_Tag_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->Tag = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType_Tag_get) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: TagValuePairType_Tag_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType_Tag_get. Expected _p__TagValuePairType");
            }
        }
        result = (std::string *)& ((arg1)->Tag);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType_Value_set) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: TagValuePairType_Value_set(self,Value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType_Value_set. Expected _p__TagValuePairType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of TagValuePairType_Value_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->Value = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType_Value_get) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: TagValuePairType_Value_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType_Value_get. Expected _p__TagValuePairType");
            }
        }
        result = (std::string *)& ((arg1)->Value);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType__TagValuePairType_assign) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        _TagValuePairType arg2 ;
        _TagValuePairType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: TagValuePairType__TagValuePairType_assign(self,vp);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType__TagValuePairType_assign. Expected _p__TagValuePairType");
            }
        }
        {
            _TagValuePairType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 2 of TagValuePairType__TagValuePairType_assign. Expected _p__TagValuePairType");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            _TagValuePairType * resultobj = new _TagValuePairType((_TagValuePairType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p__TagValuePairType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType__TagValuePairType_equals_obj) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        _TagValuePairType arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: TagValuePairType__TagValuePairType_equals_obj(self,vp);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType__TagValuePairType_equals_obj. Expected _p__TagValuePairType");
            }
        }
        {
            _TagValuePairType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 2 of TagValuePairType__TagValuePairType_equals_obj. Expected _p__TagValuePairType");
            }
            arg2 = *argp;
        }
        result = (bool)(arg1)->operator ==(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_TagValuePairType__TagValuePairType_equals_tag) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        char *arg2 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: TagValuePairType__TagValuePairType_equals_tag(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of TagValuePairType__TagValuePairType_equals_tag. Expected _p__TagValuePairType");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (bool)(arg1)->operator ==((char const *)arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_TagValuePairType) {
    {
        TagValuePairType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_TagValuePairType();");
        }
        result = (TagValuePairType *)new TagValuePairType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__TagValuePairType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_TagValuePairType) {
    {
        TagValuePairType *arg1 = (TagValuePairType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_TagValuePairType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p__TagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_TagValuePairType. Expected _p__TagValuePairType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileHeader_GetCols) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileHeader_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileHeader_GetCols. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileHeader_GetRows) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileHeader_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileHeader_GetRows. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileHeader_GetNumProbeSets) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileHeader_GetNumProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileHeader_GetNumProbeSets. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileHeader_GetNumQCProbeSets) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileHeader_GetNumQCProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileHeader_GetNumQCProbeSets. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        result = (int)((affxcdf::CCDFFileHeader const *)arg1)->GetNumQCProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileHeader_GetReference) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileHeader_GetReference(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileHeader_GetReference. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        {
            std::string &_result_ref = (arg1)->GetReference();
            result = (std::string *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFFileHeader) {
    {
        affxcdf::CCDFFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFFileHeader();");
        }
        result = (affxcdf::CCDFFileHeader *)new affxcdf::CCDFFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFFileHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFFileHeader) {
    {
        affxcdf::CCDFFileHeader *arg1 = (affxcdf::CCDFFileHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFFileHeader. Expected _p_affxcdf__CCDFFileHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetListIndex) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetListIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetListIndex. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetListIndex();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetExpos) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetExpos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetExpos. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetExpos();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetX) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetX. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetY) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetY. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetPBase) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetPBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetPBase. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetPBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeInformation_GetTBase) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeInformation_GetTBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeInformation_GetTBase. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        result = (char)((affxcdf::CCDFProbeInformation const *)arg1)->GetTBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFProbeInformation) {
    {
        affxcdf::CCDFProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFProbeInformation();");
        }
        result = (affxcdf::CCDFProbeInformation *)new affxcdf::CCDFProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFProbeInformation) {
    {
        affxcdf::CCDFProbeInformation *arg1 = (affxcdf::CCDFProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFProbeInformation. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetDirection) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        affxcdf::DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetDirection. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (affxcdf::DirectionType)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetNumLists) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetNumLists. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetNumCells) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetNumCells. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetNumCellsPerList) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetNumCellsPerList. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetStart) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetStart. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStart();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetStop) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetStop(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetStop. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeGroupInformation const *)arg1)->GetStop();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetName) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetName. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        result = (arg1)->GetName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeGroupInformation_GetCell) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int arg2 ;
        affxcdf::CCDFProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFProbeGroupInformation_GetCell(self,cell_index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeGroupInformation_GetCell. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFProbeGroupInformation_GetCell. Expected _p_affxcdf__CCDFProbeInformation");
            }
        }
        (arg1)->GetCell(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFProbeGroupInformation) {
    {
        affxcdf::CCDFProbeGroupInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFProbeGroupInformation();");
        }
        result = (affxcdf::CCDFProbeGroupInformation *)new affxcdf::CCDFProbeGroupInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFProbeGroupInformation) {
    {
        affxcdf::CCDFProbeGroupInformation *arg1 = (affxcdf::CCDFProbeGroupInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFProbeGroupInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFProbeGroupInformation. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetProbeSetType) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        affxcdf::GeneChipProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetProbeSetType. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetDirection) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        affxcdf::DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetDirection. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (affxcdf::DirectionType)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetNumLists) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetNumLists. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetNumGroups) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetNumGroups(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetNumGroups. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumGroups();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetNumCells) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetNumCells. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetNumCellsPerList) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetNumCellsPerList. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetProbeSetNumber) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetProbeSetNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetProbeSetNumber. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetInformation_GetGroupInformation) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int arg2 ;
        affxcdf::CCDFProbeGroupInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFProbeSetInformation_GetGroupInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetInformation_GetGroupInformation. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFProbeSetInformation_GetGroupInformation. Expected _p_affxcdf__CCDFProbeGroupInformation");
            }
        }
        (arg1)->GetGroupInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFProbeSetInformation) {
    {
        affxcdf::CCDFProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFProbeSetInformation();");
        }
        result = (affxcdf::CCDFProbeSetInformation *)new affxcdf::CCDFProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFProbeSetInformation) {
    {
        affxcdf::CCDFProbeSetInformation *arg1 = (affxcdf::CCDFProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFProbeSetInformation. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFProbeSetNames) {
    {
        affxcdf::CCDFProbeSetNames *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFProbeSetNames();");
        }
        result = (affxcdf::CCDFProbeSetNames *)new affxcdf::CCDFProbeSetNames();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFProbeSetNames, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFProbeSetNames) {
    {
        affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFProbeSetNames(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetNames,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFProbeSetNames. Expected _p_affxcdf__CCDFProbeSetNames");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetNames_Clear) {
    {
        affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFProbeSetNames_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetNames,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetNames_Clear. Expected _p_affxcdf__CCDFProbeSetNames");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFProbeSetNames_GetName) {
    {
        affxcdf::CCDFProbeSetNames *arg1 = (affxcdf::CCDFProbeSetNames *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCDFProbeSetNames_GetName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFProbeSetNames,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFProbeSetNames_GetName. Expected _p_affxcdf__CCDFProbeSetNames");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = ((affxcdf::CCDFProbeSetNames const *)arg1)->GetName(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFQCProbeInformation) {
    {
        affxcdf::CCDFQCProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFQCProbeInformation();");
        }
        result = (affxcdf::CCDFQCProbeInformation *)new affxcdf::CCDFQCProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeInformation_GetX) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeInformation_GetX. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeInformation_GetY) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeInformation_GetY. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeInformation_GetPLen) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeInformation_GetPLen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeInformation_GetPLen. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        result = (int)((affxcdf::CCDFQCProbeInformation const *)arg1)->GetPLen();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeInformation_IsPerfectMatchProbe) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeInformation_IsPerfectMatchProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeInformation_IsPerfectMatchProbe. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeInformation_IsBackgroundProbe) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeInformation_IsBackgroundProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeInformation_IsBackgroundProbe. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        result = (bool)((affxcdf::CCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFQCProbeInformation) {
    {
        affxcdf::CCDFQCProbeInformation *arg1 = (affxcdf::CCDFQCProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFQCProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFQCProbeInformation. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeSetInformation_GetQCProbeSetType) {
    {
        affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
        affxcdf::GeneChipQCProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeSetInformation_GetQCProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeSetInformation_GetQCProbeSetType. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        result = (affxcdf::GeneChipQCProbeSetType)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeSetInformation_GetNumCells) {
    {
        affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFQCProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeSetInformation_GetNumCells. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        result = (int)((affxcdf::CCDFQCProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFQCProbeSetInformation_GetProbeInformation) {
    {
        affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
        int arg2 ;
        affxcdf::CCDFQCProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFQCProbeSetInformation_GetProbeInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFQCProbeSetInformation_GetProbeInformation. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFQCProbeSetInformation_GetProbeInformation. Expected _p_affxcdf__CCDFQCProbeInformation");
            }
        }
        (arg1)->GetProbeInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFQCProbeSetInformation) {
    {
        affxcdf::CCDFQCProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFQCProbeSetInformation();");
        }
        result = (affxcdf::CCDFQCProbeSetInformation *)new affxcdf::CCDFQCProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFQCProbeSetInformation) {
    {
        affxcdf::CCDFQCProbeSetInformation *arg1 = (affxcdf::CCDFQCProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFQCProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFQCProbeSetInformation. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_SetFileName) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCDFFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_SetFileName. Expected _p_affxcdf__CCDFFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetFileName) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetFileName. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = ((affxcdf::CCDFFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetHeader) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        affxcdf::CCDFFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetHeader. Expected _p_affxcdf__CCDFFileData");
            }
        }
        {
            affxcdf::CCDFFileHeader &_result_ref = (arg1)->GetHeader();
            result = (affxcdf::CCDFFileHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFFileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetError) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetError. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = ((affxcdf::CCDFFileData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetProbeSetName) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCDFFileData_GetProbeSetName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetProbeSetName. Expected _p_affxcdf__CCDFFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = ((affxcdf::CCDFFileData const *)arg1)->GetProbeSetName(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetChipType) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetChipType. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = ((affxcdf::CCDFFileData const *)arg1)->GetChipType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_Read) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_Read. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_ReadHeader) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_ReadHeader. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_Exists) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_Exists. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_Close) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_Close. Expected _p_affxcdf__CCDFFileData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_IsXDACompatibleFile) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCDFFileData_IsXDACompatibleFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_IsXDACompatibleFile. Expected _p_affxcdf__CCDFFileData");
            }
        }
        result = (bool)(arg1)->IsXDACompatibleFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetProbeSetType) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int arg2 ;
        affxcdf::GeneChipProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCDFFileData_GetProbeSetType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetProbeSetType. Expected _p_affxcdf__CCDFFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxcdf::GeneChipProbeSetType)((affxcdf::CCDFFileData const *)arg1)->GetProbeSetType(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetProbeSetInformation) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int arg2 ;
        affxcdf::CCDFProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFFileData_GetProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetProbeSetInformation. Expected _p_affxcdf__CCDFFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFFileData_GetProbeSetInformation. Expected _p_affxcdf__CCDFProbeSetInformation");
            }
        }
        (arg1)->GetProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetQCProbeSetInformation) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int arg2 ;
        affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFFileData_GetQCProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetQCProbeSetInformation. Expected _p_affxcdf__CCDFFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFFileData_GetQCProbeSetInformation. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCDFFileData_GetQCProbeSetInformation_By_Type) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        affxcdf::GeneChipQCProbeSetType arg2 ;
        affxcdf::CCDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCDFFileData_GetQCProbeSetInformation_By_Type(self,qcType,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCDFFileData_GetQCProbeSetInformation_By_Type. Expected _p_affxcdf__CCDFFileData");
            }
        }
        arg2 = (affxcdf::GeneChipQCProbeSetType) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCDFFileData_GetQCProbeSetInformation_By_Type. Expected _p_affxcdf__CCDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCDFFileData) {
    {
        affxcdf::CCDFFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCDFFileData();");
        }
        result = (affxcdf::CCDFFileData *)new affxcdf::CCDFFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcdf__CCDFFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCDFFileData) {
    {
        affxcdf::CCDFFileData *arg1 = (affxcdf::CCDFFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCDFFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcdf__CCDFFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCDFFileData. Expected _p_affxcdf__CCDFFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Intensity_set) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileEntryType_Intensity_set(self,Intensity);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Intensity_set. Expected _p_affxcel___CELFileEntryType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Intensity = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Intensity_get) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileEntryType_Intensity_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Intensity_get. Expected _p_affxcel___CELFileEntryType");
            }
        }
        result = (float) ((arg1)->Intensity);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Stdv_set) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileEntryType_Stdv_set(self,Stdv);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Stdv_set. Expected _p_affxcel___CELFileEntryType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Stdv = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Stdv_get) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileEntryType_Stdv_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Stdv_get. Expected _p_affxcel___CELFileEntryType");
            }
        }
        result = (float) ((arg1)->Stdv);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Pixels_set) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileEntryType_Pixels_set(self,Pixels);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Pixels_set. Expected _p_affxcel___CELFileEntryType");
            }
        }
        arg2 = (short) SvIV(ST(1));
        if (arg1) (arg1)->Pixels = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileEntryType_Pixels_get) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileEntryType_Pixels_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileEntryType_Pixels_get. Expected _p_affxcel___CELFileEntryType");
            }
        }
        result = (short) ((arg1)->Pixels);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CELFileEntryType) {
    {
        affxcel::CELFileEntryType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CELFileEntryType();");
        }
        result = (affxcel::CELFileEntryType *)new affxcel::CELFileEntryType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel___CELFileEntryType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CELFileEntryType) {
    {
        affxcel::CELFileEntryType *arg1 = (affxcel::CELFileEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CELFileEntryType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CELFileEntryType. Expected _p_affxcel___CELFileEntryType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Intensity_set) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Intensity_set(self,Intensity);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Intensity_set. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->Intensity = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Intensity_get) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Intensity_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Intensity_get. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        result = (unsigned short) ((arg1)->Intensity);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Stdv_set) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Stdv_set(self,Stdv);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Stdv_set. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->Stdv = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Stdv_get) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Stdv_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Stdv_get. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        result = (unsigned short) ((arg1)->Stdv);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Pixels_set) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Pixels_set(self,Pixels);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Pixels_set. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->Pixels = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CELFileTranscriptomeEntryType_Pixels_get) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CELFileTranscriptomeEntryType_Pixels_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of CELFileTranscriptomeEntryType_Pixels_get. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        result = (unsigned char) ((arg1)->Pixels);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CELFileTranscriptomeEntryType) {
    {
        affxcel::CELFileTranscriptomeEntryType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CELFileTranscriptomeEntryType();");
        }
        result = (affxcel::CELFileTranscriptomeEntryType *)new affxcel::CELFileTranscriptomeEntryType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CELFileTranscriptomeEntryType) {
    {
        affxcel::CELFileTranscriptomeEntryType *arg1 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CELFileTranscriptomeEntryType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CELFileTranscriptomeEntryType. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCELFileHeaderData) {
    {
        affxcel::CCELFileHeaderData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCELFileHeaderData();");
        }
        result = (affxcel::CCELFileHeaderData *)new affxcel::CCELFileHeaderData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel__CCELFileHeaderData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCELFileHeaderData) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCELFileHeaderData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCELFileHeaderData. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_Clear) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_Clear. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetMagic) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetMagic(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetMagic. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetMagic(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetMagic) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetMagic(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetMagic. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetMagic();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetVersion) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetVersion(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetVersion. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetVersion(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetVersion) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetVersion. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetCols) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetCols(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetCols. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetCols(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetCols) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetCols. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetRows) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetRows(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetRows. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetRows(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetRows) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetRows. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetCells) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetCells(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetCells. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetCells(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetCells) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetCells. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_AppendHeader) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_AppendHeader(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_AppendHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->AppendHeader((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetHeader) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetHeader(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetHeader((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetHeader) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetHeader();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetAlg) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetAlg(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetAlg. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetAlg((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetAlg) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetAlg(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetAlg. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetAlg();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetParams) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetParams(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetParams. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetParams((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetParams) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetParams(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetParams. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetParams();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_ParseChipType) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_ParseChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_ParseChipType. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->ParseChipType();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetChipType) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetChipType(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetChipType. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetChipType((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetChipType) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetChipType. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetChipType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_ParseDatHeader) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_ParseDatHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_ParseDatHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->ParseDatHeader();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetDatHeader__SWIG_0) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetDatHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetDatHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->SetDatHeader();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetDatHeader__SWIG_1) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetDatHeader(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetDatHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetDatHeader((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetDatHeader) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileHeaderData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileHeaderData_SetDatHeader__SWIG_0); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileHeaderData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileHeaderData_SetDatHeader__SWIG_1); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileHeaderData_SetDatHeader'");
    XSRETURN(0);
}


XS(_wrap_CCELFileHeaderData_GetDatHeader) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetDatHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetDatHeader. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetDatHeader();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetMargin) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetMargin(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetMargin. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetMargin(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetMargin) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetMargin(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetMargin. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetMargin();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetOutliers) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        uint32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetOutliers(self,l);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetOutliers. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (uint32_t) SvUV(ST(1));
        (arg1)->SetOutliers(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetOutliers) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetOutliers. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (uint32_t)(arg1)->GetOutliers();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_IncrementOutliers) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_IncrementOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_IncrementOutliers. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->IncrementOutliers();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_DecrementOutliers) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_DecrementOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_DecrementOutliers. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->DecrementOutliers();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetMasked) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        uint32_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetMasked(self,l);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetMasked. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (uint32_t) SvUV(ST(1));
        (arg1)->SetMasked(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetMasked) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetMasked. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (uint32_t)(arg1)->GetMasked();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_IncrementMasked) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_IncrementMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_IncrementMasked. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->IncrementMasked();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_DecrementMasked) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_DecrementMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_DecrementMasked. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->DecrementMasked();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_ParseAlgorithmParameters) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_ParseAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_ParseAlgorithmParameters. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->ParseAlgorithmParameters();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_AddAlgorithmParameter__SWIG_0) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileHeaderData_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_AddAlgorithmParameter. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCELFileHeaderData_AddAlgorithmParameter. Expected _p_std__string");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCELFileHeaderData_AddAlgorithmParameter. Expected _p_std__string");
            }
        }
        (arg1)->AddAlgorithmParameter(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_AddAlgorithmParameter__SWIG_1) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileHeaderData_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_AddAlgorithmParameter. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_AddAlgorithmParameter) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileHeaderData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_std__string, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileHeaderData_AddAlgorithmParameter__SWIG_0); return;
                }
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileHeaderData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvPOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileHeaderData_AddAlgorithmParameter__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileHeaderData_AddAlgorithmParameter'");
    XSRETURN(0);
}


XS(_wrap_CCELFileHeaderData_SetAlgorithmParameter) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetAlgorithmParameter. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->SetAlgorithmParameter((char const *)arg2,(char const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetAlgorithmParameter) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        char *arg2 = (char *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetAlgorithmParameter. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (arg1)->GetAlgorithmParameter((char const *)arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetAlgorithmParameterTag) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetAlgorithmParameterTag(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetAlgorithmParameterTag. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetAlgorithmParameterTag(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetNumberAlgorithmParameters) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetNumberAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetNumberAlgorithmParameters. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (int)(arg1)->GetNumberAlgorithmParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetAlgorithmParameters) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetAlgorithmParameters. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetAlgorithmParameters();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_SetGridCorners) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        GridCoordinatesType arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileHeaderData_SetGridCorners(self,grid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_SetGridCorners. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        {
            GridCoordinatesType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCELFileHeaderData_SetGridCorners. Expected _p__GridCoordinatesType");
            }
            arg2 = *argp;
        }
        (arg1)->SetGridCorners(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_ParseCorners) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_ParseCorners(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_ParseCorners. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        (arg1)->ParseCorners();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileHeaderData_GetGridCorners) {
    {
        affxcel::CCELFileHeaderData *arg1 = (affxcel::CCELFileHeaderData *) 0 ;
        GridCoordinatesType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileHeaderData_GetGridCorners(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileHeaderData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileHeaderData_GetGridCorners. Expected _p_affxcel__CCELFileHeaderData");
            }
        }
        result = (arg1)->GetGridCorners();
        
        {
            GridCoordinatesType * resultobj = new GridCoordinatesType((GridCoordinatesType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p__GridCoordinatesType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCELFileData) {
    {
        affxcel::CCELFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCELFileData();");
        }
        result = (affxcel::CCELFileData *)new affxcel::CCELFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel__CCELFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCELFileData) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCELFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCELFileData. Expected _p_affxcel__CCELFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetError) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetError(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetError. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetError((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetError) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetError. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetThisPtr) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        affxcel::CCELFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetThisPtr(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetThisPtr. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (affxcel::CCELFileData *)(arg1)->GetThisPtr();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel__CCELFileData, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetFileName) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetFileName(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetFileName. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetFileName) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetFileName. Expected _p_affxcel__CCELFileData");
            }
        }
        result = ((affxcel::CCELFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetHeaderKey) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetHeaderKey(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetHeaderKey. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (arg1)->GetHeaderKey((char const *)arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetVersion) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetVersion. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetCols) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetCols. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetRows) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetRows. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetNumCells) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetNumCells. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetHeaderString) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetHeaderString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetHeaderString. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetHeaderString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetHeader) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        affxcel::CCELFileHeaderData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetHeader. Expected _p_affxcel__CCELFileData");
            }
        }
        {
            affxcel::CCELFileHeaderData &_result_ref = (arg1)->GetHeader();
            result = (affxcel::CCELFileHeaderData *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxcel__CCELFileHeaderData, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetAlg) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetAlg(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetAlg. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetAlg();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetParams) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetParams(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetParams. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetParams();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetAlgorithmParameter) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetAlgorithmParameter. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (arg1)->GetAlgorithmParameter((char const *)arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetAlgorithmParameterTag) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetAlgorithmParameterTag(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetAlgorithmParameterTag. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetAlgorithmParameterTag(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetNumberAlgorithmParameters) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetNumberAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetNumberAlgorithmParameters. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetNumberAlgorithmParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetAlgorithmParameters) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetAlgorithmParameters. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetAlgorithmParameters();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetDatHeader) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetDatHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetDatHeader. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetDatHeader();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetChipType) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetChipType. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetChipType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetCellMargin) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetCellMargin(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetCellMargin. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetCellMargin();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetNumOutliers) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetNumOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetNumOutliers. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (uint32_t)(arg1)->GetNumOutliers();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetNumMasked) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetNumMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetNumMasked. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (uint32_t)(arg1)->GetNumMasked();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetGridCorners) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        GridCoordinatesType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetGridCorners(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetGridCorners. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (arg1)->GetGridCorners();
        
        {
            GridCoordinatesType * resultobj = new GridCoordinatesType((GridCoordinatesType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p__GridCoordinatesType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IndexToX) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_IndexToX(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IndexToX. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToX(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IndexToY) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_IndexToY(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IndexToY. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToY(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_XYToIndex__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_XYToIndex(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_XYToIndex. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (int)(arg1)->XYToIndex(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_XYToIndex__SWIG_1) {
    {
        int arg1 ;
        int arg2 ;
        int arg3 ;
        int arg4 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_XYToIndex(x,y,r,c);");
        }
        arg1 = (int) SvIV(ST(0));
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (int) SvIV(ST(3));
        result = (int)affxcel::CCELFileData::XYToIndex(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_XYToIndex) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_XYToIndex__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_XYToIndex__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_XYToIndex'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetEntry__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        affxcel::CELFileEntryType *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_GetEntry(self,index,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCELFileData_GetEntry. Expected _p_affxcel___CELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetEntry__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        affxcel::CELFileEntryType *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_GetEntry(self,x,y,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of CCELFileData_GetEntry. Expected _p_affxcel___CELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetEntry__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetEntry__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_GetEntry'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetTranscriptomeEntry__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        affxcel::CELFileTranscriptomeEntryType *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_GetTranscriptomeEntry(self,index,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetTranscriptomeEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCELFileData_GetTranscriptomeEntry. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        (arg1)->GetTranscriptomeEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetTranscriptomeEntry__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        affxcel::CELFileTranscriptomeEntryType *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_GetTranscriptomeEntry(self,x,y,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetTranscriptomeEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of CCELFileData_GetTranscriptomeEntry. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        (arg1)->GetTranscriptomeEntry(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetTranscriptomeEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetTranscriptomeEntry__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetTranscriptomeEntry__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_GetTranscriptomeEntry'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetIntensity__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetIntensity(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetIntensity. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetIntensity(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetIntensity__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_GetIntensity(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetIntensity. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetIntensity(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetIntensity) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetIntensity__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetIntensity__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_GetIntensity'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetStdv__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetStdv(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetStdv. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetStdv(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetStdv__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_GetStdv(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetStdv. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetStdv(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetStdv) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetStdv__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetStdv__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_GetStdv'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetPixels__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_GetPixels(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetPixels. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (short)(arg1)->GetPixels(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetPixels__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_GetPixels(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetPixels. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (short)(arg1)->GetPixels(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetPixels) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetPixels__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_GetPixels__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_GetPixels'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_IsMasked__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_IsMasked(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsMasked. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsMasked(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsMasked__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_IsMasked(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsMasked. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsMasked(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsMasked) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_IsMasked__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_IsMasked__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_IsMasked'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_IsOutlier__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_IsOutlier(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsOutlier. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsOutlier(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsOutlier__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_IsOutlier(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsOutlier. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsOutlier(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsOutlier) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_IsOutlier__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_IsOutlier__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_IsOutlier'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_Close) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Close. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetFileSize) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        uint32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetFileSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetFileSize. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (uint32_t)(arg1)->GetFileSize();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_Exists) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Exists. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_ReadHeader) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_ReadHeader. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_Read__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_Read(self,bIncludeMaskAndOutliers);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Read. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        result = (bool)(arg1)->Read(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_Read__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Read. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_Read) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_Read__SWIG_1); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_Read__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_Read'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_IsXDACompatibleFile) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_IsXDACompatibleFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsXDACompatibleFile. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->IsXDACompatibleFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsTranscriptomeBcelFile) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_IsTranscriptomeBcelFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsTranscriptomeBcelFile. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->IsTranscriptomeBcelFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_IsCompactCelFile) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_IsCompactCelFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_IsCompactCelFile. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->IsCompactCelFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_ReadEx__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_ReadEx(self,filename,nState);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_ReadEx. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_ReadEx__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_ReadEx(self,filename);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_ReadEx. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (bool)(arg1)->ReadEx((char const *)arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_ReadEx__SWIG_2) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_ReadEx(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_ReadEx. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (bool)(arg1)->ReadEx();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_ReadEx) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_ReadEx__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_ReadEx__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_ReadEx__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_ReadEx'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_GetReadState) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetReadState(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetReadState. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetReadState();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_Clear) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Clear. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_GetFileFormat) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_GetFileFormat(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_GetFileFormat. Expected _p_affxcel__CCELFileData");
            }
        }
        result = (int)(arg1)->GetFileFormat();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetFileFormat) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetFileFormat(self,i);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetFileFormat. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetFileFormat(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetAlgorithmName) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetAlgorithmName(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetAlgorithmName. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetAlgorithmName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_AddAlgorithmParameter) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_AddAlgorithmParameter. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetDimensions) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetDimensions(self,rows,cols);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetDimensions. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        (arg1)->SetDimensions(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetChipType) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetChipType(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetChipType. Expected _p_affxcel__CCELFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetChipType((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetMargin) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetMargin(self,margin);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetMargin. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetMargin(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetGridCorners) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        GridCoordinatesType arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCELFileData_SetGridCorners(self,grid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetGridCorners. Expected _p_affxcel__CCELFileData");
            }
        }
        {
            GridCoordinatesType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p__GridCoordinatesType,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCELFileData_SetGridCorners. Expected _p__GridCoordinatesType");
            }
            arg2 = *argp;
        }
        (arg1)->SetGridCorners(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetCellEntry__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        affxcel::CELFileEntryType *arg4 = (affxcel::CELFileEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetCellEntry(self,x,y,pEntry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetCellEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of CCELFileData_SetCellEntry. Expected _p_affxcel___CELFileEntryType");
            }
        }
        (arg1)->SetCellEntry(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetCellEntry__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        affxcel::CELFileEntryType *arg3 = (affxcel::CELFileEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetCellEntry(self,index,pEntry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetCellEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcel___CELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCELFileData_SetCellEntry. Expected _p_affxcel___CELFileEntryType");
            }
        }
        (arg1)->SetCellEntry(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetCellEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetCellEntry__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetCellEntry__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetCellEntry'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_AllocateEntries) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_AllocateEntries(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_AllocateEntries. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->AllocateEntries();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetTranscriptomeCellEntry__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        affxcel::CELFileTranscriptomeEntryType *arg4 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetTranscriptomeCellEntry(self,x,y,pEntry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetTranscriptomeCellEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of CCELFileData_SetTranscriptomeCellEntry. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        (arg1)->SetTranscriptomeCellEntry(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetTranscriptomeCellEntry__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        affxcel::CELFileTranscriptomeEntryType *arg3 = (affxcel::CELFileTranscriptomeEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetTranscriptomeCellEntry(self,index,pEntry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetTranscriptomeCellEntry. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CCELFileData_SetTranscriptomeCellEntry. Expected _p_affxcel___CELFileTranscriptomeEntryType");
            }
        }
        (arg1)->SetTranscriptomeCellEntry(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetTranscriptomeCellEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetTranscriptomeCellEntry__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetTranscriptomeCellEntry__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetTranscriptomeCellEntry'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_AllocateTranscriptomeEntries) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_AllocateTranscriptomeEntries(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_AllocateTranscriptomeEntries. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->AllocateTranscriptomeEntries();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetIntensity__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        float arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetIntensity(self,index,intensity);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetIntensity. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (float) SvNV(ST(2));
        
        (arg1)->SetIntensity(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetIntensity__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        float arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetIntensity(self,x,y,intensity);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetIntensity. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (float) SvNV(ST(3));
        
        (arg1)->SetIntensity(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetIntensity) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetIntensity__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetIntensity__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetIntensity'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_SetStdv__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        float arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetStdv(self,index,stdev);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetStdv. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (float) SvNV(ST(2));
        
        (arg1)->SetStdv(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetStdv__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        float arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetStdv(self,x,y,stdev);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetStdv. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (float) SvNV(ST(3));
        
        (arg1)->SetStdv(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetStdv) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetStdv__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetStdv__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetStdv'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_SetPixels__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        short arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetPixels(self,index,pixels);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetPixels. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (short) SvIV(ST(2));
        (arg1)->SetPixels(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetPixels__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        short arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetPixels(self,x,y,pixels);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetPixels. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (short) SvIV(ST(3));
        (arg1)->SetPixels(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetPixels) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetPixels__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetPixels__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetPixels'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_SetMask__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetMask(self,index,mask);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetMask. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (bool) SvIV(ST(2));
        (arg1)->SetMask(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetMask__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetMask(self,x,y,masked);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetMask. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (bool) SvIV(ST(3));
        (arg1)->SetMask(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetMask) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetMask__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetMask__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetMask'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_SetOutlier__SWIG_0) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        bool arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCELFileData_SetOutlier(self,index,outlier);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetOutlier. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (bool) SvIV(ST(2));
        (arg1)->SetOutlier(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetOutlier__SWIG_1) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCELFileData_SetOutlier(self,x,y,outlier);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_SetOutlier. Expected _p_affxcel__CCELFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (bool) SvIV(ST(3));
        (arg1)->SetOutlier(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_SetOutlier) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetOutlier__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxcel__CCELFileData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCELFileData_SetOutlier__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCELFileData_SetOutlier'");
    XSRETURN(0);
}


XS(_wrap_CCELFileData_Munmap) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_Munmap(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_Munmap. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->Munmap();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCELFileData_EnsureNotMmapped) {
    {
        affxcel::CCELFileData *arg1 = (affxcel::CCELFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCELFileData_EnsureNotMmapped(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxcel__CCELFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCELFileData_EnsureNotMmapped. Expected _p_affxcel__CCELFileData");
            }
        }
        (arg1)->EnsureNotMmapped();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_centerx_set) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneType_centerx_set(self,centerx);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_centerx_set. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->centerx = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_centerx_get) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneType_centerx_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_centerx_get. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        result = (float) ((arg1)->centerx);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_centery_set) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneType_centery_set(self,centery);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_centery_set. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->centery = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_centery_get) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneType_centery_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_centery_get. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        result = (float) ((arg1)->centery);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_background_set) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneType_background_set(self,background);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_background_set. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->background = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType_background_get) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneType_background_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType_background_get. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        result = (float) ((arg1)->background);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneType__BackgroundZoneType_assign) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        affxchp::_BackgroundZoneType arg2 ;
        affxchp::_BackgroundZoneType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneType__BackgroundZoneType_assign(self,zn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneType__BackgroundZoneType_assign. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        {
            affxchp::_BackgroundZoneType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 2 of BackgroundZoneType__BackgroundZoneType_assign. Expected _p_affxchp___BackgroundZoneType");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affxchp::_BackgroundZoneType * resultobj = new affxchp::_BackgroundZoneType((affxchp::_BackgroundZoneType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp___BackgroundZoneType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_BackgroundZoneType) {
    {
        affxchp::BackgroundZoneType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_BackgroundZoneType();");
        }
        result = (affxchp::BackgroundZoneType *)new affxchp::BackgroundZoneType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp___BackgroundZoneType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_BackgroundZoneType) {
    {
        affxchp::BackgroundZoneType *arg1 = (affxchp::BackgroundZoneType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_BackgroundZoneType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_BackgroundZoneType. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_number_zones_set) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneInfo_number_zones_set(self,number_zones);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_number_zones_set. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->number_zones = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_number_zones_get) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneInfo_number_zones_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_number_zones_get. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        result = (int) ((arg1)->number_zones);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_smooth_factor_set) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneInfo_smooth_factor_set(self,smooth_factor);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_smooth_factor_set. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->smooth_factor = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_smooth_factor_get) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneInfo_smooth_factor_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_smooth_factor_get. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        result = (float) ((arg1)->smooth_factor);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_zones_set) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        affxchp::BackgroundZoneTypeList *arg2 = (affxchp::BackgroundZoneTypeList *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BackgroundZoneInfo_zones_set(self,zones);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_zones_set. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of BackgroundZoneInfo_zones_set. Expected _p_std__listTaffxchp___BackgroundZoneType_t");
            }
        }
        if (arg1) (arg1)->zones = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BackgroundZoneInfo_zones_get) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        affxchp::BackgroundZoneTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BackgroundZoneInfo_zones_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of BackgroundZoneInfo_zones_get. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        result = (affxchp::BackgroundZoneTypeList *)& ((arg1)->zones);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_BackgroundZoneInfo) {
    {
        affxchp::BackgroundZoneInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_BackgroundZoneInfo();");
        }
        result = (affxchp::BackgroundZoneInfo *)new affxchp::BackgroundZoneInfo();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp___BackgroundZoneInfo, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_BackgroundZoneInfo) {
    {
        affxchp::BackgroundZoneInfo *arg1 = (affxchp::BackgroundZoneInfo *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_BackgroundZoneInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_BackgroundZoneInfo. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCHPFileHeader) {
    {
        affxchp::CCHPFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCHPFileHeader();");
        }
        result = (affxchp::CCHPFileHeader *)new affxchp::CCHPFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CCHPFileHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCHPFileHeader) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCHPFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCHPFileHeader. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetCols) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetCols. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetRows) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetRows. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetNumProbeSets) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetNumProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetNumProbeSets. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetNumProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetAssayType) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        affxchp::CCHPFileHeader::GeneChipAssayType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetAssayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetAssayType. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (affxchp::CCHPFileHeader::GeneChipAssayType)((affxchp::CCHPFileHeader const *)arg1)->GetAssayType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetChipType) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetChipType. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = ((affxchp::CCHPFileHeader const *)arg1)->GetChipType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetAlgName) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetAlgName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetAlgName. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetAlgVersion) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetAlgVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetAlgVersion. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = ((affxchp::CCHPFileHeader const *)arg1)->GetAlgVersion();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_AlgorithmParameters) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        TagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_AlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_AlgorithmParameters. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        {
            TagValuePairTypeList &_result_ref = (arg1)->AlgorithmParameters();
            result = (TagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listT_TagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SummaryParameters) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        TagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_SummaryParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SummaryParameters. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        {
            TagValuePairTypeList &_result_ref = (arg1)->SummaryParameters();
            result = (TagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listT_TagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetParentCellFile) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetParentCellFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetParentCellFile. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = ((affxchp::CCHPFileHeader const *)arg1)->GetParentCellFile();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetProgID) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetProgID(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetProgID. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = ((affxchp::CCHPFileHeader const *)arg1)->GetProgID();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetAlgorithmParameter) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetAlgorithmParameter. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (arg1)->GetAlgorithmParameter((char const *)arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetSummaryParameter) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_GetSummaryParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetSummaryParameter. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (arg1)->GetSummaryParameter((char const *)arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetBackgroundZoneInfo) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        affxchp::BackgroundZoneInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetBackgroundZoneInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetBackgroundZoneInfo. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        {
            affxchp::BackgroundZoneInfo &_result_ref = (arg1)->GetBackgroundZoneInfo();
            result = (affxchp::BackgroundZoneInfo *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp___BackgroundZoneInfo, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetBackgroundZones) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        affxchp::BackgroundZoneTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetBackgroundZones(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetBackgroundZones. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        {
            affxchp::BackgroundZoneTypeList &_result_ref = (arg1)->GetBackgroundZones();
            result = (affxchp::BackgroundZoneTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetBackgroundZone) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int arg2 ;
        int arg3 ;
        affxchp::BackgroundZoneType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCHPFileHeader_GetBackgroundZone(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetBackgroundZone. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (arg1)->GetBackgroundZone(arg2,arg3);
        
        {
            affxchp::BackgroundZoneType * resultobj = new affxchp::BackgroundZoneType((affxchp::BackgroundZoneType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp___BackgroundZoneType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetMagicNumber) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetMagicNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetMagicNumber. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetMagicNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_GetVersionNumber) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileHeader_GetVersionNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_GetVersionNumber. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        result = (int)((affxchp::CCHPFileHeader const *)arg1)->GetVersionNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetCols) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetCols(self,n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetCols. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetCols(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetRows) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetRows(self,n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetRows. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetRows(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetNumProbeSets) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetNumProbeSets(self,n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetNumProbeSets. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetNumProbeSets(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetAssayType) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        affxchp::CCHPFileHeader::GeneChipAssayType arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetAssayType(self,t);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetAssayType. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        arg2 = (affxchp::CCHPFileHeader::GeneChipAssayType) SvIV(ST(1));
        (arg1)->SetAssayType(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetChipType) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetChipType(self,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetChipType. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetChipType((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetAlgName) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetAlgName(self,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetAlgName. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetAlgName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetAlgVersion) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetAlgVersion(self,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetAlgVersion. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetAlgVersion((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetParentCellFile) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetParentCellFile(self,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetParentCellFile. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetParentCellFile((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileHeader_SetProgID) {
    {
        affxchp::CCHPFileHeader *arg1 = (affxchp::CCHPFileHeader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileHeader_SetProgID(self,s);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileHeader_SetProgID. Expected _p_affxchp__CCHPFileHeader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetProgID((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CProbeSetResults) {
    {
        affxchp::CProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CProbeSetResults();");
        }
        result = (affxchp::CProbeSetResults *)new affxchp::CProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CProbeSetResults) {
    {
        affxchp::CProbeSetResults *arg1 = (affxchp::CProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CProbeSetResults. Expected _p_affxchp__CProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_DetectionPValue_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_DetectionPValue_set(self,DetectionPValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_DetectionPValue_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->DetectionPValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_DetectionPValue_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_DetectionPValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_DetectionPValue_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->DetectionPValue);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Signal_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Signal_set(self,Signal);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Signal_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Signal = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Signal_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Signal_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Signal_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->Signal);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumPairs_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumPairs_set(self,NumPairs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumPairs_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->NumPairs = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumPairs_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumPairs_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumPairs_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (unsigned short) ((arg1)->NumPairs);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumUsedPairs_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumUsedPairs_set(self,NumUsedPairs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumUsedPairs_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->NumUsedPairs = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumUsedPairs_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumUsedPairs_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumUsedPairs_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (unsigned short) ((arg1)->NumUsedPairs);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Detection_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Detection_set(self,Detection);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Detection_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->Detection = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Detection_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Detection_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Detection_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (unsigned char) ((arg1)->Detection);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_m_HasCompResults_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_m_HasCompResults_set(self,m_HasCompResults);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_m_HasCompResults_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        if (arg1) (arg1)->m_HasCompResults = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_m_HasCompResults_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_m_HasCompResults_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_m_HasCompResults_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (bool) ((arg1)->m_HasCompResults);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_ChangePValue_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_ChangePValue_set(self,ChangePValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_ChangePValue_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->ChangePValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_ChangePValue_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_ChangePValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_ChangePValue_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->ChangePValue);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatio_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatio_set(self,SignalLogRatio);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatio_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->SignalLogRatio = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatio_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatio_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatio_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->SignalLogRatio);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatioLow_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatioLow_set(self,SignalLogRatioLow);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatioLow_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->SignalLogRatioLow = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatioLow_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatioLow_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatioLow_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->SignalLogRatioLow);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatioHigh_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatioHigh_set(self,SignalLogRatioHigh);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatioHigh_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->SignalLogRatioHigh = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_SignalLogRatioHigh_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_SignalLogRatioHigh_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_SignalLogRatioHigh_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (float) ((arg1)->SignalLogRatioHigh);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumCommonPairs_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumCommonPairs_set(self,NumCommonPairs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumCommonPairs_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->NumCommonPairs = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_NumCommonPairs_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_NumCommonPairs_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_NumCommonPairs_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (unsigned short) ((arg1)->NumCommonPairs);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Change_set) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Change_set(self,Change);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Change_set. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->Change = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_Change_get) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_Change_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_Change_get. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (unsigned char) ((arg1)->Change);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_GetDetectionString) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_GetDetectionString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_GetDetectionString. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (arg1)->GetDetectionString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_GetChangeString) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_GetChangeString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_GetChangeString. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (arg1)->GetChangeString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CExpressionProbeSetResults_CExpressionProbeSetResults_assign) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        affxchp::CExpressionProbeSetResults *arg2 = 0 ;
        affxchp::CExpressionProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CExpressionProbeSetResults_CExpressionProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CExpressionProbeSetResults_CExpressionProbeSetResults_assign. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of CExpressionProbeSetResults_CExpressionProbeSetResults_assign. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affxchp::CExpressionProbeSetResults * resultobj = new affxchp::CExpressionProbeSetResults((affxchp::CExpressionProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp__CExpressionProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CExpressionProbeSetResults) {
    {
        affxchp::CExpressionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CExpressionProbeSetResults();");
        }
        result = (affxchp::CExpressionProbeSetResults *)new affxchp::CExpressionProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CExpressionProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CExpressionProbeSetResults) {
    {
        affxchp::CExpressionProbeSetResults *arg1 = (affxchp::CExpressionProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CExpressionProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CExpressionProbeSetResults. Expected _p_affxchp__CExpressionProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_AlleleCall_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_AlleleCall_set(self,AlleleCall);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_AlleleCall_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->AlleleCall = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_AlleleCall_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_AlleleCall_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_AlleleCall_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (unsigned char) ((arg1)->AlleleCall);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_Confidence_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_Confidence_set(self,Confidence);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_Confidence_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Confidence = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_Confidence_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_Confidence_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_Confidence_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->Confidence);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_RAS1_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_RAS1_set(self,RAS1);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_RAS1_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->RAS1 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_RAS1_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_RAS1_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_RAS1_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->RAS1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_RAS2_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_RAS2_set(self,RAS2);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_RAS2_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->RAS2 = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_RAS2_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_RAS2_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_RAS2_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->RAS2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_AA_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_AA_set(self,pvalue_AA);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_AA_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->pvalue_AA = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_AA_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_AA_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_AA_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->pvalue_AA);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_AB_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_AB_set(self,pvalue_AB);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_AB_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->pvalue_AB = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_AB_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_AB_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_AB_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->pvalue_AB);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_BB_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_BB_set(self,pvalue_BB);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_BB_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->pvalue_BB = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_BB_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_BB_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_BB_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->pvalue_BB);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_NoCall_set) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_NoCall_set(self,pvalue_NoCall);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_NoCall_set. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->pvalue_NoCall = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_pvalue_NoCall_get) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_pvalue_NoCall_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_pvalue_NoCall_get. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (float) ((arg1)->pvalue_NoCall);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_GetAlleleCallString) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_GetAlleleCallString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_GetAlleleCallString. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (arg1)->GetAlleleCallString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        affxchp::CGenotypeProbeSetResults *arg2 = 0 ;
        affxchp::CGenotypeProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affxchp::CGenotypeProbeSetResults * resultobj = new affxchp::CGenotypeProbeSetResults((affxchp::CGenotypeProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CGenotypeProbeSetResults) {
    {
        affxchp::CGenotypeProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CGenotypeProbeSetResults();");
        }
        result = (affxchp::CGenotypeProbeSetResults *)new affxchp::CGenotypeProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CGenotypeProbeSetResults) {
    {
        affxchp::CGenotypeProbeSetResults *arg1 = (affxchp::CGenotypeProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CGenotypeProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CGenotypeProbeSetResults. Expected _p_affxchp__CGenotypeProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CUniversalProbeSetResults_GetBackground) {
    {
        affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CUniversalProbeSetResults_GetBackground(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CUniversalProbeSetResults_GetBackground. Expected _p_affxchp__CUniversalProbeSetResults");
            }
        }
        result = (float)((affxchp::CUniversalProbeSetResults const *)arg1)->GetBackground();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CUniversalProbeSetResults_SetBackground) {
    {
        affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CUniversalProbeSetResults_SetBackground(self,bg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CUniversalProbeSetResults_SetBackground. Expected _p_affxchp__CUniversalProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetBackground(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CUniversalProbeSetResults_CUniversalProbeSetResults_assign) {
    {
        affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
        affxchp::CUniversalProbeSetResults *arg2 = 0 ;
        affxchp::CUniversalProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CUniversalProbeSetResults_CUniversalProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CUniversalProbeSetResults_CUniversalProbeSetResults_assign. Expected _p_affxchp__CUniversalProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp__CUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of CUniversalProbeSetResults_CUniversalProbeSetResults_assign. Expected _p_affxchp__CUniversalProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affxchp::CUniversalProbeSetResults * resultobj = new affxchp::CUniversalProbeSetResults((affxchp::CUniversalProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp__CUniversalProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CUniversalProbeSetResults) {
    {
        affxchp::CUniversalProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CUniversalProbeSetResults();");
        }
        result = (affxchp::CUniversalProbeSetResults *)new affxchp::CUniversalProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CUniversalProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CUniversalProbeSetResults) {
    {
        affxchp::CUniversalProbeSetResults *arg1 = (affxchp::CUniversalProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CUniversalProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CUniversalProbeSetResults. Expected _p_affxchp__CUniversalProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_position_set) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ForceCallType_position_set(self,position);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_position_set. Expected _p_affxchp___ForceCallType");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->position = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_position_get) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ForceCallType_position_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_position_get. Expected _p_affxchp___ForceCallType");
            }
        }
        result = (int) ((arg1)->position);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_call_set) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ForceCallType_call_set(self,call);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_call_set. Expected _p_affxchp___ForceCallType");
            }
        }
        arg2 = (char) *SvPV(ST(1),PL_na);
        if (arg1) (arg1)->call = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_call_get) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ForceCallType_call_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_call_get. Expected _p_affxchp___ForceCallType");
            }
        }
        result = (char) ((arg1)->call);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_reason_set) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ForceCallType_reason_set(self,reason);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_reason_set. Expected _p_affxchp___ForceCallType");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->reason = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ForceCallType_reason_get) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ForceCallType_reason_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ForceCallType_reason_get. Expected _p_affxchp___ForceCallType");
            }
        }
        result = (unsigned char) ((arg1)->reason);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ForceCallType) {
    {
        affxchp::ForceCallType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ForceCallType();");
        }
        result = (affxchp::ForceCallType *)new affxchp::ForceCallType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp___ForceCallType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ForceCallType) {
    {
        affxchp::ForceCallType *arg1 = (affxchp::ForceCallType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ForceCallType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ForceCallType. Expected _p_affxchp___ForceCallType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BaseCallType_position_set) {
    {
        affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BaseCallType_position_set(self,position);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BaseCallType_position_set. Expected _p_affxchp___BaseCallType");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->position = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BaseCallType_position_get) {
    {
        affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BaseCallType_position_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BaseCallType_position_get. Expected _p_affxchp___BaseCallType");
            }
        }
        result = (int) ((arg1)->position);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BaseCallType_call_set) {
    {
        affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
        char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BaseCallType_call_set(self,call);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BaseCallType_call_set. Expected _p_affxchp___BaseCallType");
            }
        }
        arg2 = (char) *SvPV(ST(1),PL_na);
        if (arg1) (arg1)->call = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BaseCallType_call_get) {
    {
        affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BaseCallType_call_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of BaseCallType_call_get. Expected _p_affxchp___BaseCallType");
            }
        }
        result = (char) ((arg1)->call);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_BaseCallType) {
    {
        affxchp::BaseCallType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_BaseCallType();");
        }
        result = (affxchp::BaseCallType *)new affxchp::BaseCallType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp___BaseCallType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_BaseCallType) {
    {
        affxchp::BaseCallType *arg1 = (affxchp::BaseCallType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_BaseCallType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_BaseCallType. Expected _p_affxchp___BaseCallType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CResequencingResults) {
    {
        affxchp::CResequencingResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CResequencingResults();");
        }
        result = (affxchp::CResequencingResults *)new affxchp::CResequencingResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CResequencingResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CResequencingResults) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CResequencingResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CResequencingResults. Expected _p_affxchp__CResequencingResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_Clear) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_Clear. Expected _p_affxchp__CResequencingResults");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetCalledBases) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        std::vector<char > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetCalledBases(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetCalledBases. Expected _p_affxchp__CResequencingResults");
            }
        }
        {
            std::vector<char > const &_result_ref = (arg1)->GetCalledBases();
            result = (std::vector<char > *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTchar_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetCalledBase) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_GetCalledBase(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetCalledBase. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (char)(arg1)->GetCalledBase(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetCalledBasesSize) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetCalledBasesSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetCalledBasesSize. Expected _p_affxchp__CResequencingResults");
            }
        }
        result = (int)((affxchp::CResequencingResults const *)arg1)->GetCalledBasesSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_ResizeCalledBases) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_ResizeCalledBases(self,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_ResizeCalledBases. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->ResizeCalledBases(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_SetCalledBase) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        char arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CResequencingResults_SetCalledBase(self,index,call);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_SetCalledBase. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (char) *SvPV(ST(2),PL_na);
        (arg1)->SetCalledBase(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetScores) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        std::vector<float > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetScores(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetScores. Expected _p_affxchp__CResequencingResults");
            }
        }
        {
            std::vector<float > const &_result_ref = (arg1)->GetScores();
            result = (std::vector<float > *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetScore) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_GetScore(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetScore. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetScore(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetScoresSize) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetScoresSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetScoresSize. Expected _p_affxchp__CResequencingResults");
            }
        }
        result = (int)((affxchp::CResequencingResults const *)arg1)->GetScoresSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_ResizeScores) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_ResizeScores(self,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_ResizeScores. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->ResizeScores(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_SetScore) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        float arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CResequencingResults_SetScore(self,index,score);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_SetScore. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (float) SvNV(ST(2));
        
        (arg1)->SetScore(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetForceCalls) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        std::vector<affxchp::ForceCallType > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetForceCalls(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetForceCalls. Expected _p_affxchp__CResequencingResults");
            }
        }
        {
            std::vector<affxchp::ForceCallType > const &_result_ref = (arg1)->GetForceCalls();
            result = (std::vector<affxchp::ForceCallType > *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffxchp___ForceCallType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetForceCall) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        affxchp::ForceCallType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_GetForceCall(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetForceCall. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetForceCall(arg2);
        
        {
            affxchp::ForceCallType * resultobj = new affxchp::ForceCallType((affxchp::ForceCallType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp___ForceCallType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetForceCallsSize) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetForceCallsSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetForceCallsSize. Expected _p_affxchp__CResequencingResults");
            }
        }
        result = (int)((affxchp::CResequencingResults const *)arg1)->GetForceCallsSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_ResizeForceCalls) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_ResizeForceCalls(self,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_ResizeForceCalls. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->ResizeForceCalls(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_SetForceCall) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        affxchp::ForceCallType arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CResequencingResults_SetForceCall(self,index,call);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_SetForceCall. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            affxchp::ForceCallType * argp;
            if (SWIG_ConvertPtr(ST(2),(void **) &argp, SWIGTYPE_p_affxchp___ForceCallType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CResequencingResults_SetForceCall. Expected _p_affxchp___ForceCallType");
            }
            arg3 = *argp;
        }
        (arg1)->SetForceCall(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetOrigCalls) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        std::vector<affxchp::BaseCallType > *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetOrigCalls(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetOrigCalls. Expected _p_affxchp__CResequencingResults");
            }
        }
        {
            std::vector<affxchp::BaseCallType > const &_result_ref = (arg1)->GetOrigCalls();
            result = (std::vector<affxchp::BaseCallType > *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__vectorTaffxchp___BaseCallType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetOrigCall) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        affxchp::BaseCallType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_GetOrigCall(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetOrigCall. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetOrigCall(arg2);
        
        {
            affxchp::BaseCallType * resultobj = new affxchp::BaseCallType((affxchp::BaseCallType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affxchp___BaseCallType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_GetOrigCallsSize) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CResequencingResults_GetOrigCallsSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_GetOrigCallsSize. Expected _p_affxchp__CResequencingResults");
            }
        }
        result = (int)((affxchp::CResequencingResults const *)arg1)->GetOrigCallsSize();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_ResizeOrigCalls) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CResequencingResults_ResizeOrigCalls(self,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_ResizeOrigCalls. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->ResizeOrigCalls(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CResequencingResults_SetOrigCall) {
    {
        affxchp::CResequencingResults *arg1 = (affxchp::CResequencingResults *) 0 ;
        int arg2 ;
        affxchp::BaseCallType arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CResequencingResults_SetOrigCall(self,index,call);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CResequencingResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of CResequencingResults_SetOrigCall. Expected _p_affxchp__CResequencingResults");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            affxchp::BaseCallType * argp;
            if (SWIG_ConvertPtr(ST(2),(void **) &argp, SWIGTYPE_p_affxchp___BaseCallType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CResequencingResults_SetOrigCall. Expected _p_affxchp___BaseCallType");
            }
            arg3 = *argp;
        }
        (arg1)->SetOrigCall(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCHPFileData) {
    {
        affxchp::CCHPFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCHPFileData();");
        }
        result = (affxchp::CCHPFileData *)new affxchp::CCHPFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CCHPFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CCHPFileData) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCHPFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCHPFileData. Expected _p_affxchp__CCHPFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetHeader) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        affxchp::CCHPFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetHeader. Expected _p_affxchp__CCHPFileData");
            }
        }
        {
            affxchp::CCHPFileHeader &_result_ref = (arg1)->GetHeader();
            result = (affxchp::CCHPFileHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CCHPFileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetExpressionResults) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        int arg2 ;
        affxchp::CExpressionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileData_GetExpressionResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetExpressionResults. Expected _p_affxchp__CCHPFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxchp::CExpressionProbeSetResults *)(arg1)->GetExpressionResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CExpressionProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetGenotypingResults) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        int arg2 ;
        affxchp::CGenotypeProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileData_GetGenotypingResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetGenotypingResults. Expected _p_affxchp__CCHPFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxchp::CGenotypeProbeSetResults *)(arg1)->GetGenotypingResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CGenotypeProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetUniversalResults) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        int arg2 ;
        affxchp::CUniversalProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileData_GetUniversalResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetUniversalResults. Expected _p_affxchp__CCHPFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxchp::CUniversalProbeSetResults *)(arg1)->GetUniversalResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CUniversalProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetResequencingResults) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        affxchp::CResequencingResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_GetResequencingResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetResequencingResults. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = (affxchp::CResequencingResults *)(arg1)->GetResequencingResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxchp__CResequencingResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetError) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetError. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = ((affxchp::CCHPFileData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_Read) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_Read. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_ReadHeader) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_ReadHeader. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_Exists) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_Exists. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_IsXDACompatibleFile) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_IsXDACompatibleFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_IsXDACompatibleFile. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = (bool)(arg1)->IsXDACompatibleFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_SetFileName) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCHPFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_SetFileName. Expected _p_affxchp__CCHPFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_GetFileName) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_GetFileName. Expected _p_affxchp__CCHPFileData");
            }
        }
        result = ((affxchp::CCHPFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCHPFileData_Clear) {
    {
        affxchp::CCHPFileData *arg1 = (affxchp::CCHPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCHPFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxchp__CCHPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCHPFileData_Clear. Expected _p_affxchp__CCHPFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_dValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_dValue_set(self,dValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_dValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        if (arg1) (arg1)->dValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_dValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_dValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_dValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (double) ((arg1)->dValue);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_fValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_fValue_set(self,fValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_fValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->fValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_fValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_fValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_fValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (float) ((arg1)->fValue);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_iValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_iValue_set(self,iValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_iValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->iValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_iValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_iValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_iValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (int) ((arg1)->iValue);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_sValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_sValue_set(self,sValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_sValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (short) SvIV(ST(1));
        if (arg1) (arg1)->sValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_sValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_sValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_sValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (short) ((arg1)->sValue);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_cValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_cValue_set(self,cValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_cValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (char) *SvPV(ST(1),PL_na);
        if (arg1) (arg1)->cValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_cValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_cValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_cValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (char) ((arg1)->cValue);
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_uiValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_uiValue_set(self,uiValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_uiValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->uiValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_uiValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_uiValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_uiValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (unsigned int) ((arg1)->uiValue);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_usValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_usValue_set(self,usValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_usValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (unsigned short) SvUV(ST(1));
        if (arg1) (arg1)->usValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_usValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_usValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_usValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (unsigned short) ((arg1)->usValue);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_ucValue_set) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: BarSequenceResultData_ucValue_set(self,ucValue);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_ucValue_set. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->ucValue = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_BarSequenceResultData_ucValue_get) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: BarSequenceResultData_ucValue_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of BarSequenceResultData_ucValue_get. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        result = (unsigned char) ((arg1)->ucValue);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_BarSequenceResultData) {
    {
        affxbar::BarSequenceResultData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_BarSequenceResultData();");
        }
        result = (affxbar::BarSequenceResultData *)new affxbar::BarSequenceResultData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbar___BarSequenceResultData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_BarSequenceResultData) {
    {
        affxbar::BarSequenceResultData *arg1 = (affxbar::BarSequenceResultData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_BarSequenceResultData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_BarSequenceResultData. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CGDACSequenceResultItem) {
    {
        affxbar::CGDACSequenceResultItem *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CGDACSequenceResultItem();");
        }
        result = (affxbar::CGDACSequenceResultItem *)new affxbar::CGDACSequenceResultItem();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbar__CGDACSequenceResultItem, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CGDACSequenceResultItem) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CGDACSequenceResultItem(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CGDACSequenceResultItem. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetName) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetName. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetVersion) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetVersion. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetVersion();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetGroupName) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetGroupName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetGroupName. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = ((affxbar::CGDACSequenceResultItem const *)arg1)->GetGroupName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetNumberDataPoints) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetNumberDataPoints(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetNumberDataPoints. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberDataPoints();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetNumberColumns) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetNumberColumns(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetNumberColumns. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberColumns();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetColumnType) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int arg2 ;
        affxbar::GDACFILES_BAR_DATA_TYPE result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetColumnType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetColumnType. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxbar::GDACFILES_BAR_DATA_TYPE)((affxbar::CGDACSequenceResultItem const *)arg1)->GetColumnType(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetData) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int arg2 ;
        int arg3 ;
        affxbar::BarSequenceResultData *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetData(self,iData,iCol,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetData. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 4 of CGDACSequenceResultItem_GetData. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        (arg1)->GetData(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetNumberParameters) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetNumberParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetNumberParameters. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        result = (int)((affxbar::CGDACSequenceResultItem const *)arg1)->GetNumberParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_GetParameter) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int arg2 ;
        TagValuePairType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_GetParameter(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_GetParameter. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
            result = (TagValuePairType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__TagValuePairType, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_SetName) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_SetName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_SetName. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_SetVersion) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_SetVersion(self,ver);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_SetVersion. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetVersion((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_SetGroupName) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_SetGroupName(self,group);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_SetGroupName. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetGroupName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_SetNumberDataPoints) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_SetNumberDataPoints(self,n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_SetNumberDataPoints. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetNumberDataPoints(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_SetDataPoint) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        int arg2 ;
        int arg3 ;
        affxbar::BarSequenceResultData *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_SetDataPoint(self,nIndex,colIndex,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_SetDataPoint. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affxbar___BarSequenceResultData,0) < 0) {
                SWIG_croak("Type error in argument 4 of CGDACSequenceResultItem_SetDataPoint. Expected _p_affxbar___BarSequenceResultData");
            }
        }
        (arg1)->SetDataPoint(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceResultItem_AddParameter) {
    {
        affxbar::CGDACSequenceResultItem *arg1 = (affxbar::CGDACSequenceResultItem *) 0 ;
        std::string arg2 ;
        std::string arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CGDACSequenceResultItem_AddParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceResultItem_AddParameter. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of CGDACSequenceResultItem_AddParameter.");
            } else {
                arg2 = std::string(ptr, len);
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(2), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 3 of CGDACSequenceResultItem_AddParameter.");
            } else {
                arg3 = std::string(ptr, len);
            }
        }
        (arg1)->AddParameter(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CBARFileData) {
    {
        affxbar::CBARFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CBARFileData();");
        }
        result = (affxbar::CBARFileData *)new affxbar::CBARFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbar__CBARFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CBARFileData) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CBARFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CBARFileData. Expected _p_affxbar__CBARFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_SetFileName) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_SetFileName. Expected _p_affxbar__CBARFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetFileName) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetFileName. Expected _p_affxbar__CBARFileData");
            }
        }
        result = ((affxbar::CBARFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_Read) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_Read. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_ReadHeader) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_ReadHeader. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_Exists) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_Exists. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_Close) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_Close. Expected _p_affxbar__CBARFileData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetError) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetError. Expected _p_affxbar__CBARFileData");
            }
        }
        result = ((affxbar::CBARFileData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetVersion) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetVersion. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (float)((affxbar::CBARFileData const *)arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetNumberSequences) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetNumberSequences(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetNumberSequences. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberSequences();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetNumberColumns) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetNumberColumns(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetNumberColumns. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberColumns();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetNumberParameters) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBARFileData_GetNumberParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetNumberParameters. Expected _p_affxbar__CBARFileData");
            }
        }
        result = (int)((affxbar::CBARFileData const *)arg1)->GetNumberParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetParameter) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int arg2 ;
        TagValuePairType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_GetParameter(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetParameter. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            TagValuePairType &_result_ref = (arg1)->GetParameter(arg2);
            result = (TagValuePairType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p__TagValuePairType, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetColumnTypes) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int arg2 ;
        affxbar::GDACFILES_BAR_DATA_TYPE *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_GetColumnTypes(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetColumnTypes. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            affxbar::GDACFILES_BAR_DATA_TYPE &_result_ref = (arg1)->GetColumnTypes(arg2);
            result = (affxbar::GDACFILES_BAR_DATA_TYPE *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbar___GDACFILES_BAR_DATA_TYPE, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetResults) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int arg2 ;
        affxbar::CGDACSequenceResultItem *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CBARFileData_GetResults(self,index,seq);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetResults. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxbar__CGDACSequenceResultItem,0) < 0) {
                SWIG_croak("Type error in argument 3 of CBARFileData_GetResults. Expected _p_affxbar__CGDACSequenceResultItem");
            }
        }
        (arg1)->GetResults(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_AddAlgorithmParameter) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CBARFileData_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_AddAlgorithmParameter. Expected _p_affxbar__CBARFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->AddAlgorithmParameter((char const *)arg2,(char const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_AddColumn) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        affxbar::GDACFILES_BAR_DATA_TYPE arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_AddColumn(self,ctype);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_AddColumn. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (affxbar::GDACFILES_BAR_DATA_TYPE) SvIV(ST(1));
        (arg1)->AddColumn(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_SetNumberSequences) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_SetNumberSequences(self,n);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_SetNumberSequences. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetNumberSequences(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBARFileData_GetResultsPtr) {
    {
        affxbar::CBARFileData *arg1 = (affxbar::CBARFileData *) 0 ;
        int arg2 ;
        affxbar::CGDACSequenceResultItem *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBARFileData_GetResultsPtr(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbar__CBARFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBARFileData_GetResultsPtr. Expected _p_affxbar__CBARFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxbar::CGDACSequenceResultItem *)(arg1)->GetResultsPtr(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbar__CGDACSequenceResultItem, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMX_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMX_set(self,PMX);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMX_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->PMX = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMX_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMX_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMX_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned int) ((arg1)->PMX);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMY_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMY_set(self,PMY);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMY_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->PMY = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMY_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMY_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMY_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned int) ((arg1)->PMY);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MMX_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MMX_set(self,MMX);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MMX_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->MMX = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MMX_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MMX_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MMX_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned int) ((arg1)->MMX);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MMY_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MMY_set(self,MMY);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MMY_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->MMY = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MMY_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MMY_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MMY_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned int) ((arg1)->MMY);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MatchScore_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MatchScore_set(self,MatchScore);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MatchScore_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->MatchScore = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_MatchScore_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_MatchScore_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_MatchScore_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (float) ((arg1)->MatchScore);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_Position_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_Position_set(self,Position);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_Position_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned int) SvUV(ST(1));
        if (arg1) (arg1)->Position = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_Position_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_Position_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_Position_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned int) ((arg1)->Position);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMProbe_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMProbe_set(self,PMProbe);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMProbe_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of GDACSequenceHitItemType_PMProbe_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->PMProbe = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PMProbe_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PMProbe_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PMProbe_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (std::string *)& ((arg1)->PMProbe);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_ProbeLength_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_ProbeLength_set(self,ProbeLength);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_ProbeLength_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->ProbeLength = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_ProbeLength_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_ProbeLength_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_ProbeLength_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned char) ((arg1)->ProbeLength);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_TopStrand_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned char arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_TopStrand_set(self,TopStrand);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_TopStrand_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = (unsigned char) SvUV(ST(1));
        if (arg1) (arg1)->TopStrand = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_TopStrand_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_TopStrand_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_TopStrand_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (unsigned char) ((arg1)->TopStrand);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType__GDACSequenceHitItemType_less_than) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        affxbpmap::_GDACSequenceHitItemType *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType__GDACSequenceHitItemType_less_than(self,rhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType__GDACSequenceHitItemType_less_than. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 2 of GDACSequenceHitItemType__GDACSequenceHitItemType_less_than. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (bool)((affxbpmap::GDACSequenceHitItemType const *)arg1)->operator <((affxbpmap::_GDACSequenceHitItemType const &)*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PackedPMProbe_set) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        char *arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PackedPMProbe_set(self,PackedPMProbe);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PackedPMProbe_set. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg2 = SvPV(ST(1),PL_na);
        
        {
            if (arg2) strncpy(arg1->PackedPMProbe,arg2,7+1);
            else arg1->PackedPMProbe[0] = 0;
        }
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GDACSequenceHitItemType_PackedPMProbe_get) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GDACSequenceHitItemType_PackedPMProbe_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of GDACSequenceHitItemType_PackedPMProbe_get. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        result = (char *)(char *) ((arg1)->PackedPMProbe);
        
        ST(argvi) = sv_newmortal();
        sv_setpv((SV*)ST(argvi++),(char *) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_GDACSequenceHitItemType) {
    {
        affxbpmap::GDACSequenceHitItemType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_GDACSequenceHitItemType();");
        }
        result = (affxbpmap::GDACSequenceHitItemType *)new affxbpmap::GDACSequenceHitItemType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_GDACSequenceHitItemType) {
    {
        affxbpmap::GDACSequenceHitItemType *arg1 = (affxbpmap::GDACSequenceHitItemType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_GDACSequenceHitItemType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_GDACSequenceHitItemType. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CGDACSequenceItem) {
    {
        affxbpmap::CGDACSequenceItem *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CGDACSequenceItem();");
        }
        result = (affxbpmap::CGDACSequenceItem *)new affxbpmap::CGDACSequenceItem();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbpmap__CGDACSequenceItem, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CGDACSequenceItem) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CGDACSequenceItem(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CGDACSequenceItem. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetName) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetName. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GroupName) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GroupName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GroupName. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GroupName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetSeqVersion) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetSeqVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetSeqVersion. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = ((affxbpmap::CGDACSequenceItem const *)arg1)->GetSeqVersion();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetProbeMapping) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetProbeMapping(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetProbeMapping. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetProbeMapping();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetNumber) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetNumber. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetNumberHits) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetNumberHits(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetNumberHits. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberHits();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetNumberParameters) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetNumberParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetNumberParameters. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        result = (int)((affxbpmap::CGDACSequenceItem const *)arg1)->GetNumberParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetParameter) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int arg2 ;
        TagValuePairType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetParameter(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetParameter. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetParameter(arg2);
        
        {
            TagValuePairType * resultobj = new TagValuePairType((TagValuePairType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p__TagValuePairType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetHitItem__SWIG_0) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int arg2 ;
        affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
        bool arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetHitItem(self,index,hit,readProbe);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetHitItem. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CGDACSequenceItem_GetHitItem. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        arg4 = (bool) SvIV(ST(3));
        (arg1)->GetHitItem(arg2,*arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetHitItem__SWIG_1) {
    {
        affxbpmap::CGDACSequenceItem *arg1 = (affxbpmap::CGDACSequenceItem *) 0 ;
        int arg2 ;
        affxbpmap::GDACSequenceHitItemType *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CGDACSequenceItem_GetHitItem(self,index,hit);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGDACSequenceItem_GetHitItem. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType,0) < 0) {
                SWIG_croak("Type error in argument 3 of CGDACSequenceItem_GetHitItem. Expected _p_affxbpmap___GDACSequenceHitItemType");
            }
        }
        (arg1)->GetHitItem(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGDACSequenceItem_GetHitItem) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxbpmap__CGDACSequenceItem, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CGDACSequenceItem_GetHitItem__SWIG_1); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affxbpmap__CGDACSequenceItem, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CGDACSequenceItem_GetHitItem__SWIG_0); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CGDACSequenceItem_GetHitItem'");
    XSRETURN(0);
}


XS(_wrap_new_CBPMAPFileData) {
    {
        affxbpmap::CBPMAPFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CBPMAPFileData();");
        }
        result = (affxbpmap::CBPMAPFileData *)new affxbpmap::CBPMAPFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxbpmap__CBPMAPFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CBPMAPFileData) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CBPMAPFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CBPMAPFileData. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_SetFileName) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CBPMAPFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_SetFileName. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_GetFileName) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_GetFileName. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_Read) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_Read. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_ReadHeader) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_ReadHeader. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_Exists) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_Exists. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_Close) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_Close. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_GetError) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_GetError. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = ((affxbpmap::CBPMAPFileData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_GetNumberSequences) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_GetNumberSequences(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_GetNumberSequences. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = (int)((affxbpmap::CBPMAPFileData const *)arg1)->GetNumberSequences();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_GetVersion) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CBPMAPFileData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_GetVersion. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        result = (float)((affxbpmap::CBPMAPFileData const *)arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CBPMAPFileData_GetSequenceItem) {
    {
        affxbpmap::CBPMAPFileData *arg1 = (affxbpmap::CBPMAPFileData *) 0 ;
        int arg2 ;
        affxbpmap::CGDACSequenceItem *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CBPMAPFileData_GetSequenceItem(self,index,seq);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxbpmap__CBPMAPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CBPMAPFileData_GetSequenceItem. Expected _p_affxbpmap__CBPMAPFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxbpmap__CGDACSequenceItem,0) < 0) {
                SWIG_croak("Type error in argument 3 of CBPMAPFileData_GetSequenceItem. Expected _p_affxbpmap__CGDACSequenceItem");
            }
        }
        (arg1)->GetSequenceItem(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CEXPFileData) {
    {
        affxexp::CEXPFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CEXPFileData();");
        }
        result = (affxexp::CEXPFileData *)new affxexp::CEXPFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxexp__CEXPFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CEXPFileData) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CEXPFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CEXPFileData. Expected _p_affxexp__CEXPFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_SetFileName) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CEXPFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_SetFileName. Expected _p_affxexp__CEXPFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_GetFileName) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_GetFileName. Expected _p_affxexp__CEXPFileData");
            }
        }
        result = ((affxexp::CEXPFileData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_GetArrayType) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_GetArrayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_GetArrayType. Expected _p_affxexp__CEXPFileData");
            }
        }
        result = ((affxexp::CEXPFileData const *)arg1)->GetArrayType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_SetArrayType) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CEXPFileData_SetArrayType(self,arrayType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_SetArrayType. Expected _p_affxexp__CEXPFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetArrayType((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_Read) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_Read. Expected _p_affxexp__CEXPFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_Exists) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_Exists. Expected _p_affxexp__CEXPFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_Clear) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_Clear. Expected _p_affxexp__CEXPFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_GetScanParameters) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        TagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_GetScanParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_GetScanParameters. Expected _p_affxexp__CEXPFileData");
            }
        }
        {
            TagValuePairTypeList &_result_ref = (arg1)->GetScanParameters();
            result = (TagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listT_TagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_GetHybParameters) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        TagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_GetHybParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_GetHybParameters. Expected _p_affxexp__CEXPFileData");
            }
        }
        {
            TagValuePairTypeList &_result_ref = (arg1)->GetHybParameters();
            result = (TagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listT_TagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CEXPFileData_GetSampleParameters) {
    {
        affxexp::CEXPFileData *arg1 = (affxexp::CEXPFileData *) 0 ;
        TagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CEXPFileData_GetSampleParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxexp__CEXPFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CEXPFileData_GetSampleParameters. Expected _p_affxexp__CEXPFileData");
            }
        }
        {
            TagValuePairTypeList &_result_ref = (arg1)->GetSampleParameters();
            result = (TagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listT_TagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CGRCFileData) {
    {
        affxgrc::CGRCFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CGRCFileData();");
        }
        result = (affxgrc::CGRCFileData *)new affxgrc::CGRCFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxgrc__CGRCFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CGRCFileData) {
    {
        affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CGRCFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxgrc__CGRCFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CGRCFileData. Expected _p_affxgrc__CGRCFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGRCFileData_SetFileName) {
    {
        affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGRCFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxgrc__CGRCFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGRCFileData_SetFileName. Expected _p_affxgrc__CGRCFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGRCFileData_GetFileName) {
    {
        affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGRCFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxgrc__CGRCFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGRCFileData_GetFileName. Expected _p_affxgrc__CGRCFileData");
            }
        }
        {
            std::string const &_result_ref = ((affxgrc::CGRCFileData const *)arg1)->GetFileName();
            result = (std::string *) &_result_ref;
        }
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>(result->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, result->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGRCFileData_Read) {
    {
        affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
        affymetrix_grid_control::GridControlData *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CGRCFileData_Read(self,grid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxgrc__CGRCFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGRCFileData_Read. Expected _p_affxgrc__CGRCFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_grid_control__GridControlData,0) < 0) {
                SWIG_croak("Type error in argument 2 of CGRCFileData_Read. Expected _p_affymetrix_grid_control__GridControlData");
            }
        }
        result = (bool)(arg1)->Read(*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CGRCFileData_Exists) {
    {
        affxgrc::CGRCFileData *arg1 = (affxgrc::CGRCFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CGRCFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxgrc__CGRCFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CGRCFileData_Exists. Expected _p_affxgrc__CGRCFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetIndiciesType_probeSetName_set) {
    {
        affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ProbeSetIndiciesType_probeSetName_set(self,probeSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetIndiciesType_probeSetName_set. Expected _p_affxmsk___ProbeSetIndiciesType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ProbeSetIndiciesType_probeSetName_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->probeSetName = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetIndiciesType_probeSetName_get) {
    {
        affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ProbeSetIndiciesType_probeSetName_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetIndiciesType_probeSetName_get. Expected _p_affxmsk___ProbeSetIndiciesType");
            }
        }
        result = (std::string *)& ((arg1)->probeSetName);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetIndiciesType_indicies_set) {
    {
        affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
        std::list<int > arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ProbeSetIndiciesType_indicies_set(self,indicies);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetIndiciesType_indicies_set. Expected _p_affxmsk___ProbeSetIndiciesType");
            }
        }
        {
            std::list<int > * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__listTint_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of ProbeSetIndiciesType_indicies_set. Expected _p_std__listTint_t");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->indicies = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetIndiciesType_indicies_get) {
    {
        affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
        std::list<int > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ProbeSetIndiciesType_indicies_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetIndiciesType_indicies_get. Expected _p_affxmsk___ProbeSetIndiciesType");
            }
        }
        result =  ((arg1)->indicies);
        
        {
            std::list<int > * resultobj = new std::list<int >((std::list<int > &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__listTint_t, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ProbeSetIndiciesType) {
    {
        affxmsk::ProbeSetIndiciesType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ProbeSetIndiciesType();");
        }
        result = (affxmsk::ProbeSetIndiciesType *)new affxmsk::ProbeSetIndiciesType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ProbeSetIndiciesType) {
    {
        affxmsk::ProbeSetIndiciesType *arg1 = (affxmsk::ProbeSetIndiciesType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ProbeSetIndiciesType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk___ProbeSetIndiciesType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ProbeSetIndiciesType. Expected _p_affxmsk___ProbeSetIndiciesType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CMSKFileData) {
    {
        affxmsk::CMSKFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CMSKFileData();");
        }
        result = (affxmsk::CMSKFileData *)new affxmsk::CMSKFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxmsk__CMSKFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CMSKFileData) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CMSKFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CMSKFileData. Expected _p_affxmsk__CMSKFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_SetFileName) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CMSKFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_SetFileName. Expected _p_affxmsk__CMSKFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetFileName) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetFileName. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetFileName();
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetArrayType) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_GetArrayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetArrayType. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (char *)((affxmsk::CMSKFileData const *)arg1)->GetArrayType();
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetProbeSetIndiciesListCount) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_GetProbeSetIndiciesListCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetProbeSetIndiciesListCount. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetIndiciesListCount();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetProbeSetListCount) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_GetProbeSetListCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetProbeSetListCount. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (int)((affxmsk::CMSKFileData const *)arg1)->GetProbeSetListCount();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetError) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetError. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = ((affxmsk::CMSKFileData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetProbeSetIndiciesIterators) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        affxmsk::ProbeSetIndiciesListConstIt *arg2 = 0 ;
        affxmsk::ProbeSetIndiciesListConstIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CMSKFileData_GetProbeSetIndiciesIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetProbeSetIndiciesIterators. Expected _p_affxmsk__CMSKFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxmsk__ProbeSetIndiciesList__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of CMSKFileData_GetProbeSetIndiciesIterators. Expected _p_affxmsk__ProbeSetIndiciesList__const_iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxmsk__ProbeSetIndiciesList__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of CMSKFileData_GetProbeSetIndiciesIterators. Expected _p_affxmsk__ProbeSetIndiciesList__const_iterator");
            }
        }
        (arg1)->GetProbeSetIndiciesIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_GetProbeSetIterators) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        affxmsk::ProbeSetListConstIt *arg2 = 0 ;
        affxmsk::ProbeSetListConstIt *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CMSKFileData_GetProbeSetIterators(self,begin,end);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_GetProbeSetIterators. Expected _p_affxmsk__CMSKFileData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxmsk__ProbeSetList__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 2 of CMSKFileData_GetProbeSetIterators. Expected _p_affxmsk__ProbeSetList__const_iterator");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affxmsk__ProbeSetList__const_iterator,0) < 0) {
                SWIG_croak("Type error in argument 3 of CMSKFileData_GetProbeSetIterators. Expected _p_affxmsk__ProbeSetList__const_iterator");
            }
        }
        (arg1)->GetProbeSetIterators(*arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_Read) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_Read. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_Exists) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_Exists. Expected _p_affxmsk__CMSKFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CMSKFileData_Clear) {
    {
        affxmsk::CMSKFileData *arg1 = (affxmsk::CMSKFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CMSKFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxmsk__CMSKFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CMSKFileData_Clear. Expected _p_affxmsk__CMSKFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetInfo_probeSetName_set) {
    {
        affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ProbeSetInfo_probeSetName_set(self,probeSetName);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi___ProbeSetInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetInfo_probeSetName_set. Expected _p_affxpsi___ProbeSetInfo");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of ProbeSetInfo_probeSetName_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->probeSetName = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetInfo_probeSetName_get) {
    {
        affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ProbeSetInfo_probeSetName_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi___ProbeSetInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetInfo_probeSetName_get. Expected _p_affxpsi___ProbeSetInfo");
            }
        }
        result = (std::string *)& ((arg1)->probeSetName);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetInfo_numberPairs_set) {
    {
        affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ProbeSetInfo_numberPairs_set(self,numberPairs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi___ProbeSetInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetInfo_numberPairs_set. Expected _p_affxpsi___ProbeSetInfo");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (arg1) (arg1)->numberPairs = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ProbeSetInfo_numberPairs_get) {
    {
        affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ProbeSetInfo_numberPairs_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi___ProbeSetInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of ProbeSetInfo_numberPairs_get. Expected _p_affxpsi___ProbeSetInfo");
            }
        }
        result = (int) ((arg1)->numberPairs);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_ProbeSetInfo) {
    {
        affxpsi::ProbeSetInfo *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_ProbeSetInfo();");
        }
        result = (affxpsi::ProbeSetInfo *)new affxpsi::ProbeSetInfo();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxpsi___ProbeSetInfo, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_ProbeSetInfo) {
    {
        affxpsi::ProbeSetInfo *arg1 = (affxpsi::ProbeSetInfo *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_ProbeSetInfo(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi___ProbeSetInfo,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_ProbeSetInfo. Expected _p_affxpsi___ProbeSetInfo");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CPSIFileData) {
    {
        affxpsi::CPSIFileData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CPSIFileData();");
        }
        result = (affxpsi::CPSIFileData *)new affxpsi::CPSIFileData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affxpsi__CPSIFileData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CPSIFileData) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CPSIFileData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CPSIFileData. Expected _p_affxpsi__CPSIFileData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_SetFileName) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CPSIFileData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_SetFileName. Expected _p_affxpsi__CPSIFileData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_GetFileName) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CPSIFileData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_GetFileName. Expected _p_affxpsi__CPSIFileData");
            }
        }
        result = (char *)((affxpsi::CPSIFileData const *)arg1)->GetFileName();
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_GetProbeSetCount) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CPSIFileData_GetProbeSetCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_GetProbeSetCount. Expected _p_affxpsi__CPSIFileData");
            }
        }
        result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbeSetCount();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_GetProbeSetName) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CPSIFileData_GetProbeSetName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_GetProbeSetName. Expected _p_affxpsi__CPSIFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = ((affxpsi::CPSIFileData const *)arg1)->GetProbeSetName(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_GetProbePairs) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CPSIFileData_GetProbePairs(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_GetProbePairs. Expected _p_affxpsi__CPSIFileData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)((affxpsi::CPSIFileData const *)arg1)->GetProbePairs(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_Read) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CPSIFileData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_Read. Expected _p_affxpsi__CPSIFileData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_Exists) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CPSIFileData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_Exists. Expected _p_affxpsi__CPSIFileData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CPSIFileData_Clear) {
    {
        affxpsi::CPSIFileData *arg1 = (affxpsi::CPSIFileData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CPSIFileData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affxpsi__CPSIFileData,0) < 0) {
                SWIG_croak("Type error in argument 1 of CPSIFileData_Clear. Expected _p_affxpsi__CPSIFileData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_name_set) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeNameValueType_name_set(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_name_set. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of AttributeNameValueType_name_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->name = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_name_get) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AttributeNameValueType_name_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_name_get. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        result = (std::string *)& ((arg1)->name);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_value_set) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeNameValueType_value_set(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_value_set. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of AttributeNameValueType_value_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->value = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_value_get) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AttributeNameValueType_value_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_value_get. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        result = (std::string *)& ((arg1)->value);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_type_set) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *arg2 = (std::string *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: AttributeNameValueType_type_set(self,type);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_type_set. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__string,0) < 0) {
                SWIG_croak("Type error in argument 2 of AttributeNameValueType_type_set. Expected _p_std__string");
            }
        }
        if (arg1) (arg1)->type = *arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_AttributeNameValueType_type_get) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: AttributeNameValueType_type_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of AttributeNameValueType_type_get. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        result = (std::string *)& ((arg1)->type);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_AttributeNameValueType) {
    {
        affymetrix_dttarray::AttributeNameValueType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_AttributeNameValueType();");
        }
        result = (affymetrix_dttarray::AttributeNameValueType *)new affymetrix_dttarray::AttributeNameValueType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_AttributeNameValueType) {
    {
        affymetrix_dttarray::AttributeNameValueType *arg1 = (affymetrix_dttarray::AttributeNameValueType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_AttributeNameValueType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_AttributeNameValueType. Expected _p_affymetrix_dttarray___AttributeNameValueType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DttArrayData) {
    {
        affymetrix_dttarray::DttArrayData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DttArrayData();");
        }
        result = (affymetrix_dttarray::DttArrayData *)new affymetrix_dttarray::DttArrayData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_dttarray__DttArrayData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DttArrayData) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DttArrayData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DttArrayData. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_GetArrayType) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayData_GetArrayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_GetArrayType. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetArrayType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_SetArrayType) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DttArrayData_SetArrayType(self,aType);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_SetArrayType. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of DttArrayData_SetArrayType.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetArrayType((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_GetExperimentName) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayData_GetExperimentName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_GetExperimentName. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        result = ((affymetrix_dttarray::DttArrayData const *)arg1)->GetExperimentName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_SetExperimentName) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DttArrayData_SetExperimentName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_SetExperimentName. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of DttArrayData_SetExperimentName.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetExperimentName((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_Attributes) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        affymetrix_dttarray::AttributeNameValueTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayData_Attributes(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_Attributes. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        {
            affymetrix_dttarray::AttributeNameValueTypeList &_result_ref = (arg1)->Attributes();
            result = (affymetrix_dttarray::AttributeNameValueTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTaffymetrix_dttarray___AttributeNameValueType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayData_Clear) {
    {
        affymetrix_dttarray::DttArrayData *arg1 = (affymetrix_dttarray::DttArrayData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayData_Clear. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_DttArrayFileReader) {
    {
        affymetrix_dttarray::DttArrayFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_DttArrayFileReader();");
        }
        result = (affymetrix_dttarray::DttArrayFileReader *)new affymetrix_dttarray::DttArrayFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_DttArrayFileReader) {
    {
        affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_DttArrayFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_DttArrayFileReader. Expected _p_affymetrix_dttarray__DttArrayFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayFileReader_GetFileName) {
    {
        affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayFileReader_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayFileReader_GetFileName. Expected _p_affymetrix_dttarray__DttArrayFileReader");
            }
        }
        result = ((affymetrix_dttarray::DttArrayFileReader const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayFileReader_SetFileName) {
    {
        affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DttArrayFileReader_SetFileName(self,file);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayFileReader_SetFileName. Expected _p_affymetrix_dttarray__DttArrayFileReader");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayFileReader_Read) {
    {
        affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
        affymetrix_dttarray::DttArrayData *arg2 = 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DttArrayFileReader_Read(self,arrayData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayFileReader_Read. Expected _p_affymetrix_dttarray__DttArrayFileReader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_dttarray__DttArrayData,0) < 0) {
                SWIG_croak("Type error in argument 2 of DttArrayFileReader_Read. Expected _p_affymetrix_dttarray__DttArrayData");
            }
        }
        result = (bool)(arg1)->Read(*arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_DttArrayFileReader_Exists) {
    {
        affymetrix_dttarray::DttArrayFileReader *arg1 = (affymetrix_dttarray::DttArrayFileReader *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DttArrayFileReader_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of DttArrayFileReader_Exists. Expected _p_affymetrix_dttarray__DttArrayFileReader");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_Tag_set) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionTagValuePairType_Tag_set(self,Tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_Tag_set. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionTagValuePairType_Tag_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Tag = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_Tag_get) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionTagValuePairType_Tag_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_Tag_get. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        result =  ((arg1)->Tag);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_Value_set) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        std::wstring arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionTagValuePairType_Value_set(self,Value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_Value_set. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            std::wstring * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_std__wstring,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionTagValuePairType_Value_set. Expected _p_std__wstring");
            }
            arg2 = *argp;
        }
        if (arg1) (arg1)->Value = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_Value_get) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionTagValuePairType_Value_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_Value_get. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        result =  ((arg1)->Value);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_FusionTagValuePairType_assign) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairType arg2 ;
        affymetrix_fusion_io::FusionTagValuePairType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionTagValuePairType_FusionTagValuePairType_assign(self,vp);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_FusionTagValuePairType_assign. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            affymetrix_fusion_io::FusionTagValuePairType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionTagValuePairType_FusionTagValuePairType_assign. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
            arg2 = *argp;
        }
        result = (arg1)->operator =(arg2);
        
        {
            affymetrix_fusion_io::FusionTagValuePairType * resultobj = new affymetrix_fusion_io::FusionTagValuePairType((affymetrix_fusion_io::FusionTagValuePairType &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_FusionTagValuePairType_equals_obj) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairType arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionTagValuePairType_FusionTagValuePairType_equals_obj(self,vp);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_FusionTagValuePairType_equals_obj. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            affymetrix_fusion_io::FusionTagValuePairType * argp;
            if (SWIG_ConvertPtr(ST(1),(void **) &argp, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionTagValuePairType_FusionTagValuePairType_equals_obj. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
            arg2 = *argp;
        }
        result = (bool)(arg1)->operator ==(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_FusionTagValuePairType_equals_tag) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionTagValuePairType_FusionTagValuePairType_equals_tag(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_FusionTagValuePairType_equals_tag. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionTagValuePairType_FusionTagValuePairType_equals_tag. Expected _p_wchar_t");
            }
        }
        result = (bool)(arg1)->operator ==((wchar_t const *)arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionTagValuePairType_DetailedType) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        affymetrix_calvin_parameter::ParameterNameValueType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionTagValuePairType_DetailedType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionTagValuePairType_DetailedType. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        {
            affymetrix_calvin_parameter::ParameterNameValueType &_result_ref = (arg1)->DetailedType();
            result = (affymetrix_calvin_parameter::ParameterNameValueType *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionTagValuePairType) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionTagValuePairType();");
        }
        result = (affymetrix_fusion_io::FusionTagValuePairType *)new affymetrix_fusion_io::FusionTagValuePairType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionTagValuePairType) {
    {
        affymetrix_fusion_io::FusionTagValuePairType *arg1 = (affymetrix_fusion_io::FusionTagValuePairType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionTagValuePairType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionTagValuePairType. Expected _p_affymetrix_fusion_io__FusionTagValuePairType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionArrayFileReader) {
    {
        affymetrix_fusion_io::FusionArrayFileReader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionArrayFileReader();");
        }
        result = (affymetrix_fusion_io::FusionArrayFileReader *)new affymetrix_fusion_io::FusionArrayFileReader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionArrayFileReader) {
    {
        affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionArrayFileReader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionArrayFileReader. Expected _p_affymetrix_fusion_io__FusionArrayFileReader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionArrayFileReader_Read) {
    {
        affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
        std::string *arg2 = 0 ;
        affymetrix_calvin_array::ArrayData *arg3 = 0 ;
        bool result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionArrayFileReader_Read(self,fileName,arrayData);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionArrayFileReader_Read. Expected _p_affymetrix_fusion_io__FusionArrayFileReader");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of FusionArrayFileReader_Read.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_calvin_array__ArrayData,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionArrayFileReader_Read. Expected _p_affymetrix_calvin_array__ArrayData");
            }
        }
        result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionArrayFileReader_DataTypeIdentifier) {
    {
        affymetrix_fusion_io::FusionArrayFileReader *arg1 = (affymetrix_fusion_io::FusionArrayFileReader *) 0 ;
        affymetrix_calvin_utilities::AffymetrixGuidType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionArrayFileReader_DataTypeIdentifier(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionArrayFileReader_DataTypeIdentifier. Expected _p_affymetrix_fusion_io__FusionArrayFileReader");
            }
        }
        {
            affymetrix_calvin_utilities::AffymetrixGuidType const &_result_ref = ((affymetrix_fusion_io::FusionArrayFileReader const *)arg1)->DataTypeIdentifier();
            result = (affymetrix_calvin_utilities::AffymetrixGuidType *) &_result_ref;
        }
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>(result->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, result->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionProbeSetResults) {
    {
        affymetrix_fusion_io::FusionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionProbeSetResults();");
        }
        result = (affymetrix_fusion_io::FusionProbeSetResults *)new affymetrix_fusion_io::FusionProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionProbeSetResults) {
    {
        affymetrix_fusion_io::FusionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionProbeSetResults. Expected _p_affymetrix_fusion_io__FusionProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_Clear) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_Clear. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetDetectionPValue) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetDetectionPValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetDetectionPValue. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetectionPValue();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetSignal) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetSignal(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetSignal. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignal();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetNumPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetNumPairs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetNumPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumPairs();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetNumUsedPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetNumUsedPairs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetNumUsedPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumUsedPairs();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetDetection) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetDetection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetDetection. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetDetection();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_HasCompResults) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_HasCompResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_HasCompResults. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (bool)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->HasCompResults();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetChangePValue) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetChangePValue(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetChangePValue. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChangePValue();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetSignalLogRatio) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetSignalLogRatio(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetSignalLogRatio. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatio();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetSignalLogRatioLow) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetSignalLogRatioLow(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetSignalLogRatioLow. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioLow();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetSignalLogRatioHigh) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetSignalLogRatioHigh(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetSignalLogRatioHigh. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetSignalLogRatioHigh();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetNumCommonPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetNumCommonPairs(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetNumCommonPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (u_int16_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetNumCommonPairs();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetChange) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetChange(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetChange. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (u_int8_t)((affymetrix_fusion_io::FusionExpressionProbeSetResults const *)arg1)->GetChange();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetDetectionPValue) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetDetectionPValue(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetDetectionPValue. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetDetectionPValue(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetSignal) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetSignal(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetSignal. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSignal(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetNumPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetNumPairs(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetNumPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetNumPairs(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetNumUsedPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetNumUsedPairs(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetNumUsedPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetNumUsedPairs(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetDetection) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetDetection(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetDetection. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetDetection(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetHasCompResults) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        bool arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetHasCompResults(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetHasCompResults. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        (arg1)->SetHasCompResults(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetChangePValue) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetChangePValue(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetChangePValue. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetChangePValue(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetSignalLogRatio) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetSignalLogRatio(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetSignalLogRatio. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSignalLogRatio(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetSignalLogRatioLow) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetSignalLogRatioLow(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetSignalLogRatioLow. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSignalLogRatioLow(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetSignalLogRatioHigh) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetSignalLogRatioHigh(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetSignalLogRatioHigh. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetSignalLogRatioHigh(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetNumCommonPairs) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int16_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetNumCommonPairs(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetNumCommonPairs. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (u_int16_t) SvUV(ST(1));
        (arg1)->SetNumCommonPairs(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_SetChange) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_SetChange(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_SetChange. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetChange(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetDetectionString) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetDetectionString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetDetectionString. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (arg1)->GetDetectionString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_GetChangeString) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_GetChangeString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_GetChangeString. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (arg1)->GetChangeString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg2 = 0 ;
        affymetrix_fusion_io::FusionExpressionProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affymetrix_fusion_io::FusionExpressionProbeSetResults * resultobj = new affymetrix_fusion_io::FusionExpressionProbeSetResults((affymetrix_fusion_io::FusionExpressionProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionExpressionProbeSetResults) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionExpressionProbeSetResults();");
        }
        result = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)new affymetrix_fusion_io::FusionExpressionProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionExpressionProbeSetResults) {
    {
        affymetrix_fusion_io::FusionExpressionProbeSetResults *arg1 = (affymetrix_fusion_io::FusionExpressionProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionExpressionProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionExpressionProbeSetResults. Expected _p_affymetrix_fusion_io__FusionExpressionProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_Clear) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_Clear. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetAlleleCall) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        u_int8_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetAlleleCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetAlleleCall. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (u_int8_t)(arg1)->GetAlleleCall();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetConfidence) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetConfidence(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetConfidence. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetConfidence();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetRAS1) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetRAS1(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetRAS1. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetRAS1();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetRAS2) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetRAS2(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetRAS2. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetRAS2();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetPValueAA) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetPValueAA(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetPValueAA. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetPValueAA();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetPValueAB) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetPValueAB(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetPValueAB. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetPValueAB();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetPValueBB) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetPValueBB(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetPValueBB. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetPValueBB();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetPValueNoCall) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetPValueNoCall(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetPValueNoCall. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (float)(arg1)->GetPValueNoCall();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetAlleleCall) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        u_int8_t arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetAlleleCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetAlleleCall. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (u_int8_t) SvUV(ST(1));
        (arg1)->SetAlleleCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetConfidence) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetConfidence(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetConfidence. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetConfidence(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetRAS1) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetRAS1(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetRAS1. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetRAS1(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetRAS2) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetRAS2(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetRAS2. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetRAS2(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetPValueAA) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetPValueAA(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetPValueAA. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetPValueAA(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetPValueAB) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetPValueAB(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetPValueAB. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetPValueAB(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetPValueBB) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetPValueBB(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetPValueBB. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetPValueBB(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_SetPValueNoCall) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_SetPValueNoCall(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_SetPValueNoCall. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetPValueNoCall(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_GetAlleleCallString) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_GetAlleleCallString(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_GetAlleleCallString. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (arg1)->GetAlleleCallString();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg2 = 0 ;
        affymetrix_fusion_io::FusionGenotypeProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affymetrix_fusion_io::FusionGenotypeProbeSetResults * resultobj = new affymetrix_fusion_io::FusionGenotypeProbeSetResults((affymetrix_fusion_io::FusionGenotypeProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionGenotypeProbeSetResults) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionGenotypeProbeSetResults();");
        }
        result = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)new affymetrix_fusion_io::FusionGenotypeProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionGenotypeProbeSetResults) {
    {
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *arg1 = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionGenotypeProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionGenotypeProbeSetResults. Expected _p_affymetrix_fusion_io__FusionGenotypeProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionUniversalProbeSetResults_GetBackground) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionUniversalProbeSetResults_GetBackground(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionUniversalProbeSetResults_GetBackground. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        result = (float)((affymetrix_fusion_io::FusionUniversalProbeSetResults const *)arg1)->GetBackground();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionUniversalProbeSetResults_SetBackground) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionUniversalProbeSetResults_SetBackground(self,bg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionUniversalProbeSetResults_SetBackground. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        (arg1)->SetBackground(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionUniversalProbeSetResults_Clear) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionUniversalProbeSetResults_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionUniversalProbeSetResults_Clear. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg2 = 0 ;
        affymetrix_fusion_io::FusionUniversalProbeSetResults result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign(self,src);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        result = (arg1)->operator =(*arg2);
        
        {
            affymetrix_fusion_io::FusionUniversalProbeSetResults * resultobj = new affymetrix_fusion_io::FusionUniversalProbeSetResults((affymetrix_fusion_io::FusionUniversalProbeSetResults &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionUniversalProbeSetResults) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionUniversalProbeSetResults();");
        }
        result = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)new affymetrix_fusion_io::FusionUniversalProbeSetResults();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionUniversalProbeSetResults) {
    {
        affymetrix_fusion_io::FusionUniversalProbeSetResults *arg1 = (affymetrix_fusion_io::FusionUniversalProbeSetResults *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionUniversalProbeSetResults(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionUniversalProbeSetResults. Expected _p_affymetrix_fusion_io__FusionUniversalProbeSetResults");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFFileHeader_GetCols) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFFileHeader_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFFileHeader_GetCols. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFFileHeader_GetRows) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFFileHeader_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFFileHeader_GetRows. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFFileHeader_GetNumProbeSets) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFFileHeader_GetNumProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFFileHeader_GetNumProbeSets. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFFileHeader_GetNumQCProbeSets) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFFileHeader_GetNumQCProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFFileHeader_GetNumQCProbeSets. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFFileHeader const *)arg1)->GetNumQCProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFFileHeader_GetReference) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        std::string *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFFileHeader_GetReference(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFFileHeader_GetReference. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        {
            std::string &_result_ref = (arg1)->GetReference();
            result = (std::string *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__string, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFFileHeader) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFFileHeader();");
        }
        result = (affymetrix_fusion_io::FusionCDFFileHeader *)new affymetrix_fusion_io::FusionCDFFileHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFFileHeader) {
    {
        affymetrix_fusion_io::FusionCDFFileHeader *arg1 = (affymetrix_fusion_io::FusionCDFFileHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFFileHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFFileHeader. Expected _p_affymetrix_fusion_io__FusionCDFFileHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetListIndex) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetListIndex(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetListIndex. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetListIndex();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetExpos) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetExpos(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetExpos. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetExpos();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetX) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetX. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetY) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetY. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetPBase) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetPBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetPBase. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetPBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeInformation_GetTBase) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeInformation_GetTBase(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeInformation_GetTBase. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        result = (char)((affymetrix_fusion_io::FusionCDFProbeInformation const *)arg1)->GetTBase();
        
        ST(argvi) = sv_newmortal();
        sv_setpvn((SV*)ST(argvi++), &result, 1);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFProbeInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFProbeInformation();");
        }
        result = (affymetrix_fusion_io::FusionCDFProbeInformation *)new affymetrix_fusion_io::FusionCDFProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFProbeInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFProbeInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetDirection) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        affxcdf::DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetDirection. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetNumLists) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetNumLists. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetNumCells) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetNumCells. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetNumCellsPerList) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetNumCellsPerList. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetStart) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetStart(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetStart. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStart();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetStop) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetStop(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetStop. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeGroupInformation const *)arg1)->GetStop();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetName) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetName. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        result = (arg1)->GetName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeGroupInformation_GetCell) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCDFProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFProbeGroupInformation_GetCell(self,cell_index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeGroupInformation_GetCell. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFProbeGroupInformation_GetCell. Expected _p_affymetrix_fusion_io__FusionCDFProbeInformation");
            }
        }
        (arg1)->GetCell(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFProbeGroupInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFProbeGroupInformation();");
        }
        result = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *)new affymetrix_fusion_io::FusionCDFProbeGroupInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFProbeGroupInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeGroupInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFProbeGroupInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFProbeGroupInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetProbeSetType) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        affxcdf::GeneChipProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetProbeSetType. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetDirection) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        affxcdf::DirectionType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetDirection(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetDirection. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (affxcdf::DirectionType)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetDirection();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetNumLists) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetNumLists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetNumLists. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumLists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetNumGroups) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetNumGroups(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetNumGroups. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumGroups();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetNumCells) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetNumCells. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetNumCellsPerList) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetNumCellsPerList(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetNumCellsPerList. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetNumCellsPerList();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetProbeSetNumber) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetProbeSetNumber(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetProbeSetNumber. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFProbeSetInformation const *)arg1)->GetProbeSetNumber();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFProbeSetInformation_GetGroupInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCDFProbeGroupInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFProbeSetInformation_GetGroupInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFProbeSetInformation_GetGroupInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFProbeSetInformation_GetGroupInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeGroupInformation");
            }
        }
        (arg1)->GetGroupInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFProbeSetInformation();");
        }
        result = (affymetrix_fusion_io::FusionCDFProbeSetInformation *)new affymetrix_fusion_io::FusionCDFProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFQCProbeInformation) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFQCProbeInformation();");
        }
        result = (affymetrix_fusion_io::FusionCDFQCProbeInformation *)new affymetrix_fusion_io::FusionCDFQCProbeInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFQCProbeInformation) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFQCProbeInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFQCProbeInformation. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeInformation_GetX) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeInformation_GetX(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeInformation_GetX. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetX();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeInformation_GetY) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeInformation_GetY(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeInformation_GetY. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetY();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeInformation_GetPLen) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeInformation_GetPLen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeInformation_GetPLen. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->GetPLen();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeInformation_IsPerfectMatchProbe) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeInformation_IsPerfectMatchProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeInformation_IsPerfectMatchProbe. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsPerfectMatchProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeInformation_IsBackgroundProbe) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeInformation *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeInformation_IsBackgroundProbe(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeInformation_IsBackgroundProbe. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        result = (bool)((affymetrix_fusion_io::FusionCDFQCProbeInformation const *)arg1)->IsBackgroundProbe();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeSetInformation_GetQCProbeSetType) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
        affxcdf::GeneChipQCProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeSetInformation_GetQCProbeSetType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeSetInformation_GetQCProbeSetType. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        result = (affxcdf::GeneChipQCProbeSetType)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetQCProbeSetType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeSetInformation_GetNumCells) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeSetInformation_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeSetInformation_GetNumCells. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCDFQCProbeSetInformation const *)arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeSetInformation_GetProbeInformation) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCDFQCProbeInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFQCProbeSetInformation_GetProbeInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFQCProbeSetInformation_GetProbeInformation. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFQCProbeSetInformation_GetProbeInformation. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeInformation");
            }
        }
        (arg1)->GetProbeInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFQCProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFQCProbeSetInformation();");
        }
        result = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *)new affymetrix_fusion_io::FusionCDFQCProbeSetInformation();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFQCProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetInformation *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFQCProbeSetInformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFQCProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFData) {
    {
        affymetrix_fusion_io::FusionCDFData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFData();");
        }
        result = (affymetrix_fusion_io::FusionCDFData *)new affymetrix_fusion_io::FusionCDFData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFData) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFData. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_SetFileName) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCDFData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_SetFileName. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetFileName) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetFileName. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetHeader) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        affymetrix_fusion_io::FusionCDFFileHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetHeader. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        {
            affymetrix_fusion_io::FusionCDFFileHeader &_result_ref = (arg1)->GetHeader();
            result = (affymetrix_fusion_io::FusionCDFFileHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetError) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetError. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetError();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetProbeSetName) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCDFData_GetProbeSetName(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetProbeSetName. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetName(arg2);
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetChipType) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetChipType. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = ((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetChipType();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_Read) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_Read. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_ReadHeader) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_ReadHeader. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_Exists) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_Exists. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_Close) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_Close. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_IsXDACompatibleFile) {
    {
        char *arg1 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_IsXDACompatibleFile(fileName);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (bool)affymetrix_fusion_io::FusionCDFData::IsXDACompatibleFile((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_IsCalvinCompatibleFile) {
    {
        char *arg1 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFData_IsCalvinCompatibleFile(fileName);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (bool)affymetrix_fusion_io::FusionCDFData::IsCalvinCompatibleFile((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetProbeSetType) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int arg2 ;
        affxcdf::GeneChipProbeSetType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCDFData_GetProbeSetType(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetProbeSetType. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affxcdf::GeneChipProbeSetType)((affymetrix_fusion_io::FusionCDFData const *)arg1)->GetProbeSetType(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCDFProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFData_GetProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFData_GetProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFProbeSetInformation");
            }
        }
        (arg1)->GetProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_GetQCProbeSetInformation) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFData_GetQCProbeSetInformation(self,index,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_GetQCProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFData_GetQCProbeSetInformation. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFData_FusionGetQCProbeSetInformation_By_Type) {
    {
        affymetrix_fusion_io::FusionCDFData *arg1 = (affymetrix_fusion_io::FusionCDFData *) 0 ;
        affxcdf::GeneChipQCProbeSetType arg2 ;
        affymetrix_fusion_io::FusionCDFQCProbeSetInformation *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCDFData_FusionGetQCProbeSetInformation_By_Type(self,qcType,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCDFData_FusionGetQCProbeSetInformation_By_Type. Expected _p_affymetrix_fusion_io__FusionCDFData");
            }
        }
        arg2 = (affxcdf::GeneChipQCProbeSetType) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCDFData_FusionGetQCProbeSetInformation_By_Type. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation");
            }
        }
        (arg1)->GetQCProbeSetInformation(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCDFQCProbeSetNames_GetStaticCDFQCProbeSetName) {
    {
        affxcdf::GeneChipQCProbeSetType arg1 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCDFQCProbeSetNames_GetStaticCDFQCProbeSetName(qcType);");
        }
        arg1 = (affxcdf::GeneChipQCProbeSetType) SvIV(ST(0));
        result = affymetrix_fusion_io::FusionCDFQCProbeSetNames::GetStaticCDFQCProbeSetName(arg1);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCDFQCProbeSetNames) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetNames *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCDFQCProbeSetNames();");
        }
        result = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *)new affymetrix_fusion_io::FusionCDFQCProbeSetNames();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetNames, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCDFQCProbeSetNames) {
    {
        affymetrix_fusion_io::FusionCDFQCProbeSetNames *arg1 = (affymetrix_fusion_io::FusionCDFQCProbeSetNames *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCDFQCProbeSetNames(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetNames,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCDFQCProbeSetNames. Expected _p_affymetrix_fusion_io__FusionCDFQCProbeSetNames");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCELData) {
    {
        affymetrix_fusion_io::FusionCELData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCELData();");
        }
        result = (affymetrix_fusion_io::FusionCELData *)new affymetrix_fusion_io::FusionCELData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCELData) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCELData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCELData. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetFileName) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_SetFileName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetFileName. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetFileName) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetFileName. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = ((affymetrix_fusion_io::FusionCELData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetError) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_SetError(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetError. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_SetError. Expected _p_wchar_t");
            }
        }
        (arg1)->SetError((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetError) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetError. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetError();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetHeaderKey) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetHeaderKey(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetHeaderKey. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_GetHeaderKey. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetVersion) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetVersion. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetCols) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetCols. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetRows) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetRows. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetNumCells) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetNumCells. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetHeader) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetHeader. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetHeader();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetAlg) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetAlg(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetAlg. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetAlg();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetParams) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetParams(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetParams. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetParams();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetAlgorithmParameter) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetAlgorithmParameter. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_GetAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetAlgorithmParameterTag) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetAlgorithmParameterTag(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetAlgorithmParameterTag. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetAlgorithmParameterTag(arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetNumberAlgorithmParameters) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetNumberAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetNumberAlgorithmParameters. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetNumberAlgorithmParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetAlgorithmParameters) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetAlgorithmParameters. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetAlgorithmParameters();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetParameters) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetParameters. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            affymetrix_fusion_io::FusionTagValuePairTypeList &_result_ref = (arg1)->GetParameters();
            result = (affymetrix_fusion_io::FusionTagValuePairTypeList *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetChipType) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetChipType. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (arg1)->GetChipType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetCellMargin) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetCellMargin(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetCellMargin. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetCellMargin();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetNumOutliers) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetNumOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetNumOutliers. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (unsigned int)(arg1)->GetNumOutliers();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetNumMasked) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetNumMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetNumMasked. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (unsigned int)(arg1)->GetNumMasked();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IndexToX) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_IndexToX(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IndexToX. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToX(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IndexToY) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_IndexToY(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IndexToY. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToY(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_XYToIndex__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_XYToIndex(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_XYToIndex. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (int)(arg1)->XYToIndex(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_XYToIndex__SWIG_1) {
    {
        int arg1 ;
        int arg2 ;
        int arg3 ;
        int arg4 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: FusionCELData_XYToIndex(x,y,r,c);");
        }
        arg1 = (int) SvIV(ST(0));
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        arg4 = (int) SvIV(ST(3));
        result = (int)affymetrix_fusion_io::FusionCELData::XYToIndex(arg1,arg2,arg3,arg4);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_XYToIndex) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_XYToIndex__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            _v = SvIOK(ST(0)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = SvIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_XYToIndex__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_XYToIndex'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_GetEntry__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        FusionCELFileEntryType *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_GetEntry(self,index,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetEntry. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCELData_GetEntry. Expected _p_FusionCELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetEntry__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        FusionCELFileEntryType *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: FusionCELData_GetEntry(self,x,y,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetEntry. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of FusionCELData_GetEntry. Expected _p_FusionCELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_FusionCELFileEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetEntry__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_FusionCELFileEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetEntry__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_GetEntry'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_GetIntensity__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetIntensity(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetIntensity. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetIntensity(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetIntensity__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_GetIntensity(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetIntensity. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetIntensity(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetIntensity) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetIntensity__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetIntensity__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_GetIntensity'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_GetStdv__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetStdv(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetStdv. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetStdv(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetStdv__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_GetStdv(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetStdv. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetStdv(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetStdv) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetStdv__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetStdv__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_GetStdv'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_GetPixels__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_GetPixels(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetPixels. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (short)(arg1)->GetPixels(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetPixels__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_GetPixels(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetPixels. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (short)(arg1)->GetPixels(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetPixels) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetPixels__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_GetPixels__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_GetPixels'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_IsMasked__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_IsMasked(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IsMasked. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsMasked(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IsMasked__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_IsMasked(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IsMasked. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsMasked(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IsMasked) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_IsMasked__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_IsMasked__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_IsMasked'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_IsOutlier__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_IsOutlier(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IsOutlier. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsOutlier(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IsOutlier__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_IsOutlier(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_IsOutlier. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsOutlier(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_IsOutlier) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_IsOutlier__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_IsOutlier__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_IsOutlier'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_Close) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_Close. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_GetFileSize) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetFileSize(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetFileSize. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (unsigned int)(arg1)->GetFileSize();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_Exists) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_Exists. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_ReadHeader) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_ReadHeader. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_Read__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        bool arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_Read(self,bIncludeMaskAndOutliers);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_Read. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        result = (bool)(arg1)->Read(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_Read__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_Read. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_Read) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_Read__SWIG_1); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_Read__SWIG_0); return;
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_Read'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_ReadEx__SWIG_0) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        char *arg2 = (char *) 0 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_ReadEx(self,filename,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_ReadEx. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_ReadEx__SWIG_1) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        char *arg2 = (char *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_ReadEx(self,filename);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_ReadEx. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (bool)(arg1)->ReadEx((char const *)arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_ReadEx__SWIG_2) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_ReadEx(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_ReadEx. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (bool)(arg1)->ReadEx();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_ReadEx) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_ReadEx__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_ReadEx__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_FusionCELData_ReadEx__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'FusionCELData_ReadEx'");
    XSRETURN(0);
}


XS(_wrap_FusionCELData_GetReadState) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_GetReadState(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_GetReadState. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        result = (int)(arg1)->GetReadState();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_Clear) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_Clear. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetAlgorithmName) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_SetAlgorithmName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetAlgorithmName. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_SetAlgorithmName. Expected _p_wchar_t");
            }
        }
        (arg1)->SetAlgorithmName((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_AddAlgorithmParameter) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        wchar_t *arg3 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_AddAlgorithmParameter. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_AddAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of FusionCELData_AddAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetDimensions) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: FusionCELData_SetDimensions(self,rows,cols);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetDimensions. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        (arg1)->SetDimensions(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetChipType) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_SetChipType(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetChipType. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCELData_SetChipType. Expected _p_wchar_t");
            }
        }
        (arg1)->SetChipType((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELData_SetMargin) {
    {
        affymetrix_fusion_io::FusionCELData *arg1 = (affymetrix_fusion_io::FusionCELData *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELData_SetMargin(self,margin);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELData_SetMargin. Expected _p_affymetrix_fusion_io__FusionCELData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetMargin(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Intensity_set) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Intensity_set(self,Intensity);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Intensity_set. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Intensity = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Intensity_get) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Intensity_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Intensity_get. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        result = (float) ((arg1)->Intensity);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Stdv_set) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        float arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Stdv_set(self,Stdv);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Stdv_set. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        arg2 = (float) SvNV(ST(1));
        
        if (arg1) (arg1)->Stdv = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Stdv_get) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Stdv_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Stdv_get. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        result = (float) ((arg1)->Stdv);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Pixels_set) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        short arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Pixels_set(self,Pixels);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Pixels_set. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        arg2 = (short) SvIV(ST(1));
        if (arg1) (arg1)->Pixels = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCELFileEntryType_Pixels_get) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCELFileEntryType_Pixels_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCELFileEntryType_Pixels_get. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        result = (short) ((arg1)->Pixels);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCELFileEntryType) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCELFileEntryType();");
        }
        result = (affymetrix_fusion_io::FusionCELFileEntryType *)new affymetrix_fusion_io::FusionCELFileEntryType();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCELFileEntryType) {
    {
        affymetrix_fusion_io::FusionCELFileEntryType *arg1 = (affymetrix_fusion_io::FusionCELFileEntryType *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCELFileEntryType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCELFileEntryType. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_CanReadFile) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_CanReadFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_CanReadFile. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (bool)(arg1)->CanReadFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetFileName) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetFileName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetFileName. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of IFusionCELDataAdapter_SetFileName.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFileName((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetFileName) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetFileName. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCELDataAdapter const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetError) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetError(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetError. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_SetError. Expected _p_wchar_t");
            }
        }
        (arg1)->SetError((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetError) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetError(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetError. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetError();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetHeaderKey) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetHeaderKey(self,key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetHeaderKey. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_GetHeaderKey. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetHeaderKey((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetVersion) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetVersion. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetCols) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetCols. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetRows) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetRows. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetNumCells) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetNumCells(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetNumCells. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetNumCells();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetHeader) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetHeader. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetHeader();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetAlg) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetAlg(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetAlg. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetAlg();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetParams) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetParams(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetParams. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetParams();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetAlgorithmParameter) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetAlgorithmParameter. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_GetAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetAlgorithmParameterTag) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetAlgorithmParameterTag(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetAlgorithmParameterTag. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (arg1)->GetAlgorithmParameterTag(arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetNumberAlgorithmParameters) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetNumberAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetNumberAlgorithmParameters. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetNumberAlgorithmParameters();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetAlgorithmParameters) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetAlgorithmParameters(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetAlgorithmParameters. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetAlgorithmParameters();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetParameters) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetParameters(self,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetParameters. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_GetParameters. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        (arg1)->GetParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetChipType) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetChipType. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (arg1)->GetChipType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetCellMargin) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetCellMargin(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetCellMargin. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetCellMargin();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetNumOutliers) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetNumOutliers(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetNumOutliers. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (unsigned int)(arg1)->GetNumOutliers();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetNumMasked) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        unsigned int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetNumMasked(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetNumMasked. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (unsigned int)(arg1)->GetNumMasked();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IndexToX) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IndexToX(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IndexToX. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToX(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IndexToY) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IndexToY(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IndexToY. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (int)(arg1)->IndexToY(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_XYToIndex) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_XYToIndex(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_XYToIndex. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (int)(arg1)->XYToIndex(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetEntry__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionCELFileEntryType *arg3 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetEntry(self,index,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetEntry. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 3 of IFusionCELDataAdapter_GetEntry. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,*arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetEntry__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        affymetrix_fusion_io::FusionCELFileEntryType *arg4 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetEntry(self,x,y,entry);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetEntry. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType,0) < 0) {
                SWIG_croak("Type error in argument 4 of IFusionCELDataAdapter_GetEntry. Expected _p_affymetrix_fusion_io__FusionCELFileEntryType");
            }
        }
        (arg1)->GetEntry(arg2,arg3,*arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetEntry) {
    dXSARGS;
    
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *tmp;
                    if (SWIG_ConvertPtr(ST(2), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType, 0) == -1) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetEntry__SWIG_0); return;
                }
            }
        }
    }
    if (items == 4) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *tmp;
                        if (SWIG_ConvertPtr(ST(3), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType, 0) == -1) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetEntry__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_GetEntry'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_GetIntensity__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetIntensity(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetIntensity. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetIntensity(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetIntensity__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetIntensity(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetIntensity. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetIntensity(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetIntensity) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetIntensity__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetIntensity__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_GetIntensity'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_GetStdv__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetStdv(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetStdv. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (float)(arg1)->GetStdv(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetStdv__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        float result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetStdv(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetStdv. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (float)(arg1)->GetStdv(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetStdv) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetStdv__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetStdv__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_GetStdv'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_GetPixels__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetPixels(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetPixels. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (short)(arg1)->GetPixels(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetPixels__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        short result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetPixels(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetPixels. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (short)(arg1)->GetPixels(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetPixels) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetPixels__SWIG_0); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_GetPixels__SWIG_1); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_GetPixels'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_IsMasked__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IsMasked(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IsMasked. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsMasked(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IsMasked__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IsMasked(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IsMasked. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsMasked(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IsMasked) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_IsMasked__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_IsMasked__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_IsMasked'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_IsOutlier__SWIG_0) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IsOutlier(self,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IsOutlier. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->IsOutlier(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IsOutlier__SWIG_1) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_IsOutlier(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_IsOutlier. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (bool)(arg1)->IsOutlier(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_IsOutlier) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_IsOutlier__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_IFusionCELDataAdapter_IsOutlier__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'IFusionCELDataAdapter_IsOutlier'");
    XSRETURN(0);
}


XS(_wrap_IFusionCELDataAdapter_Close) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_Close(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_Close. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        (arg1)->Close();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_ReadHeader) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_ReadHeader. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_Read) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        bool arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_Read(self,bIncludeMaskAndOutliers);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_Read. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (bool) SvIV(ST(1));
        result = (bool)(arg1)->Read(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_ReadEx) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        char *arg2 = (char *) 0 ;
        int arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_ReadEx(self,filename,state);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_ReadEx. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (int) SvIV(ST(2));
        result = (bool)(arg1)->ReadEx((char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_GetReadState) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_GetReadState(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_GetReadState. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        result = (int)(arg1)->GetReadState();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_Clear) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_Clear. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetAlgorithmName) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetAlgorithmName(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetAlgorithmName. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_SetAlgorithmName. Expected _p_wchar_t");
            }
        }
        (arg1)->SetAlgorithmName((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_AddAlgorithmParameter) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        wchar_t *arg3 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_AddAlgorithmParameter(self,tag,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_AddAlgorithmParameter. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_AddAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 3 of IFusionCELDataAdapter_AddAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        (arg1)->AddAlgorithmParameter((wchar_t const *)arg2,(wchar_t const *)arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetDimensions) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetDimensions(self,rows,cols);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetDimensions. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        arg3 = (int) SvIV(ST(2));
        (arg1)->SetDimensions(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetChipType) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetChipType(self,str);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetChipType. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCELDataAdapter_SetChipType. Expected _p_wchar_t");
            }
        }
        (arg1)->SetChipType((wchar_t const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCELDataAdapter_SetMargin) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCELDataAdapter_SetMargin(self,margin);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCELDataAdapter_SetMargin. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        (arg1)->SetMargin(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_IFusionCELDataAdapter) {
    {
        affymetrix_fusion_io::IFusionCELDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCELDataAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_IFusionCELDataAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_IFusionCELDataAdapter. Expected _p_affymetrix_fusion_io__IFusionCELDataAdapter");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ConvertFusion) {
    {
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg1 = 0 ;
        TagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ConvertFusion(fromList,toList);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of ConvertFusion. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listT_TagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of ConvertFusion. Expected _p_std__listT_TagValuePairType_t");
            }
        }
        affymetrix_fusion_io::ConvertFusion(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_ConvertGCOS) {
    {
        TagValuePairTypeList *arg1 = 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ConvertGCOS(fromList,toList);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_std__listT_TagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 1 of ConvertGCOS. Expected _p_std__listT_TagValuePairType_t");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of ConvertGCOS. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        affymetrix_fusion_io::ConvertGCOS(*arg1,*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetCols) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetCols. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetRows) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetRows. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetNumProbeSets) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetNumProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetNumProbeSets. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetNumProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAssayType) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affymetrix_fusion_io::AssayType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAssayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAssayType. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAssayType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetChipType) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetChipType. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetChipType();
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAlgName) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAlgName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAlgName. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgName();
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAlgVersion) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAlgVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAlgVersion. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetAlgVersion();
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameters) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAlgorithmParameters(self,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAlgorithmParameters. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetAlgorithmParameters. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        (arg1)->GetAlgorithmParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameterCount) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAlgorithmParameterCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAlgorithmParameterCount. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (u_int32_t)(arg1)->GetAlgorithmParameterCount();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetSummaryParameters) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetSummaryParameters(self,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetSummaryParameters. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetSummaryParameters. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        (arg1)->GetSummaryParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetParentCellFile) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetParentCellFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetParentCellFile. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetParentCellFile();
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetProgID) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetProgID(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetProgID. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetProgID();
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameter) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetAlgorithmParameter. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetSummaryParameter) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetSummaryParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetSummaryParameter. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetSummaryParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
        
        {
            wstring * resultobj = new wstring((wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetBackgroundZoneInfo) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affxchp::BackgroundZoneInfo *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetBackgroundZoneInfo(self,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetBackgroundZoneInfo. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetBackgroundZoneInfo. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        (arg1)->GetBackgroundZoneInfo(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetBackgroundZones) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affxchp::BackgroundZoneTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetBackgroundZones(self,zones);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetBackgroundZones. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetBackgroundZones. Expected _p_std__listTaffxchp___BackgroundZoneType_t");
            }
        }
        (arg1)->GetBackgroundZones(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetBackgroundZone) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        affxchp::BackgroundZoneType *arg2 = 0 ;
        int arg3 ;
        int arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetBackgroundZone(self,type,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetBackgroundZone. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 2 of IFusionCHPHeaderAdapter_GetBackgroundZone. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        arg3 = (int) SvIV(ST(2));
        arg4 = (int) SvIV(ST(3));
        (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetMagic) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetMagic(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetMagic. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetMagic();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPHeaderAdapter_GetVersion) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPHeaderAdapter_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPHeaderAdapter_GetVersion. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        result = (int)((affymetrix_fusion_io::IFusionCHPHeaderAdapter const *)arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_IFusionCHPHeaderAdapter) {
    {
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_IFusionCHPHeaderAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_IFusionCHPHeaderAdapter. Expected _p_affymetrix_fusion_io__IFusionCHPHeaderAdapter");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_GetHeader) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        affymetrix_fusion_io::IFusionCHPHeaderAdapter *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_GetHeader. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        {
            affymetrix_fusion_io::IFusionCHPHeaderAdapter &_result_ref = (arg1)->GetHeader();
            result = (affymetrix_fusion_io::IFusionCHPHeaderAdapter *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_CanReadFile) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_CanReadFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_CanReadFile. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        result = (bool)(arg1)->CanReadFile();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_GetExpressionResults) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionExpressionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_GetExpressionResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_GetExpressionResults. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)(arg1)->GetExpressionResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_GetGenotypingResults) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_GetGenotypingResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_GetGenotypingResults. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)(arg1)->GetGenotypingResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_GetUniversalResults) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionUniversalProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_GetUniversalResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_GetUniversalResults. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)(arg1)->GetUniversalResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_Read) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_Read. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_ReadHeader) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_ReadHeader. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_SetFileName) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        std::string *arg2 = 0 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_SetFileName(self,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_SetFileName. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        {
            STRLEN len;
            const char *ptr = SvPV(ST(1), len);
            if (!ptr) {
                SWIG_croak("Undefined variable in argument 2 of IFusionCHPDataAdapter_SetFileName.");
            } else {
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        (arg1)->SetFileName((std::string const &)*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_GetFileName) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_GetFileName. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        result = ((affymetrix_fusion_io::IFusionCHPDataAdapter const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_IFusionCHPDataAdapter_Clear) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: IFusionCHPDataAdapter_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of IFusionCHPDataAdapter_Clear. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_IFusionCHPDataAdapter) {
    {
        affymetrix_fusion_io::IFusionCHPDataAdapter *arg1 = (affymetrix_fusion_io::IFusionCHPDataAdapter *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_IFusionCHPDataAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_IFusionCHPDataAdapter. Expected _p_affymetrix_fusion_io__IFusionCHPDataAdapter");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCHPHeader) {
    {
        affymetrix_fusion_io::FusionCHPHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCHPHeader();");
        }
        result = (affymetrix_fusion_io::FusionCHPHeader *)new affymetrix_fusion_io::FusionCHPHeader();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCHPHeader) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCHPHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCHPHeader. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetCols) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetCols(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetCols. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetCols();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetRows) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetRows(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetRows. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetRows();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetNumProbeSets) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetNumProbeSets(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetNumProbeSets. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetNumProbeSets();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetAssayType) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affymetrix_fusion_io::AssayType result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetAssayType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetAssayType. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (affymetrix_fusion_io::AssayType)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAssayType();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetChipType) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetChipType(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetChipType. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetChipType();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetAlgName) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetAlgName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetAlgName. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgName();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetAlgVersion) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetAlgVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetAlgVersion. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetAlgVersion();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_AlgorithmParameters) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_AlgorithmParameters(self,values);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_AlgorithmParameters. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_AlgorithmParameters. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        (arg1)->AlgorithmParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_AlgorithmParameterCount) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        u_int32_t result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_AlgorithmParameterCount(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_AlgorithmParameterCount. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (u_int32_t)(arg1)->AlgorithmParameterCount();
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_SummaryParameters) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affymetrix_fusion_io::FusionTagValuePairTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_SummaryParameters(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_SummaryParameters. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_SummaryParameters. Expected _p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t");
            }
        }
        (arg1)->SummaryParameters(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetParentCellFile) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetParentCellFile(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetParentCellFile. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetParentCellFile();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetProgID) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetProgID(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetProgID. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetProgID();
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetAlgorithmParameter) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_GetAlgorithmParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetAlgorithmParameter. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_GetAlgorithmParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetAlgorithmParameter((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetSummaryParameter) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        wchar_t *arg2 = (wchar_t *) 0 ;
        std::wstring result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_GetSummaryParameter(self,tag);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetSummaryParameter. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_wchar_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_GetSummaryParameter. Expected _p_wchar_t");
            }
        }
        result = (arg1)->GetSummaryParameter((wchar_t const *)arg2);
        
        {
            std::wstring * resultobj = new std::wstring((std::wstring &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_std__wstring, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetBackgroundZoneInfo) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affxchp::BackgroundZoneInfo *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_GetBackgroundZoneInfo(self,info);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetBackgroundZoneInfo. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp___BackgroundZoneInfo,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_GetBackgroundZoneInfo. Expected _p_affxchp___BackgroundZoneInfo");
            }
        }
        (arg1)->GetBackgroundZoneInfo(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetBackgroundZones) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affxchp::BackgroundZoneTypeList *arg2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPHeader_GetBackgroundZones(self,zones);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetBackgroundZones. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_std__listTaffxchp___BackgroundZoneType_t,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_GetBackgroundZones. Expected _p_std__listTaffxchp___BackgroundZoneType_t");
            }
        }
        (arg1)->GetBackgroundZones(*arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetBackgroundZone) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        affxchp::BackgroundZoneType *arg2 = 0 ;
        int arg3 ;
        int arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: FusionCHPHeader_GetBackgroundZone(self,type,x,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetBackgroundZone. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_affxchp___BackgroundZoneType,0) < 0) {
                SWIG_croak("Type error in argument 2 of FusionCHPHeader_GetBackgroundZone. Expected _p_affxchp___BackgroundZoneType");
            }
        }
        arg3 = (int) SvIV(ST(2));
        arg4 = (int) SvIV(ST(3));
        (arg1)->GetBackgroundZone(*arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetMagic) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetMagic(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetMagic. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetMagic();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_GetVersion) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_GetVersion(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_GetVersion. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        result = (int)((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->GetVersion();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPHeader_CheckAdapter) {
    {
        affymetrix_fusion_io::FusionCHPHeader *arg1 = (affymetrix_fusion_io::FusionCHPHeader *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPHeader_CheckAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPHeader_CheckAdapter. Expected _p_affymetrix_fusion_io__FusionCHPHeader");
            }
        }
        ((affymetrix_fusion_io::FusionCHPHeader const *)arg1)->CheckAdapter();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_FusionCHPData) {
    {
        affymetrix_fusion_io::FusionCHPData *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_FusionCHPData();");
        }
        result = (affymetrix_fusion_io::FusionCHPData *)new affymetrix_fusion_io::FusionCHPData();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_FusionCHPData) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_FusionCHPData(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_FusionCHPData. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_GetExpressionResults) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionExpressionProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPData_GetExpressionResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_GetExpressionResults. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionExpressionProbeSetResults *)(arg1)->GetExpressionResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_GetGenotypingResults) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionGenotypeProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPData_GetGenotypingResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_GetGenotypingResults. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionGenotypeProbeSetResults *)(arg1)->GetGenotypingResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_GetUniversalResults) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int arg2 ;
        affymetrix_fusion_io::FusionUniversalProbeSetResults *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPData_GetUniversalResults(self,index);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_GetUniversalResults. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (affymetrix_fusion_io::FusionUniversalProbeSetResults *)(arg1)->GetUniversalResults(arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_Read) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_Read(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_Read. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        result = (bool)(arg1)->Read();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_ReadHeader) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_ReadHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_ReadHeader. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        result = (bool)(arg1)->ReadHeader();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_Exists) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_Exists(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_Exists. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        result = (bool)(arg1)->Exists();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_SetFileName) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        char *arg2 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: FusionCHPData_SetFileName(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_SetFileName. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        (arg1)->SetFileName((char const *)arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_GetFileName) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_GetFileName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_GetFileName. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        result = ((affymetrix_fusion_io::FusionCHPData const *)arg1)->GetFileName();
        
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_Clear) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_Clear(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_Clear. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        (arg1)->Clear();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_CheckAdapter) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_CheckAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_CheckAdapter. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        ((affymetrix_fusion_io::FusionCHPData const *)arg1)->CheckAdapter();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_CreateAdapter) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_CreateAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_CreateAdapter. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        (arg1)->CreateAdapter();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_DeleteAdapter) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_DeleteAdapter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_DeleteAdapter. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        (arg1)->DeleteAdapter();
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_FusionCHPData_GetHeader) {
    {
        affymetrix_fusion_io::FusionCHPData *arg1 = (affymetrix_fusion_io::FusionCHPData *) 0 ;
        affymetrix_fusion_io::FusionCHPHeader *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: FusionCHPData_GetHeader(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData,0) < 0) {
                SWIG_croak("Type error in argument 1 of FusionCHPData_GetHeader. Expected _p_affymetrix_fusion_io__FusionCHPData");
            }
        }
        {
            affymetrix_fusion_io::FusionCHPHeader &_result_ref = (arg1)->GetHeader();
            result = (affymetrix_fusion_io::FusionCHPHeader *) &_result_ref;
        }
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader, SWIG_SHADOW|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *) x));
}
static void *_p_affymetrix_calvin_exceptions__DataSetNotOpenExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::DataSetNotOpenException *) x));
}
static void *_p_affymetrix_calvin_exceptions__NotImplementedExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::NotImplementedException *) x));
}
static void *_p_affymetrix_calvin_exceptions__InvalidVersionExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::InvalidVersionException *) x));
}
static void *_p_affymetrix_calvin_exceptions__OutOfRangeParameterExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::OutOfRangeParameterException *) x));
}
static void *_p_affymetrix_calvin_exceptions__UnexpectedParameterExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::UnexpectedParameterException *) x));
}
static void *_p_affymetrix_calvin_exceptions__ParameterMismatchExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::ParameterMismatchException *) x));
}
static void *_p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *) x));
}
static void *_p_affymetrix_calvin_exceptions__FormatExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::FormatException *) x));
}
static void *_p_affymetrix_calvin_exceptions__UnableToOpenFileExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::UnableToOpenFileException *) x));
}
static void *_p_affymetrix_calvin_exceptions__FileNotOpenExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::FileNotOpenException *) x));
}
static void *_p_affymetrix_calvin_exceptions__DataSetNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::DataSetNotFoundException *) x));
}
static void *_p_affymetrix_calvin_exceptions__UnexpectedColumnTypeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::UnexpectedColumnTypeException *) x));
}
static void *_p_affymetrix_calvin_exceptions__ProbeSetNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::ProbeSetNotFoundException *) x));
}
static void *_p_affymetrix_calvin_exceptions__InvalidFileTypeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::InvalidFileTypeException *) x));
}
static void *_p_affymetrix_calvin_exceptions__DataGroupNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::DataGroupNotFoundException *) x));
}
static void *_p_affymetrix_calvin_exceptions__FileNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::FileNotFoundException *) x));
}
static void *_p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsExceptionTo_p_affymetrix_calvin_exceptions__CalvinException(void *x) {
    return (void *)((affymetrix_calvin_exceptions::CalvinException *)  ((affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *) x));
}
static void *_p_affymetrix_calvin_io__ByteColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::ByteColumnType *) x));
}
static void *_p_affymetrix_calvin_io__UByteColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::UByteColumnType *) x));
}
static void *_p_affymetrix_calvin_io__ShortColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::ShortColumnType *) x));
}
static void *_p_affymetrix_calvin_io__UShortColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::UShortColumnType *) x));
}
static void *_p_affymetrix_calvin_io__IntColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::IntColumnType *) x));
}
static void *_p_affymetrix_calvin_io__UIntColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::UIntColumnType *) x));
}
static void *_p_affymetrix_calvin_io__FloatColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::FloatColumnType *) x));
}
static void *_p_affymetrix_calvin_io__ASCIIColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::ASCIIColumnType *) x));
}
static void *_p_affymetrix_calvin_io__UnicodeColumnTypeTo_p_affymetrix_calvin_io__ColumnType(void *x) {
    return (void *)((affymetrix_calvin_io::ColumnType *)  ((affymetrix_calvin_io::UnicodeColumnType *) x));
}
static void *_p_affymetrix_calvin_array__TemplateDataTo_p_affymetrix_calvin_array__ArrayData(void *x) {
    return (void *)((affymetrix_calvin_array::ArrayData *)  ((affymetrix_calvin_array::TemplateData *) x));
}
static void *_p_affymetrix_calvin_io__TemplateFileReaderTo_p_affymetrix_calvin_io__ArrayFileReader(void *x) {
    return (void *)((affymetrix_calvin_io::ArrayFileReader *)  ((affymetrix_calvin_io::TemplateFileReader *) x));
}
static void *_p_affymetrix_fusion_io__FusionGenotypeProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults(void *x) {
    return (void *)((affymetrix_fusion_io::FusionProbeSetResults *)  ((affymetrix_fusion_io::FusionGenotypeProbeSetResults *) x));
}
static void *_p_affymetrix_fusion_io__FusionUniversalProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults(void *x) {
    return (void *)((affymetrix_fusion_io::FusionProbeSetResults *)  ((affymetrix_fusion_io::FusionUniversalProbeSetResults *) x));
}
static void *_p_affymetrix_fusion_io__FusionExpressionProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults(void *x) {
    return (void *)((affymetrix_fusion_io::FusionProbeSetResults *)  ((affymetrix_fusion_io::FusionExpressionProbeSetResults *) x));
}
static void *_p_affxchp__CExpressionProbeSetResultsTo_p_affxchp__CProbeSetResults(void *x) {
    return (void *)((affxchp::CProbeSetResults *)  ((affxchp::CExpressionProbeSetResults *) x));
}
static void *_p_affxchp__CGenotypeProbeSetResultsTo_p_affxchp__CProbeSetResults(void *x) {
    return (void *)((affxchp::CProbeSetResults *)  ((affxchp::CGenotypeProbeSetResults *) x));
}
static void *_p_affxchp__CUniversalProbeSetResultsTo_p_affxchp__CProbeSetResults(void *x) {
    return (void *)((affxchp::CProbeSetResults *)  ((affxchp::CUniversalProbeSetResults *) x));
}
static swig_type_info _swigt__p_FusionCELFileEntryType = {"_p_FusionCELFileEntryType", "FusionCELFileEntryType *", 0, 0, 0};
static swig_type_info _swigt__p_GeneChipAssayType = {"_p_GeneChipAssayType", "GeneChipAssayType *", 0, 0, 0};
static swig_type_info _swigt__p__CoordinatePoint = {"affx_fusion::CoordinatePoint", "_CoordinatePoint *|CoordinatePoint *", 0, 0, 0};
static swig_type_info _swigt__p__GridCoordinatesType = {"affx_fusion::GridCoordinatesType", "_GridCoordinatesType *|GridCoordinatesType *", 0, 0, 0};
static swig_type_info _swigt__p__TagValuePairType = {"affx_fusion::TagValuePairType", "_TagValuePairType *|TagValuePairType *", 0, 0, 0};
static swig_type_info _swigt__p_affxbar__CBARFileData = {"affx_fusion::CBARFileData", "affxbar::CBARFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxbar__CGDACSequenceResultItem = {"affx_fusion::CGDACSequenceResultItem", "affxbar::CGDACSequenceResultItem *", 0, 0, 0};
static swig_type_info _swigt__p_affxbar___BarSequenceResultData = {"affx_fusion::BarSequenceResultData", "affxbar::_BarSequenceResultData *|affxbar::BarSequenceResultData *", 0, 0, 0};
static swig_type_info _swigt__p_affxbar___GDACFILES_BAR_DATA_TYPE = {"_p_affxbar___GDACFILES_BAR_DATA_TYPE", "enum affxbar::_GDACFILES_BAR_DATA_TYPE *|affxbar::GDACFILES_BAR_DATA_TYPE *", 0, 0, 0};
static swig_type_info _swigt__p_affxbpmap__CBPMAPFileData = {"affx_fusion::CBPMAPFileData", "affxbpmap::CBPMAPFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxbpmap__CGDACSequenceItem = {"affx_fusion::CGDACSequenceItem", "affxbpmap::CGDACSequenceItem *", 0, 0, 0};
static swig_type_info _swigt__p_affxbpmap___GDACSequenceHitItemType = {"affx_fusion::GDACSequenceHitItemType", "affxbpmap::_GDACSequenceHitItemType *|affxbpmap::GDACSequenceHitItemType *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFFileData = {"affx_fusion::CCDFFileData", "affxcdf::CCDFFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFFileHeader = {"affx_fusion::CCDFFileHeader", "affxcdf::CCDFFileHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFProbeGroupInformation = {"affx_fusion::CCDFProbeGroupInformation", "affxcdf::CCDFProbeGroupInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFProbeInformation = {"affx_fusion::CCDFProbeInformation", "affxcdf::CCDFProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFProbeSetInformation = {"affx_fusion::CCDFProbeSetInformation", "affxcdf::CCDFProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFProbeSetNames = {"affx_fusion::CCDFProbeSetNames", "affxcdf::CCDFProbeSetNames *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFQCProbeInformation = {"affx_fusion::CCDFQCProbeInformation", "affxcdf::CCDFQCProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affxcdf__CCDFQCProbeSetInformation = {"affx_fusion::CCDFQCProbeSetInformation", "affxcdf::CCDFQCProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affxcel__CCELFileData = {"affx_fusion::CCELFileData", "affxcel::CCELFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxcel__CCELFileHeaderData = {"affx_fusion::CCELFileHeaderData", "affxcel::CCELFileHeaderData *", 0, 0, 0};
static swig_type_info _swigt__p_affxcel___CELFileEntryType = {"affx_fusion::CELFileEntryType", "affxcel::_CELFileEntryType *|affxcel::CELFileEntryType *", 0, 0, 0};
static swig_type_info _swigt__p_affxcel___CELFileTranscriptomeEntryType = {"affx_fusion::CELFileTranscriptomeEntryType", "affxcel::_CELFileTranscriptomeEntryType *|affxcel::CELFileTranscriptomeEntryType *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CCHPFileData = {"affx_fusion::CCHPFileData", "affxchp::CCHPFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CCHPFileHeader = {"affx_fusion::CCHPFileHeader", "affxchp::CCHPFileHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CExpressionProbeSetResults = {"affx_fusion::CExpressionProbeSetResults", "affxchp::CExpressionProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CGenotypeProbeSetResults = {"affx_fusion::CGenotypeProbeSetResults", "affxchp::CGenotypeProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CProbeSetResults = {"affx_fusion::CProbeSetResults", "affxchp::CProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CResequencingResults = {"affx_fusion::CResequencingResults", "affxchp::CResequencingResults *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp__CUniversalProbeSetResults = {"affx_fusion::CUniversalProbeSetResults", "affxchp::CUniversalProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp___BackgroundZoneInfo = {"affx_fusion::BackgroundZoneInfo", "affxchp::_BackgroundZoneInfo *|affxchp::BackgroundZoneInfo *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp___BackgroundZoneType = {"affx_fusion::BackgroundZoneType", "affxchp::_BackgroundZoneType *|affxchp::BackgroundZoneType *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp___BaseCallType = {"affx_fusion::BaseCallType", "affxchp::_BaseCallType *|affxchp::BaseCallType *", 0, 0, 0};
static swig_type_info _swigt__p_affxchp___ForceCallType = {"affx_fusion::ForceCallType", "affxchp::_ForceCallType *|affxchp::ForceCallType *", 0, 0, 0};
static swig_type_info _swigt__p_affxexp__CEXPFileData = {"affx_fusion::CEXPFileData", "affxexp::CEXPFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxgrc__CGRCFileData = {"affx_fusion::CGRCFileData", "affxgrc::CGRCFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxmsk__CMSKFileData = {"affx_fusion::CMSKFileData", "affxmsk::CMSKFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxmsk__ProbeSetIndiciesList__const_iterator = {"_p_affxmsk__ProbeSetIndiciesList__const_iterator", "affxmsk::ProbeSetIndiciesList::const_iterator *|affxmsk::ProbeSetIndiciesListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_affxmsk__ProbeSetList__const_iterator = {"_p_affxmsk__ProbeSetList__const_iterator", "affxmsk::ProbeSetList::const_iterator *|affxmsk::ProbeSetListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_affxmsk___ProbeSetIndiciesType = {"affx_fusion::ProbeSetIndiciesType", "affxmsk::_ProbeSetIndiciesType *|affxmsk::ProbeSetIndiciesType *", 0, 0, 0};
static swig_type_info _swigt__p_affxpsi__CPSIFileData = {"affx_fusion::CPSIFileData", "affxpsi::CPSIFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affxpsi___ProbeSetInfo = {"affx_fusion::ProbeSetInfo", "affxpsi::_ProbeSetInfo *|affxpsi::ProbeSetInfo *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_array__ArrayAttributes = {"affx_fusion::ArrayAttributes", "affymetrix_calvin_array::ArrayAttributes *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_array__ArrayAuditEntry = {"affx_fusion::ArrayAuditEntry", "affymetrix_calvin_array::ArrayAuditEntry *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_array__ArrayData = {"affx_fusion::ArrayData", "affymetrix_calvin_array::ArrayData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_array__TemplateData = {"affx_fusion::TemplateData", "affymetrix_calvin_array::TemplateData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException = {"affx_fusion::CDFAccessNotSupportedByModeException", "affymetrix_calvin_exceptions::CDFAccessNotSupportedByModeException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__CalvinException = {"affx_fusion::CalvinException", "affymetrix_calvin_exceptions::CalvinException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException = {"affx_fusion::ColumnIndexOutOfBoundsException", "affymetrix_calvin_exceptions::ColumnIndexOutOfBoundsException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__DataGroupNotFoundException = {"affx_fusion::DataGroupNotFoundException", "affymetrix_calvin_exceptions::DataGroupNotFoundException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__DataSetNotFoundException = {"affx_fusion::DataSetNotFoundException", "affymetrix_calvin_exceptions::DataSetNotFoundException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__DataSetNotOpenException = {"affx_fusion::DataSetNotOpenException", "affymetrix_calvin_exceptions::DataSetNotOpenException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__FileNotFoundException = {"affx_fusion::FileNotFoundException", "affymetrix_calvin_exceptions::FileNotFoundException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__FileNotOpenException = {"affx_fusion::FileNotOpenException", "affymetrix_calvin_exceptions::FileNotOpenException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__FormatException = {"affx_fusion::FormatException", "affymetrix_calvin_exceptions::FormatException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__InvalidFileTypeException = {"affx_fusion::InvalidFileTypeException", "affymetrix_calvin_exceptions::InvalidFileTypeException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__InvalidVersionException = {"affx_fusion::InvalidVersionException", "affymetrix_calvin_exceptions::InvalidVersionException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__NotImplementedException = {"affx_fusion::NotImplementedException", "affymetrix_calvin_exceptions::NotImplementedException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__OutOfRangeParameterException = {"affx_fusion::OutOfRangeParameterException", "affymetrix_calvin_exceptions::OutOfRangeParameterException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__ParameterMismatchException = {"affx_fusion::ParameterMismatchException", "affymetrix_calvin_exceptions::ParameterMismatchException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException = {"affx_fusion::ProbeSetNotFoundException", "affymetrix_calvin_exceptions::ProbeSetNotFoundException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException = {"affx_fusion::RowIndexOutOfBoundsException", "affymetrix_calvin_exceptions::RowIndexOutOfBoundsException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__UnableToOpenFileException = {"affx_fusion::UnableToOpenFileException", "affymetrix_calvin_exceptions::UnableToOpenFileException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException = {"affx_fusion::UnexpectedColumnTypeException", "affymetrix_calvin_exceptions::UnexpectedColumnTypeException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_exceptions__UnexpectedParameterException = {"affx_fusion::UnexpectedParameterException", "affymetrix_calvin_exceptions::UnexpectedParameterException *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__ASCIIColumnType = {"affx_fusion::ASCIIColumnType", "affymetrix_calvin_io::ASCIIColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__ArrayFileReader = {"affx_fusion::ArrayFileReader", "affymetrix_calvin_io::ArrayFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__AuditFileReader = {"affx_fusion::AuditFileReader", "affymetrix_calvin_io::AuditFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__ByteColumnType = {"affx_fusion::ByteColumnType", "affymetrix_calvin_io::ByteColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFData = {"affx_fusion::CDFData", "affymetrix_calvin_io::CDFData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFFileReader = {"affx_fusion::CDFFileReader", "affymetrix_calvin_io::CDFFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFProbeGroupInformation = {"affx_fusion::CDFProbeGroupInformation", "affymetrix_calvin_io::CDFProbeGroupInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFProbeInformation = {"affx_fusion::CDFProbeInformation", "affymetrix_calvin_io::CDFProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFProbeSetInformation = {"affx_fusion::CDFProbeSetInformation", "affymetrix_calvin_io::CDFProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFQCProbeInformation = {"affx_fusion::CDFQCProbeInformation", "affymetrix_calvin_io::CDFQCProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CDFQCProbeSetInformation = {"affx_fusion::CDFQCProbeSetInformation", "affymetrix_calvin_io::CDFQCProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPBackgroundZone = {"affx_fusion::CHPBackgroundZone", "affymetrix_calvin_io::CHPBackgroundZone *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPData = {"affx_fusion::CHPData", "affymetrix_calvin_io::CHPData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPExpressionEntry = {"affx_fusion::CHPExpressionEntry", "affymetrix_calvin_io::CHPExpressionEntry *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPFileReader = {"affx_fusion::CHPFileReader", "affymetrix_calvin_io::CHPFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPGenotypeEntry = {"affx_fusion::CHPGenotypeEntry", "affymetrix_calvin_io::CHPGenotypeEntry *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CHPUniversalEntry = {"affx_fusion::CHPUniversalEntry", "affymetrix_calvin_io::CHPUniversalEntry *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CelFileData = {"affx_fusion::CelFileData", "affymetrix_calvin_io::CelFileData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__CelFileReader = {"affx_fusion::CelFileReader", "affymetrix_calvin_io::CelFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__ColumnType = {"affx_fusion::ColumnType", "affymetrix_calvin_io::ColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataGroup = {"affx_fusion::DataGroup", "affymetrix_calvin_io::DataGroup *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataGroupHeader = {"affx_fusion::DataGroupHeader", "affymetrix_calvin_io::DataGroupHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataGroupHeaderReader = {"affx_fusion::DataGroupHeaderReader", "affymetrix_calvin_io::DataGroupHeaderReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataGroupReader = {"affx_fusion::DataGroupReader", "affymetrix_calvin_io::DataGroupReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataSet = {"affx_fusion::DataSet", "affymetrix_calvin_io::DataSet *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataSetHeader = {"affx_fusion::DataSetHeader", "affymetrix_calvin_io::DataSetHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataSetHeaderReader = {"affx_fusion::DataSetHeaderReader", "affymetrix_calvin_io::DataSetHeaderReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__DataSetReader = {"affx_fusion::DataSetReader", "affymetrix_calvin_io::DataSetReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__FileHeader = {"affx_fusion::FileHeader", "affymetrix_calvin_io::FileHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__FileHeaderReader = {"affx_fusion::FileHeaderReader", "affymetrix_calvin_io::FileHeaderReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__FileInput = {"affx_fusion::FileInput", "affymetrix_calvin_io::FileInput *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__FloatColumnType = {"affx_fusion::FloatColumnType", "affymetrix_calvin_io::FloatColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__GenericData = {"affx_fusion::GenericData", "affymetrix_calvin_io::GenericData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__GenericDataHeader = {"affx_fusion::GenericDataHeader", "affymetrix_calvin_io::GenericDataHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__GenericDataHeaderReader = {"affx_fusion::GenericDataHeaderReader", "affymetrix_calvin_io::GenericDataHeaderReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__GenericFileReader = {"affx_fusion::GenericFileReader", "affymetrix_calvin_io::GenericFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__GridControlFileReader = {"affx_fusion::GridControlFileReader", "affymetrix_calvin_io::GridControlFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__IntColumnType = {"affx_fusion::IntColumnType", "affymetrix_calvin_io::IntColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__ShortColumnType = {"affx_fusion::ShortColumnType", "affymetrix_calvin_io::ShortColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__TemplateFileReader = {"affx_fusion::TemplateFileReader", "affymetrix_calvin_io::TemplateFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__TextFileReader = {"affx_fusion::TextFileReader", "affymetrix_calvin_io::TextFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__UByteColumnType = {"affx_fusion::UByteColumnType", "affymetrix_calvin_io::UByteColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__UIntColumnType = {"affx_fusion::UIntColumnType", "affymetrix_calvin_io::UIntColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__UShortColumnType = {"affx_fusion::UShortColumnType", "affymetrix_calvin_io::UShortColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__UnicodeColumnType = {"affx_fusion::UnicodeColumnType", "affymetrix_calvin_io::UnicodeColumnType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_io__XYCoord = {"affx_fusion::XYCoord", "affymetrix_calvin_io::XYCoord *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter__MIMEValue = {"affx_fusion::MIMEValue", "affymetrix_calvin_parameter::MIMEValue *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter__ParameterNameValueType = {"affx_fusion::ParameterNameValueType", "affymetrix_calvin_parameter::ParameterNameValueType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter___ParameterDataValue = {"affx_fusion::ParameterDataValue", "affymetrix_calvin_parameter::_ParameterDataValue *|affymetrix_calvin_parameter::ParameterDataValue *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary = {"affx_fusion::ParameterNameValueControlVocabulary", "affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary *|affymetrix_calvin_parameter::ParameterNameValueControlVocabulary *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter___tagParameterNameValuePair = {"affx_fusion::ParameterNameValuePair", "affymetrix_calvin_parameter::_tagParameterNameValuePair *|affymetrix_calvin_parameter::ParameterNameValuePair *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_parameter___tagParameterValue = {"affx_fusion::ParameterValue", "affymetrix_calvin_parameter::_tagParameterValue *|affymetrix_calvin_parameter::ParameterValue *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__AffymetrixGuid = {"affx_fusion::AffymetrixGuid", "affymetrix_calvin_utilities::AffymetrixGuid *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__CheckSum = {"affx_fusion::CheckSum", "affymetrix_calvin_utilities::CheckSum *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__DateTime = {"affx_fusion::DateTime", "affymetrix_calvin_utilities::DateTime *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__FPoint = {"affx_fusion::FPoint", "affymetrix_calvin_utilities::FPoint *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__FRect = {"affx_fusion::FRect", "affymetrix_calvin_utilities::FRect *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__FRegion = {"affx_fusion::FRegion", "affymetrix_calvin_utilities::FRegion *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__FileUtils = {"affx_fusion::FileUtils", "affymetrix_calvin_utilities::FileUtils *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__Point = {"affx_fusion::Point", "affymetrix_calvin_utilities::Point *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__PointU16_t = {"affx_fusion::PointU16_t", "affymetrix_calvin_utilities::PointU16_t *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__Rect = {"affx_fusion::Rect", "affymetrix_calvin_utilities::Rect *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__Region = {"affx_fusion::Region", "affymetrix_calvin_utilities::Region *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__StringUtils = {"affx_fusion::StringUtils", "affymetrix_calvin_utilities::StringUtils *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_calvin_utilities__Subgrid = {"affx_fusion::Subgrid", "affymetrix_calvin_utilities::Subgrid *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_dttarray__DttArrayData = {"affx_fusion::DttArrayData", "affymetrix_dttarray::DttArrayData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_dttarray__DttArrayFileReader = {"affx_fusion::DttArrayFileReader", "affymetrix_dttarray::DttArrayFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_dttarray___AttributeNameValueType = {"affx_fusion::AttributeNameValueType", "affymetrix_dttarray::_AttributeNameValueType *|affymetrix_dttarray::AttributeNameValueType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionArrayFileReader = {"affx_fusion::FusionArrayFileReader", "affymetrix_fusion_io::FusionArrayFileReader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFData = {"affx_fusion::FusionCDFData", "affymetrix_fusion_io::FusionCDFData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFFileHeader = {"affx_fusion::FusionCDFFileHeader", "affymetrix_fusion_io::FusionCDFFileHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFProbeGroupInformation = {"affx_fusion::FusionCDFProbeGroupInformation", "affymetrix_fusion_io::FusionCDFProbeGroupInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFProbeInformation = {"affx_fusion::FusionCDFProbeInformation", "affymetrix_fusion_io::FusionCDFProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFProbeSetInformation = {"affx_fusion::FusionCDFProbeSetInformation", "affymetrix_fusion_io::FusionCDFProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFQCProbeInformation = {"affx_fusion::FusionCDFQCProbeInformation", "affymetrix_fusion_io::FusionCDFQCProbeInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation = {"affx_fusion::FusionCDFQCProbeSetInformation", "affymetrix_fusion_io::FusionCDFQCProbeSetInformation *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetNames = {"affx_fusion::FusionCDFQCProbeSetNames", "affymetrix_fusion_io::FusionCDFQCProbeSetNames *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCELData = {"affx_fusion::FusionCELData", "affymetrix_fusion_io::FusionCELData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCELFileEntryType = {"affx_fusion::FusionCELFileEntryType", "affymetrix_fusion_io::FusionCELFileEntryType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCHPData = {"affx_fusion::FusionCHPData", "affymetrix_fusion_io::FusionCHPData *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionCHPHeader = {"affx_fusion::FusionCHPHeader", "affymetrix_fusion_io::FusionCHPHeader *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionExpressionProbeSetResults = {"affx_fusion::FusionExpressionProbeSetResults", "affymetrix_fusion_io::FusionExpressionProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults = {"affx_fusion::FusionGenotypeProbeSetResults", "affymetrix_fusion_io::FusionGenotypeProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionProbeSetResults = {"affx_fusion::FusionProbeSetResults", "affymetrix_fusion_io::FusionProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionTagValuePairType = {"affx_fusion::FusionTagValuePairType", "affymetrix_fusion_io::FusionTagValuePairType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__FusionUniversalProbeSetResults = {"affx_fusion::FusionUniversalProbeSetResults", "affymetrix_fusion_io::FusionUniversalProbeSetResults *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__IFusionCELDataAdapter = {"affx_fusion::IFusionCELDataAdapter", "affymetrix_fusion_io::IFusionCELDataAdapter *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__IFusionCHPDataAdapter = {"affx_fusion::IFusionCHPDataAdapter", "affymetrix_fusion_io::IFusionCHPDataAdapter *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io__IFusionCHPHeaderAdapter = {"affx_fusion::IFusionCHPHeaderAdapter", "affymetrix_fusion_io::IFusionCHPHeaderAdapter *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_fusion_io___AssayType = {"_p_affymetrix_fusion_io___AssayType", "enum affymetrix_fusion_io::_AssayType *|affymetrix_fusion_io::AssayType *", 0, 0, 0};
static swig_type_info _swigt__p_affymetrix_grid_control__GridControlData = {"_p_affymetrix_grid_control__GridControlData", "affymetrix_grid_control::GridControlData *", 0, 0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|int64_t *", 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, 0};
static swig_type_info _swigt__p_std__ifstream = {"_p_std__ifstream", "std::ifstream *", 0, 0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, 0};
static swig_type_info _swigt__p_std__listT_TagValuePairType_t = {"_p_std__listT_TagValuePairType_t", "std::list<_TagValuePairType > *|TagValuePairTypeList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffxchp___BackgroundZoneType_t = {"_p_std__listTaffxchp___BackgroundZoneType_t", "std::list<affxchp::_BackgroundZoneType > *|affxchp::BackgroundZoneTypeList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffxmsk___ProbeSetIndiciesType_t = {"_p_std__listTaffxmsk___ProbeSetIndiciesType_t", "std::list<affxmsk::_ProbeSetIndiciesType > *|affxmsk::ProbeSetIndiciesList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t = {"_p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t", "std::list<affymetrix_calvin_array::ArrayAuditEntry > *|affymetrix_calvin_array::ArrayAuditEntryList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t = {"_p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t", "std::list<affymetrix_calvin_parameter::ParameterNameValueType > *|affymetrix_calvin_parameter::ParameterNameValueTypeList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t = {"_p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t", "std::list<affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary > *|affymetrix_calvin_parameter::ParameterNameValueControlVocabularyList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t = {"_p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t", "std::list<affymetrix_calvin_parameter::_tagParameterNameValuePair > *|affymetrix_calvin_parameter::ParameterNameValuePairList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_dttarray___AttributeNameValueType_t = {"_p_std__listTaffymetrix_dttarray___AttributeNameValueType_t", "std::list<affymetrix_dttarray::_AttributeNameValueType > *|affymetrix_dttarray::AttributeNameValueTypeList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t = {"_p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t", "std::list<affymetrix_fusion_io::FusionTagValuePairType > *|affymetrix_fusion_io::FusionTagValuePairTypeList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTbool_t = {"_p_std__listTbool_t", "std::list<bool > *|BoolList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTbool_t__const_iterator = {"_p_std__listTbool_t__const_iterator", "std::list<bool >::const_iterator *|BoolListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTbool_t__iterator = {"_p_std__listTbool_t__iterator", "std::list<bool >::iterator *|BoolListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTchar_t = {"_p_std__listTchar_t", "std::list<char > *|Int8List *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTfloat_t = {"_p_std__listTfloat_t", "std::list<float > *|FloatList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTfloat_t__const_iterator = {"_p_std__listTfloat_t__const_iterator", "std::list<float >::const_iterator *|FloatListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTfloat_t__iterator = {"_p_std__listTfloat_t__iterator", "std::list<float >::iterator *|FloatListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint16_t_t__const_iterator = {"_p_std__listTint16_t_t__const_iterator", "std::list<int16_t >::const_iterator *|Int16ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint16_t_t__iterator = {"_p_std__listTint16_t_t__iterator", "std::list<int16_t >::iterator *|Int16ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint32_t_t__const_iterator = {"_p_std__listTint32_t_t__const_iterator", "std::list<int32_t >::const_iterator *|Int32ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint32_t_t__iterator = {"_p_std__listTint32_t_t__iterator", "std::list<int32_t >::iterator *|Int32ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint8_t_t__const_iterator = {"_p_std__listTint8_t_t__const_iterator", "std::list<int8_t >::const_iterator *|Int8ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint8_t_t__iterator = {"_p_std__listTint8_t_t__iterator", "std::list<int8_t >::iterator *|Int8ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTint_t = {"_p_std__listTint_t", "std::list<int > *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTshort_t = {"_p_std__listTshort_t", "std::list<short > *|Int16List *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTstd__string_t = {"_p_std__listTstd__string_t", "std::list<std::string > *|affxmsk::ProbeSetList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTstd__wstring_t = {"_p_std__listTstd__wstring_t", "std::list<std::wstring > *|WStringList *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTstd__wstring_t__const_iterator = {"_p_std__listTstd__wstring_t__const_iterator", "std::list<std::wstring >::const_iterator *|WStringListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTstd__wstring_t__iterator = {"_p_std__listTstd__wstring_t__iterator", "std::list<std::wstring >::iterator *|WStringListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int16_t_t__const_iterator = {"_p_std__listTu_int16_t_t__const_iterator", "std::list<u_int16_t >::const_iterator *|Uint16ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int16_t_t__iterator = {"_p_std__listTu_int16_t_t__iterator", "std::list<u_int16_t >::iterator *|Uint16ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int32_t_t__const_iterator = {"_p_std__listTu_int32_t_t__const_iterator", "std::list<u_int32_t >::const_iterator *|Uint32ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int32_t_t__iterator = {"_p_std__listTu_int32_t_t__iterator", "std::list<u_int32_t >::iterator *|Uint32ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int64_t_t__const_iterator = {"_p_std__listTu_int64_t_t__const_iterator", "std::list<u_int64_t >::const_iterator *|Uint64ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int64_t_t__iterator = {"_p_std__listTu_int64_t_t__iterator", "std::list<u_int64_t >::iterator *|Uint64ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int8_t_t__const_iterator = {"_p_std__listTu_int8_t_t__const_iterator", "std::list<u_int8_t >::const_iterator *|Uint8ListConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTu_int8_t_t__iterator = {"_p_std__listTu_int8_t_t__iterator", "std::list<u_int8_t >::iterator *|Uint8ListIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTunsigned_char_t = {"_p_std__listTunsigned_char_t", "std::list<unsigned char > *|Uint8List *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTunsigned_int_t = {"_p_std__listTunsigned_int_t", "std::list<unsigned int > *|Uint32List *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTunsigned_long_long_t = {"_p_std__listTunsigned_long_long_t", "std::list<unsigned long long > *|Uin64List *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTunsigned_short_t = {"_p_std__listTunsigned_short_t", "std::list<unsigned short > *|Uint16List *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTstd__string_std__string_t = {"_p_std__mapTstd__string_std__string_t", "std::map<std::string,std::string > *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorT_TagValuePairType_t = {"_p_std__vectorT_TagValuePairType_t", "std::vector<_TagValuePairType > *|TagValuePairTypeVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t = {"_p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t", "std::vector<enum affxbar::_GDACFILES_BAR_DATA_TYPE > *|affxbar::GDACFILES_BAR_DATA_TYPE_VECTOR *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffxchp___BaseCallType_t = {"_p_std__vectorTaffxchp___BaseCallType_t", "std::vector<affxchp::_BaseCallType > *|std::vector<affxchp::BaseCallType > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffxchp___ForceCallType_t = {"_p_std__vectorTaffxchp___ForceCallType_t", "std::vector<affxchp::_ForceCallType > *|std::vector<affxchp::ForceCallType > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffxpsi___ProbeSetInfo_t = {"_p_std__vectorTaffxpsi___ProbeSetInfo_t", "std::vector<affxpsi::_ProbeSetInfo > *|affxpsi::ProbeSetInfoVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t = {"_p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t", "std::vector<affymetrix_calvin_array::ArrayAttributes > *|affymetrix_calvin_array::ArrayAttributesVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t = {"_p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t", "std::vector<affymetrix_calvin_array::ArrayAuditEntry > *|affymetrix_calvin_array::ArrayAuditEntryVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t = {"_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t", "std::vector<affymetrix_calvin_io::CHPBackgroundZone > *|affymetrix_calvin_io::CHPBackgroundZoneVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator", "std::vector<affymetrix_calvin_io::CHPBackgroundZone >::iterator *|affymetrix_calvin_io::CHPBackgroundZoneVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t = {"_p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t", "std::vector<affymetrix_calvin_io::CHPExpressionEntry > *|affymetrix_calvin_io::CHPExpressionEntryVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator", "std::vector<affymetrix_calvin_io::CHPExpressionEntry >::iterator *|affymetrix_calvin_io::CHPExpressionEntryVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t = {"_p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t", "std::vector<affymetrix_calvin_io::CHPGenotypeEntry > *|affymetrix_calvin_io::CHPGenotypeEntryVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator", "std::vector<affymetrix_calvin_io::CHPGenotypeEntry >::iterator *|affymetrix_calvin_io::CHPGenotypeEntryVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t = {"_p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t", "std::vector<affymetrix_calvin_io::CHPUniversalEntry > *|affymetrix_calvin_io::CHPUniversalEntryVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator", "std::vector<affymetrix_calvin_io::CHPUniversalEntry >::iterator *|affymetrix_calvin_io::CHPUniversalEntryVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t = {"_p_std__vectorTaffymetrix_calvin_io__ColumnType_t", "std::vector<affymetrix_calvin_io::ColumnType > *|affymetrix_calvin_io::ColTypeVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator = {"_p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator", "std::vector<affymetrix_calvin_io::ColumnType >::const_iterator *|affymetrix_calvin_io::ColTypeConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t = {"_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t", "std::vector<affymetrix_calvin_io::DataGroupHeader > *|affymetrix_calvin_io::DataGroupHdrVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator = {"_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator", "std::vector<affymetrix_calvin_io::DataGroupHeader >::const_iterator *|affymetrix_calvin_io::DataGroupHdrConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator", "std::vector<affymetrix_calvin_io::DataGroupHeader >::iterator *|affymetrix_calvin_io::DataGroupHdrIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t = {"_p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t", "std::vector<affymetrix_calvin_io::DataGroupReader > *|affymetrix_calvin_io::DataGroupReaderVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator", "std::vector<affymetrix_calvin_io::DataGroupReader >::iterator *|affymetrix_calvin_io::DataGroupReaderIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t = {"_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t", "std::vector<affymetrix_calvin_io::DataSetHeader > *|affymetrix_calvin_io::DataSetHdrVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator", "std::vector<affymetrix_calvin_io::DataSetHeader >::iterator *|affymetrix_calvin_io::DataSetHdrIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t = {"_p_std__vectorTaffymetrix_calvin_io__DataSetReader_t", "std::vector<affymetrix_calvin_io::DataSetReader > *|affymetrix_calvin_io::DataSetReaderVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator", "std::vector<affymetrix_calvin_io::DataSetReader >::iterator *|affymetrix_calvin_io::DataSetReaderIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t = {"_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t", "std::vector<affymetrix_calvin_io::GenericDataHeader > *|affymetrix_calvin_io::GenDataHdrVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator", "std::vector<affymetrix_calvin_io::GenericDataHeader >::iterator *|affymetrix_calvin_io::GenDataHdrVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t = {"_p_std__vectorTaffymetrix_calvin_io__XYCoord_t", "std::vector<affymetrix_calvin_io::XYCoord > *|affymetrix_calvin_io::XYCoordVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator = {"_p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator", "std::vector<affymetrix_calvin_io::XYCoord >::const_iterator *|affymetrix_calvin_io::XYCoordConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator = {"_p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator", "std::vector<affymetrix_calvin_io::XYCoord >::iterator *|affymetrix_calvin_io::XYCoordIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t = {"_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t", "std::vector<affymetrix_calvin_parameter::ParameterNameValueType > *|affymetrix_calvin_parameter::ParameterNameValueTypeVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator = {"_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator", "std::vector<affymetrix_calvin_parameter::ParameterNameValueType >::const_iterator *|affymetrix_calvin_parameter::ParameterNameValueTypeConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator = {"_p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator", "std::vector<affymetrix_calvin_parameter::ParameterNameValueType >::iterator *|affymetrix_calvin_parameter::ParameterNameValueTypeIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t = {"_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t", "std::vector<affymetrix_calvin_parameter::_tagParameterNameValueControlVocabulary > *|affymetrix_calvin_parameter::ParameterNameValueControlVocabularyVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t = {"_p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t", "std::vector<affymetrix_calvin_parameter::_tagParameterNameValuePair > *|affymetrix_calvin_parameter::ParameterNameValuePairVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_utilities__FPoint_t = {"_p_std__vectorTaffymetrix_calvin_utilities__FPoint_t", "std::vector<affymetrix_calvin_utilities::FPoint > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_utilities__FRegion_t = {"_p_std__vectorTaffymetrix_calvin_utilities__FRegion_t", "std::vector<affymetrix_calvin_utilities::FRegion > *|affymetrix_calvin_utilities::FRegionVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_utilities__Point_t = {"_p_std__vectorTaffymetrix_calvin_utilities__Point_t", "std::vector<affymetrix_calvin_utilities::Point > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_utilities__Region_t = {"_p_std__vectorTaffymetrix_calvin_utilities__Region_t", "std::vector<affymetrix_calvin_utilities::Region > *|affymetrix_calvin_utilities::RegionVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t = {"_p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t", "std::vector<affymetrix_calvin_utilities::Subgrid > *|affymetrix_calvin_utilities::SubgridVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTbool_t = {"_p_std__vectorTbool_t", "std::vector<bool > *|BoolVector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTbool_t__const_iterator = {"_p_std__vectorTbool_t__const_iterator", "std::vector<bool >::const_iterator *|BoolVectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTbool_t__iterator = {"_p_std__vectorTbool_t__iterator", "std::vector<bool >::iterator *|BoolVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTchar_t = {"_p_std__vectorTchar_t", "std::vector<char > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTfloat_t = {"_p_std__vectorTfloat_t", "std::vector<float > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTfloat_t__const_iterator = {"_p_std__vectorTfloat_t__const_iterator", "std::vector<float >::const_iterator *|FloatVectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTfloat_t__iterator = {"_p_std__vectorTfloat_t__iterator", "std::vector<float >::iterator *|FloatVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint16_t_t__const_iterator = {"_p_std__vectorTint16_t_t__const_iterator", "std::vector<int16_t >::const_iterator *|Int16VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint16_t_t__iterator = {"_p_std__vectorTint16_t_t__iterator", "std::vector<int16_t >::iterator *|Int16VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint32_t_t__const_iterator = {"_p_std__vectorTint32_t_t__const_iterator", "std::vector<int32_t >::const_iterator *|Int32VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint32_t_t__iterator = {"_p_std__vectorTint32_t_t__iterator", "std::vector<int32_t >::iterator *|Int32VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint64_t_t__const_iterator = {"_p_std__vectorTint64_t_t__const_iterator", "std::vector<int64_t >::const_iterator *|Int64VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint64_t_t__iterator = {"_p_std__vectorTint64_t_t__iterator", "std::vector<int64_t >::iterator *|Int64VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint8_t_t__const_iterator = {"_p_std__vectorTint8_t_t__const_iterator", "std::vector<int8_t >::const_iterator *|Int8VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint8_t_t__iterator = {"_p_std__vectorTint8_t_t__iterator", "std::vector<int8_t >::iterator *|Int8VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint_t = {"_p_std__vectorTint_t", "std::vector<int > *|Int32Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTlong_long_t = {"_p_std__vectorTlong_long_t", "std::vector<long long > *|Int64Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTshort_t = {"_p_std__vectorTshort_t", "std::vector<short > *|Int16Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_t = {"_p_std__vectorTstd__string_t", "std::vector<std::string > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__wstring_t = {"_p_std__vectorTstd__wstring_t", "std::vector<std::wstring > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__wstring_t__const_iterator = {"_p_std__vectorTstd__wstring_t__const_iterator", "std::vector<std::wstring >::const_iterator *|WStringVectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__wstring_t__iterator = {"_p_std__vectorTstd__wstring_t__iterator", "std::vector<std::wstring >::iterator *|WStringVectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int16_t_t__const_iterator = {"_p_std__vectorTu_int16_t_t__const_iterator", "std::vector<u_int16_t >::const_iterator *|Uint16VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int16_t_t__iterator = {"_p_std__vectorTu_int16_t_t__iterator", "std::vector<u_int16_t >::iterator *|Uint16VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int32_t_t__const_iterator = {"_p_std__vectorTu_int32_t_t__const_iterator", "std::vector<u_int32_t >::const_iterator *|Uint32VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int32_t_t__iterator = {"_p_std__vectorTu_int32_t_t__iterator", "std::vector<u_int32_t >::iterator *|Uint32VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int64_t_t__const_iterator = {"_p_std__vectorTu_int64_t_t__const_iterator", "std::vector<u_int64_t >::const_iterator *|Uint64VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int64_t_t__iterator = {"_p_std__vectorTu_int64_t_t__iterator", "std::vector<u_int64_t >::iterator *|Uint64VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int8_t_t__const_iterator = {"_p_std__vectorTu_int8_t_t__const_iterator", "std::vector<u_int8_t >::const_iterator *|Uint8VectorConstIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTu_int8_t_t__iterator = {"_p_std__vectorTu_int8_t_t__iterator", "std::vector<u_int8_t >::iterator *|Uint8VectorIt *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_char_t = {"_p_std__vectorTunsigned_char_t", "std::vector<unsigned char > *|Uint8Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_int_t = {"_p_std__vectorTunsigned_int_t", "std::vector<unsigned int > *|Uint32Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_long_long_t = {"_p_std__vectorTunsigned_long_long_t", "std::vector<unsigned long long > *|Uint64Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_short_t = {"_p_std__vectorTunsigned_short_t", "std::vector<unsigned short > *|Uint16Vector *", 0, 0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|uint32_t *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|uint64_t *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, 0};
static swig_type_info _swigt__p_wstring = {"_p_wstring", "wstring *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FusionCELFileEntryType,
  &_swigt__p_GeneChipAssayType,
  &_swigt__p__CoordinatePoint,
  &_swigt__p__GridCoordinatesType,
  &_swigt__p__TagValuePairType,
  &_swigt__p_affxbar__CBARFileData,
  &_swigt__p_affxbar__CGDACSequenceResultItem,
  &_swigt__p_affxbar___BarSequenceResultData,
  &_swigt__p_affxbar___GDACFILES_BAR_DATA_TYPE,
  &_swigt__p_affxbpmap__CBPMAPFileData,
  &_swigt__p_affxbpmap__CGDACSequenceItem,
  &_swigt__p_affxbpmap___GDACSequenceHitItemType,
  &_swigt__p_affxcdf__CCDFFileData,
  &_swigt__p_affxcdf__CCDFFileHeader,
  &_swigt__p_affxcdf__CCDFProbeGroupInformation,
  &_swigt__p_affxcdf__CCDFProbeInformation,
  &_swigt__p_affxcdf__CCDFProbeSetInformation,
  &_swigt__p_affxcdf__CCDFProbeSetNames,
  &_swigt__p_affxcdf__CCDFQCProbeInformation,
  &_swigt__p_affxcdf__CCDFQCProbeSetInformation,
  &_swigt__p_affxcel__CCELFileData,
  &_swigt__p_affxcel__CCELFileHeaderData,
  &_swigt__p_affxcel___CELFileEntryType,
  &_swigt__p_affxcel___CELFileTranscriptomeEntryType,
  &_swigt__p_affxchp__CCHPFileData,
  &_swigt__p_affxchp__CCHPFileHeader,
  &_swigt__p_affxchp__CExpressionProbeSetResults,
  &_swigt__p_affxchp__CGenotypeProbeSetResults,
  &_swigt__p_affxchp__CProbeSetResults,
  &_swigt__p_affxchp__CResequencingResults,
  &_swigt__p_affxchp__CUniversalProbeSetResults,
  &_swigt__p_affxchp___BackgroundZoneInfo,
  &_swigt__p_affxchp___BackgroundZoneType,
  &_swigt__p_affxchp___BaseCallType,
  &_swigt__p_affxchp___ForceCallType,
  &_swigt__p_affxexp__CEXPFileData,
  &_swigt__p_affxgrc__CGRCFileData,
  &_swigt__p_affxmsk__CMSKFileData,
  &_swigt__p_affxmsk__ProbeSetIndiciesList__const_iterator,
  &_swigt__p_affxmsk__ProbeSetList__const_iterator,
  &_swigt__p_affxmsk___ProbeSetIndiciesType,
  &_swigt__p_affxpsi__CPSIFileData,
  &_swigt__p_affxpsi___ProbeSetInfo,
  &_swigt__p_affymetrix_calvin_array__ArrayAttributes,
  &_swigt__p_affymetrix_calvin_array__ArrayAuditEntry,
  &_swigt__p_affymetrix_calvin_array__ArrayData,
  &_swigt__p_affymetrix_calvin_array__TemplateData,
  &_swigt__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException,
  &_swigt__p_affymetrix_calvin_exceptions__CalvinException,
  &_swigt__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException,
  &_swigt__p_affymetrix_calvin_exceptions__DataGroupNotFoundException,
  &_swigt__p_affymetrix_calvin_exceptions__DataSetNotFoundException,
  &_swigt__p_affymetrix_calvin_exceptions__DataSetNotOpenException,
  &_swigt__p_affymetrix_calvin_exceptions__FileNotFoundException,
  &_swigt__p_affymetrix_calvin_exceptions__FileNotOpenException,
  &_swigt__p_affymetrix_calvin_exceptions__FormatException,
  &_swigt__p_affymetrix_calvin_exceptions__InvalidFileTypeException,
  &_swigt__p_affymetrix_calvin_exceptions__InvalidVersionException,
  &_swigt__p_affymetrix_calvin_exceptions__NotImplementedException,
  &_swigt__p_affymetrix_calvin_exceptions__OutOfRangeParameterException,
  &_swigt__p_affymetrix_calvin_exceptions__ParameterMismatchException,
  &_swigt__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException,
  &_swigt__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException,
  &_swigt__p_affymetrix_calvin_exceptions__UnableToOpenFileException,
  &_swigt__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException,
  &_swigt__p_affymetrix_calvin_exceptions__UnexpectedParameterException,
  &_swigt__p_affymetrix_calvin_io__ASCIIColumnType,
  &_swigt__p_affymetrix_calvin_io__ArrayFileReader,
  &_swigt__p_affymetrix_calvin_io__AuditFileReader,
  &_swigt__p_affymetrix_calvin_io__ByteColumnType,
  &_swigt__p_affymetrix_calvin_io__CDFData,
  &_swigt__p_affymetrix_calvin_io__CDFFileReader,
  &_swigt__p_affymetrix_calvin_io__CDFProbeGroupInformation,
  &_swigt__p_affymetrix_calvin_io__CDFProbeInformation,
  &_swigt__p_affymetrix_calvin_io__CDFProbeSetInformation,
  &_swigt__p_affymetrix_calvin_io__CDFQCProbeInformation,
  &_swigt__p_affymetrix_calvin_io__CDFQCProbeSetInformation,
  &_swigt__p_affymetrix_calvin_io__CHPBackgroundZone,
  &_swigt__p_affymetrix_calvin_io__CHPData,
  &_swigt__p_affymetrix_calvin_io__CHPExpressionEntry,
  &_swigt__p_affymetrix_calvin_io__CHPFileReader,
  &_swigt__p_affymetrix_calvin_io__CHPGenotypeEntry,
  &_swigt__p_affymetrix_calvin_io__CHPUniversalEntry,
  &_swigt__p_affymetrix_calvin_io__CelFileData,
  &_swigt__p_affymetrix_calvin_io__CelFileReader,
  &_swigt__p_affymetrix_calvin_io__ColumnType,
  &_swigt__p_affymetrix_calvin_io__DataGroup,
  &_swigt__p_affymetrix_calvin_io__DataGroupHeader,
  &_swigt__p_affymetrix_calvin_io__DataGroupHeaderReader,
  &_swigt__p_affymetrix_calvin_io__DataGroupReader,
  &_swigt__p_affymetrix_calvin_io__DataSet,
  &_swigt__p_affymetrix_calvin_io__DataSetHeader,
  &_swigt__p_affymetrix_calvin_io__DataSetHeaderReader,
  &_swigt__p_affymetrix_calvin_io__DataSetReader,
  &_swigt__p_affymetrix_calvin_io__FileHeader,
  &_swigt__p_affymetrix_calvin_io__FileHeaderReader,
  &_swigt__p_affymetrix_calvin_io__FileInput,
  &_swigt__p_affymetrix_calvin_io__FloatColumnType,
  &_swigt__p_affymetrix_calvin_io__GenericData,
  &_swigt__p_affymetrix_calvin_io__GenericDataHeader,
  &_swigt__p_affymetrix_calvin_io__GenericDataHeaderReader,
  &_swigt__p_affymetrix_calvin_io__GenericFileReader,
  &_swigt__p_affymetrix_calvin_io__GridControlFileReader,
  &_swigt__p_affymetrix_calvin_io__IntColumnType,
  &_swigt__p_affymetrix_calvin_io__ShortColumnType,
  &_swigt__p_affymetrix_calvin_io__TemplateFileReader,
  &_swigt__p_affymetrix_calvin_io__TextFileReader,
  &_swigt__p_affymetrix_calvin_io__UByteColumnType,
  &_swigt__p_affymetrix_calvin_io__UIntColumnType,
  &_swigt__p_affymetrix_calvin_io__UShortColumnType,
  &_swigt__p_affymetrix_calvin_io__UnicodeColumnType,
  &_swigt__p_affymetrix_calvin_io__XYCoord,
  &_swigt__p_affymetrix_calvin_parameter__MIMEValue,
  &_swigt__p_affymetrix_calvin_parameter__ParameterNameValueType,
  &_swigt__p_affymetrix_calvin_parameter___ParameterDataValue,
  &_swigt__p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,
  &_swigt__p_affymetrix_calvin_parameter___tagParameterNameValuePair,
  &_swigt__p_affymetrix_calvin_parameter___tagParameterValue,
  &_swigt__p_affymetrix_calvin_utilities__AffymetrixGuid,
  &_swigt__p_affymetrix_calvin_utilities__CheckSum,
  &_swigt__p_affymetrix_calvin_utilities__DateTime,
  &_swigt__p_affymetrix_calvin_utilities__FPoint,
  &_swigt__p_affymetrix_calvin_utilities__FRect,
  &_swigt__p_affymetrix_calvin_utilities__FRegion,
  &_swigt__p_affymetrix_calvin_utilities__FileUtils,
  &_swigt__p_affymetrix_calvin_utilities__Point,
  &_swigt__p_affymetrix_calvin_utilities__PointU16_t,
  &_swigt__p_affymetrix_calvin_utilities__Rect,
  &_swigt__p_affymetrix_calvin_utilities__Region,
  &_swigt__p_affymetrix_calvin_utilities__StringUtils,
  &_swigt__p_affymetrix_calvin_utilities__Subgrid,
  &_swigt__p_affymetrix_dttarray__DttArrayData,
  &_swigt__p_affymetrix_dttarray__DttArrayFileReader,
  &_swigt__p_affymetrix_dttarray___AttributeNameValueType,
  &_swigt__p_affymetrix_fusion_io__FusionArrayFileReader,
  &_swigt__p_affymetrix_fusion_io__FusionCDFData,
  &_swigt__p_affymetrix_fusion_io__FusionCDFFileHeader,
  &_swigt__p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,
  &_swigt__p_affymetrix_fusion_io__FusionCDFProbeInformation,
  &_swigt__p_affymetrix_fusion_io__FusionCDFProbeSetInformation,
  &_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeInformation,
  &_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,
  &_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetNames,
  &_swigt__p_affymetrix_fusion_io__FusionCELData,
  &_swigt__p_affymetrix_fusion_io__FusionCELFileEntryType,
  &_swigt__p_affymetrix_fusion_io__FusionCHPData,
  &_swigt__p_affymetrix_fusion_io__FusionCHPHeader,
  &_swigt__p_affymetrix_fusion_io__FusionExpressionProbeSetResults,
  &_swigt__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,
  &_swigt__p_affymetrix_fusion_io__FusionProbeSetResults,
  &_swigt__p_affymetrix_fusion_io__FusionTagValuePairType,
  &_swigt__p_affymetrix_fusion_io__FusionUniversalProbeSetResults,
  &_swigt__p_affymetrix_fusion_io__IFusionCELDataAdapter,
  &_swigt__p_affymetrix_fusion_io__IFusionCHPDataAdapter,
  &_swigt__p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,
  &_swigt__p_affymetrix_fusion_io___AssayType,
  &_swigt__p_affymetrix_grid_control__GridControlData,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_std__ifstream,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_TagValuePairType_t,
  &_swigt__p_std__listTaffxchp___BackgroundZoneType_t,
  &_swigt__p_std__listTaffxmsk___ProbeSetIndiciesType_t,
  &_swigt__p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t,
  &_swigt__p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t,
  &_swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t,
  &_swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t,
  &_swigt__p_std__listTaffymetrix_dttarray___AttributeNameValueType_t,
  &_swigt__p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,
  &_swigt__p_std__listTbool_t,
  &_swigt__p_std__listTbool_t__const_iterator,
  &_swigt__p_std__listTbool_t__iterator,
  &_swigt__p_std__listTchar_t,
  &_swigt__p_std__listTfloat_t,
  &_swigt__p_std__listTfloat_t__const_iterator,
  &_swigt__p_std__listTfloat_t__iterator,
  &_swigt__p_std__listTint16_t_t__const_iterator,
  &_swigt__p_std__listTint16_t_t__iterator,
  &_swigt__p_std__listTint32_t_t__const_iterator,
  &_swigt__p_std__listTint32_t_t__iterator,
  &_swigt__p_std__listTint8_t_t__const_iterator,
  &_swigt__p_std__listTint8_t_t__iterator,
  &_swigt__p_std__listTint_t,
  &_swigt__p_std__listTshort_t,
  &_swigt__p_std__listTstd__string_t,
  &_swigt__p_std__listTstd__wstring_t,
  &_swigt__p_std__listTstd__wstring_t__const_iterator,
  &_swigt__p_std__listTstd__wstring_t__iterator,
  &_swigt__p_std__listTu_int16_t_t__const_iterator,
  &_swigt__p_std__listTu_int16_t_t__iterator,
  &_swigt__p_std__listTu_int32_t_t__const_iterator,
  &_swigt__p_std__listTu_int32_t_t__iterator,
  &_swigt__p_std__listTu_int64_t_t__const_iterator,
  &_swigt__p_std__listTu_int64_t_t__iterator,
  &_swigt__p_std__listTu_int8_t_t__const_iterator,
  &_swigt__p_std__listTu_int8_t_t__iterator,
  &_swigt__p_std__listTunsigned_char_t,
  &_swigt__p_std__listTunsigned_int_t,
  &_swigt__p_std__listTunsigned_long_long_t,
  &_swigt__p_std__listTunsigned_short_t,
  &_swigt__p_std__mapTstd__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_TagValuePairType_t,
  &_swigt__p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t,
  &_swigt__p_std__vectorTaffxchp___BaseCallType_t,
  &_swigt__p_std__vectorTaffxchp___ForceCallType_t,
  &_swigt__p_std__vectorTaffxpsi___ProbeSetInfo_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator,
  &_swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_utilities__FPoint_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_utilities__FRegion_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_utilities__Point_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_utilities__Region_t,
  &_swigt__p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t,
  &_swigt__p_std__vectorTbool_t,
  &_swigt__p_std__vectorTbool_t__const_iterator,
  &_swigt__p_std__vectorTbool_t__iterator,
  &_swigt__p_std__vectorTchar_t,
  &_swigt__p_std__vectorTfloat_t,
  &_swigt__p_std__vectorTfloat_t__const_iterator,
  &_swigt__p_std__vectorTfloat_t__iterator,
  &_swigt__p_std__vectorTint16_t_t__const_iterator,
  &_swigt__p_std__vectorTint16_t_t__iterator,
  &_swigt__p_std__vectorTint32_t_t__const_iterator,
  &_swigt__p_std__vectorTint32_t_t__iterator,
  &_swigt__p_std__vectorTint64_t_t__const_iterator,
  &_swigt__p_std__vectorTint64_t_t__iterator,
  &_swigt__p_std__vectorTint8_t_t__const_iterator,
  &_swigt__p_std__vectorTint8_t_t__iterator,
  &_swigt__p_std__vectorTint_t,
  &_swigt__p_std__vectorTlong_long_t,
  &_swigt__p_std__vectorTshort_t,
  &_swigt__p_std__vectorTstd__string_t,
  &_swigt__p_std__vectorTstd__wstring_t,
  &_swigt__p_std__vectorTstd__wstring_t__const_iterator,
  &_swigt__p_std__vectorTstd__wstring_t__iterator,
  &_swigt__p_std__vectorTu_int16_t_t__const_iterator,
  &_swigt__p_std__vectorTu_int16_t_t__iterator,
  &_swigt__p_std__vectorTu_int32_t_t__const_iterator,
  &_swigt__p_std__vectorTu_int32_t_t__iterator,
  &_swigt__p_std__vectorTu_int64_t_t__const_iterator,
  &_swigt__p_std__vectorTu_int64_t_t__iterator,
  &_swigt__p_std__vectorTu_int8_t_t__const_iterator,
  &_swigt__p_std__vectorTu_int8_t_t__iterator,
  &_swigt__p_std__vectorTunsigned_char_t,
  &_swigt__p_std__vectorTunsigned_int_t,
  &_swigt__p_std__vectorTunsigned_long_long_t,
  &_swigt__p_std__vectorTunsigned_short_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
  &_swigt__p_wstring,
};

static swig_cast_info _swigc__p_FusionCELFileEntryType[] = {  {&_swigt__p_FusionCELFileEntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeneChipAssayType[] = {  {&_swigt__p_GeneChipAssayType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CoordinatePoint[] = {  {&_swigt__p__CoordinatePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__GridCoordinatesType[] = {  {&_swigt__p__GridCoordinatesType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__TagValuePairType[] = {  {&_swigt__p__TagValuePairType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbar__CBARFileData[] = {  {&_swigt__p_affxbar__CBARFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbar__CGDACSequenceResultItem[] = {  {&_swigt__p_affxbar__CGDACSequenceResultItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbar___BarSequenceResultData[] = {  {&_swigt__p_affxbar___BarSequenceResultData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbar___GDACFILES_BAR_DATA_TYPE[] = {  {&_swigt__p_affxbar___GDACFILES_BAR_DATA_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbpmap__CBPMAPFileData[] = {  {&_swigt__p_affxbpmap__CBPMAPFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbpmap__CGDACSequenceItem[] = {  {&_swigt__p_affxbpmap__CGDACSequenceItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxbpmap___GDACSequenceHitItemType[] = {  {&_swigt__p_affxbpmap___GDACSequenceHitItemType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFFileData[] = {  {&_swigt__p_affxcdf__CCDFFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFFileHeader[] = {  {&_swigt__p_affxcdf__CCDFFileHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFProbeGroupInformation[] = {  {&_swigt__p_affxcdf__CCDFProbeGroupInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFProbeInformation[] = {  {&_swigt__p_affxcdf__CCDFProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFProbeSetInformation[] = {  {&_swigt__p_affxcdf__CCDFProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFProbeSetNames[] = {  {&_swigt__p_affxcdf__CCDFProbeSetNames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFQCProbeInformation[] = {  {&_swigt__p_affxcdf__CCDFQCProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcdf__CCDFQCProbeSetInformation[] = {  {&_swigt__p_affxcdf__CCDFQCProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcel__CCELFileData[] = {  {&_swigt__p_affxcel__CCELFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcel__CCELFileHeaderData[] = {  {&_swigt__p_affxcel__CCELFileHeaderData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcel___CELFileEntryType[] = {  {&_swigt__p_affxcel___CELFileEntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxcel___CELFileTranscriptomeEntryType[] = {  {&_swigt__p_affxcel___CELFileTranscriptomeEntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CCHPFileData[] = {  {&_swigt__p_affxchp__CCHPFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CCHPFileHeader[] = {  {&_swigt__p_affxchp__CCHPFileHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CExpressionProbeSetResults[] = {  {&_swigt__p_affxchp__CExpressionProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CGenotypeProbeSetResults[] = {  {&_swigt__p_affxchp__CGenotypeProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CProbeSetResults[] = {  {&_swigt__p_affxchp__CProbeSetResults, 0, 0, 0},  {&_swigt__p_affxchp__CExpressionProbeSetResults, _p_affxchp__CExpressionProbeSetResultsTo_p_affxchp__CProbeSetResults, 0, 0},  {&_swigt__p_affxchp__CGenotypeProbeSetResults, _p_affxchp__CGenotypeProbeSetResultsTo_p_affxchp__CProbeSetResults, 0, 0},  {&_swigt__p_affxchp__CUniversalProbeSetResults, _p_affxchp__CUniversalProbeSetResultsTo_p_affxchp__CProbeSetResults, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CResequencingResults[] = {  {&_swigt__p_affxchp__CResequencingResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp__CUniversalProbeSetResults[] = {  {&_swigt__p_affxchp__CUniversalProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp___BackgroundZoneInfo[] = {  {&_swigt__p_affxchp___BackgroundZoneInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp___BackgroundZoneType[] = {  {&_swigt__p_affxchp___BackgroundZoneType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp___BaseCallType[] = {  {&_swigt__p_affxchp___BaseCallType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxchp___ForceCallType[] = {  {&_swigt__p_affxchp___ForceCallType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxexp__CEXPFileData[] = {  {&_swigt__p_affxexp__CEXPFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxgrc__CGRCFileData[] = {  {&_swigt__p_affxgrc__CGRCFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxmsk__CMSKFileData[] = {  {&_swigt__p_affxmsk__CMSKFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxmsk__ProbeSetIndiciesList__const_iterator[] = {  {&_swigt__p_affxmsk__ProbeSetIndiciesList__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxmsk__ProbeSetList__const_iterator[] = {  {&_swigt__p_affxmsk__ProbeSetList__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxmsk___ProbeSetIndiciesType[] = {  {&_swigt__p_affxmsk___ProbeSetIndiciesType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxpsi__CPSIFileData[] = {  {&_swigt__p_affxpsi__CPSIFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affxpsi___ProbeSetInfo[] = {  {&_swigt__p_affxpsi___ProbeSetInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_array__ArrayAttributes[] = {  {&_swigt__p_affymetrix_calvin_array__ArrayAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_array__ArrayAuditEntry[] = {  {&_swigt__p_affymetrix_calvin_array__ArrayAuditEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_array__ArrayData[] = {  {&_swigt__p_affymetrix_calvin_array__TemplateData, _p_affymetrix_calvin_array__TemplateDataTo_p_affymetrix_calvin_array__ArrayData, 0, 0},  {&_swigt__p_affymetrix_calvin_array__ArrayData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_array__TemplateData[] = {  {&_swigt__p_affymetrix_calvin_array__TemplateData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__CalvinException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException, _p_affymetrix_calvin_exceptions__UnexpectedColumnTypeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__InvalidFileTypeException, _p_affymetrix_calvin_exceptions__InvalidFileTypeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__NotImplementedException, _p_affymetrix_calvin_exceptions__NotImplementedExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__OutOfRangeParameterException, _p_affymetrix_calvin_exceptions__OutOfRangeParameterExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__UnexpectedParameterException, _p_affymetrix_calvin_exceptions__UnexpectedParameterExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException, _p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__DataSetNotOpenException, _p_affymetrix_calvin_exceptions__DataSetNotOpenExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException, _p_affymetrix_calvin_exceptions__ProbeSetNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__FileNotOpenException, _p_affymetrix_calvin_exceptions__FileNotOpenExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__DataSetNotFoundException, _p_affymetrix_calvin_exceptions__DataSetNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__DataGroupNotFoundException, _p_affymetrix_calvin_exceptions__DataGroupNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException, _p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__FormatException, _p_affymetrix_calvin_exceptions__FormatExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__CalvinException, 0, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__UnableToOpenFileException, _p_affymetrix_calvin_exceptions__UnableToOpenFileExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__InvalidVersionException, _p_affymetrix_calvin_exceptions__InvalidVersionExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__FileNotFoundException, _p_affymetrix_calvin_exceptions__FileNotFoundExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException, _p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},  {&_swigt__p_affymetrix_calvin_exceptions__ParameterMismatchException, _p_affymetrix_calvin_exceptions__ParameterMismatchExceptionTo_p_affymetrix_calvin_exceptions__CalvinException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__DataGroupNotFoundException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__DataGroupNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__DataSetNotFoundException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__DataSetNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__DataSetNotOpenException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__DataSetNotOpenException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__FileNotFoundException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__FileNotOpenException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__FileNotOpenException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__FormatException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__FormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__InvalidFileTypeException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__InvalidFileTypeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__InvalidVersionException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__InvalidVersionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__NotImplementedException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__OutOfRangeParameterException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__OutOfRangeParameterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__ParameterMismatchException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__ParameterMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__UnableToOpenFileException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__UnableToOpenFileException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_exceptions__UnexpectedParameterException[] = {  {&_swigt__p_affymetrix_calvin_exceptions__UnexpectedParameterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__ASCIIColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__ASCIIColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__ArrayFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__ArrayFileReader, 0, 0, 0},  {&_swigt__p_affymetrix_calvin_io__TemplateFileReader, _p_affymetrix_calvin_io__TemplateFileReaderTo_p_affymetrix_calvin_io__ArrayFileReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__AuditFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__AuditFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__ByteColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__ByteColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFData[] = {  {&_swigt__p_affymetrix_calvin_io__CDFData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__CDFFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFProbeGroupInformation[] = {  {&_swigt__p_affymetrix_calvin_io__CDFProbeGroupInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFProbeInformation[] = {  {&_swigt__p_affymetrix_calvin_io__CDFProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFProbeSetInformation[] = {  {&_swigt__p_affymetrix_calvin_io__CDFProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFQCProbeInformation[] = {  {&_swigt__p_affymetrix_calvin_io__CDFQCProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CDFQCProbeSetInformation[] = {  {&_swigt__p_affymetrix_calvin_io__CDFQCProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPBackgroundZone[] = {  {&_swigt__p_affymetrix_calvin_io__CHPBackgroundZone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPData[] = {  {&_swigt__p_affymetrix_calvin_io__CHPData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPExpressionEntry[] = {  {&_swigt__p_affymetrix_calvin_io__CHPExpressionEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__CHPFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPGenotypeEntry[] = {  {&_swigt__p_affymetrix_calvin_io__CHPGenotypeEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CHPUniversalEntry[] = {  {&_swigt__p_affymetrix_calvin_io__CHPUniversalEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CelFileData[] = {  {&_swigt__p_affymetrix_calvin_io__CelFileData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__CelFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__CelFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__ColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__ColumnType, 0, 0, 0},  {&_swigt__p_affymetrix_calvin_io__ByteColumnType, _p_affymetrix_calvin_io__ByteColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__UByteColumnType, _p_affymetrix_calvin_io__UByteColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__ShortColumnType, _p_affymetrix_calvin_io__ShortColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__UShortColumnType, _p_affymetrix_calvin_io__UShortColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__IntColumnType, _p_affymetrix_calvin_io__IntColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__UIntColumnType, _p_affymetrix_calvin_io__UIntColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__FloatColumnType, _p_affymetrix_calvin_io__FloatColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__ASCIIColumnType, _p_affymetrix_calvin_io__ASCIIColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},  {&_swigt__p_affymetrix_calvin_io__UnicodeColumnType, _p_affymetrix_calvin_io__UnicodeColumnTypeTo_p_affymetrix_calvin_io__ColumnType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataGroup[] = {  {&_swigt__p_affymetrix_calvin_io__DataGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataGroupHeader[] = {  {&_swigt__p_affymetrix_calvin_io__DataGroupHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataGroupHeaderReader[] = {  {&_swigt__p_affymetrix_calvin_io__DataGroupHeaderReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataGroupReader[] = {  {&_swigt__p_affymetrix_calvin_io__DataGroupReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataSet[] = {  {&_swigt__p_affymetrix_calvin_io__DataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataSetHeader[] = {  {&_swigt__p_affymetrix_calvin_io__DataSetHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataSetHeaderReader[] = {  {&_swigt__p_affymetrix_calvin_io__DataSetHeaderReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__DataSetReader[] = {  {&_swigt__p_affymetrix_calvin_io__DataSetReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__FileHeader[] = {  {&_swigt__p_affymetrix_calvin_io__FileHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__FileHeaderReader[] = {  {&_swigt__p_affymetrix_calvin_io__FileHeaderReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__FileInput[] = {  {&_swigt__p_affymetrix_calvin_io__FileInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__FloatColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__FloatColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__GenericData[] = {  {&_swigt__p_affymetrix_calvin_io__GenericData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__GenericDataHeader[] = {  {&_swigt__p_affymetrix_calvin_io__GenericDataHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__GenericDataHeaderReader[] = {  {&_swigt__p_affymetrix_calvin_io__GenericDataHeaderReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__GenericFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__GenericFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__GridControlFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__GridControlFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__IntColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__IntColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__ShortColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__ShortColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__TemplateFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__TemplateFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__TextFileReader[] = {  {&_swigt__p_affymetrix_calvin_io__TextFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__UByteColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__UByteColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__UIntColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__UIntColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__UShortColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__UShortColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__UnicodeColumnType[] = {  {&_swigt__p_affymetrix_calvin_io__UnicodeColumnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_io__XYCoord[] = {  {&_swigt__p_affymetrix_calvin_io__XYCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter__MIMEValue[] = {  {&_swigt__p_affymetrix_calvin_parameter__MIMEValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter__ParameterNameValueType[] = {  {&_swigt__p_affymetrix_calvin_parameter__ParameterNameValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter___ParameterDataValue[] = {  {&_swigt__p_affymetrix_calvin_parameter___ParameterDataValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary[] = {  {&_swigt__p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter___tagParameterNameValuePair[] = {  {&_swigt__p_affymetrix_calvin_parameter___tagParameterNameValuePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_parameter___tagParameterValue[] = {  {&_swigt__p_affymetrix_calvin_parameter___tagParameterValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__AffymetrixGuid[] = {  {&_swigt__p_affymetrix_calvin_utilities__AffymetrixGuid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__CheckSum[] = {  {&_swigt__p_affymetrix_calvin_utilities__CheckSum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__DateTime[] = {  {&_swigt__p_affymetrix_calvin_utilities__DateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__FPoint[] = {  {&_swigt__p_affymetrix_calvin_utilities__FPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__FRect[] = {  {&_swigt__p_affymetrix_calvin_utilities__FRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__FRegion[] = {  {&_swigt__p_affymetrix_calvin_utilities__FRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__FileUtils[] = {  {&_swigt__p_affymetrix_calvin_utilities__FileUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__Point[] = {  {&_swigt__p_affymetrix_calvin_utilities__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__PointU16_t[] = {  {&_swigt__p_affymetrix_calvin_utilities__PointU16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__Rect[] = {  {&_swigt__p_affymetrix_calvin_utilities__Rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__Region[] = {  {&_swigt__p_affymetrix_calvin_utilities__Region, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__StringUtils[] = {  {&_swigt__p_affymetrix_calvin_utilities__StringUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_calvin_utilities__Subgrid[] = {  {&_swigt__p_affymetrix_calvin_utilities__Subgrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_dttarray__DttArrayData[] = {  {&_swigt__p_affymetrix_dttarray__DttArrayData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_dttarray__DttArrayFileReader[] = {  {&_swigt__p_affymetrix_dttarray__DttArrayFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_dttarray___AttributeNameValueType[] = {  {&_swigt__p_affymetrix_dttarray___AttributeNameValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionArrayFileReader[] = {  {&_swigt__p_affymetrix_fusion_io__FusionArrayFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFData[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFFileHeader[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFFileHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFProbeGroupInformation[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFProbeGroupInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFProbeInformation[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFProbeSetInformation[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeInformation[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeSetNames[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCDFQCProbeSetNames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCELData[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCELData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCELFileEntryType[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCELFileEntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCHPData[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCHPData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionCHPHeader[] = {  {&_swigt__p_affymetrix_fusion_io__FusionCHPHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionExpressionProbeSetResults[] = {  {&_swigt__p_affymetrix_fusion_io__FusionExpressionProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults[] = {  {&_swigt__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionProbeSetResults[] = {  {&_swigt__p_affymetrix_fusion_io__FusionExpressionProbeSetResults, _p_affymetrix_fusion_io__FusionExpressionProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults, 0, 0},  {&_swigt__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, _p_affymetrix_fusion_io__FusionGenotypeProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults, 0, 0},  {&_swigt__p_affymetrix_fusion_io__FusionProbeSetResults, 0, 0, 0},  {&_swigt__p_affymetrix_fusion_io__FusionUniversalProbeSetResults, _p_affymetrix_fusion_io__FusionUniversalProbeSetResultsTo_p_affymetrix_fusion_io__FusionProbeSetResults, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionTagValuePairType[] = {  {&_swigt__p_affymetrix_fusion_io__FusionTagValuePairType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__FusionUniversalProbeSetResults[] = {  {&_swigt__p_affymetrix_fusion_io__FusionUniversalProbeSetResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__IFusionCELDataAdapter[] = {  {&_swigt__p_affymetrix_fusion_io__IFusionCELDataAdapter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__IFusionCHPDataAdapter[] = {  {&_swigt__p_affymetrix_fusion_io__IFusionCHPDataAdapter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io__IFusionCHPHeaderAdapter[] = {  {&_swigt__p_affymetrix_fusion_io__IFusionCHPHeaderAdapter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_fusion_io___AssayType[] = {  {&_swigt__p_affymetrix_fusion_io___AssayType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_affymetrix_grid_control__GridControlData[] = {  {&_swigt__p_affymetrix_grid_control__GridControlData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ifstream[] = {  {&_swigt__p_std__ifstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_TagValuePairType_t[] = {  {&_swigt__p_std__listT_TagValuePairType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffxchp___BackgroundZoneType_t[] = {  {&_swigt__p_std__listTaffxchp___BackgroundZoneType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffxmsk___ProbeSetIndiciesType_t[] = {  {&_swigt__p_std__listTaffxmsk___ProbeSetIndiciesType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t[] = {  {&_swigt__p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t[] = {  {&_swigt__p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t[] = {  {&_swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t[] = {  {&_swigt__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_dttarray___AttributeNameValueType_t[] = {  {&_swigt__p_std__listTaffymetrix_dttarray___AttributeNameValueType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t[] = {  {&_swigt__p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTbool_t[] = {  {&_swigt__p_std__listTbool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTbool_t__const_iterator[] = {  {&_swigt__p_std__listTbool_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTbool_t__iterator[] = {  {&_swigt__p_std__listTbool_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTchar_t[] = {  {&_swigt__p_std__listTchar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTfloat_t[] = {  {&_swigt__p_std__listTfloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTfloat_t__const_iterator[] = {  {&_swigt__p_std__listTfloat_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTfloat_t__iterator[] = {  {&_swigt__p_std__listTfloat_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint16_t_t__const_iterator[] = {  {&_swigt__p_std__listTint16_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint16_t_t__iterator[] = {  {&_swigt__p_std__listTint16_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint32_t_t__const_iterator[] = {  {&_swigt__p_std__listTint32_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint32_t_t__iterator[] = {  {&_swigt__p_std__listTint32_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint8_t_t__const_iterator[] = {  {&_swigt__p_std__listTint8_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint8_t_t__iterator[] = {  {&_swigt__p_std__listTint8_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTint_t[] = {  {&_swigt__p_std__listTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTshort_t[] = {  {&_swigt__p_std__listTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTstd__string_t[] = {  {&_swigt__p_std__listTstd__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTstd__wstring_t[] = {  {&_swigt__p_std__listTstd__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTstd__wstring_t__const_iterator[] = {  {&_swigt__p_std__listTstd__wstring_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTstd__wstring_t__iterator[] = {  {&_swigt__p_std__listTstd__wstring_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int16_t_t__const_iterator[] = {  {&_swigt__p_std__listTu_int16_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int16_t_t__iterator[] = {  {&_swigt__p_std__listTu_int16_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int32_t_t__const_iterator[] = {  {&_swigt__p_std__listTu_int32_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int32_t_t__iterator[] = {  {&_swigt__p_std__listTu_int32_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int64_t_t__const_iterator[] = {  {&_swigt__p_std__listTu_int64_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int64_t_t__iterator[] = {  {&_swigt__p_std__listTu_int64_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int8_t_t__const_iterator[] = {  {&_swigt__p_std__listTu_int8_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTu_int8_t_t__iterator[] = {  {&_swigt__p_std__listTu_int8_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTunsigned_char_t[] = {  {&_swigt__p_std__listTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTunsigned_int_t[] = {  {&_swigt__p_std__listTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTunsigned_long_long_t[] = {  {&_swigt__p_std__listTunsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTunsigned_short_t[] = {  {&_swigt__p_std__listTunsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTstd__string_std__string_t[] = {  {&_swigt__p_std__mapTstd__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TagValuePairType_t[] = {  {&_swigt__p_std__vectorT_TagValuePairType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t[] = {  {&_swigt__p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffxchp___BaseCallType_t[] = {  {&_swigt__p_std__vectorTaffxchp___BaseCallType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffxchp___ForceCallType_t[] = {  {&_swigt__p_std__vectorTaffxchp___ForceCallType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffxpsi___ProbeSetInfo_t[] = {  {&_swigt__p_std__vectorTaffxpsi___ProbeSetInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__ColumnType_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_utilities__FPoint_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_utilities__FPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_utilities__FRegion_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_utilities__FRegion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_utilities__Point_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_utilities__Point_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_utilities__Region_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_utilities__Region_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t[] = {  {&_swigt__p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTbool_t[] = {  {&_swigt__p_std__vectorTbool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTbool_t__const_iterator[] = {  {&_swigt__p_std__vectorTbool_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTbool_t__iterator[] = {  {&_swigt__p_std__vectorTbool_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTchar_t[] = {  {&_swigt__p_std__vectorTchar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTfloat_t[] = {  {&_swigt__p_std__vectorTfloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTfloat_t__const_iterator[] = {  {&_swigt__p_std__vectorTfloat_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTfloat_t__iterator[] = {  {&_swigt__p_std__vectorTfloat_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint16_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTint16_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint16_t_t__iterator[] = {  {&_swigt__p_std__vectorTint16_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint32_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTint32_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint32_t_t__iterator[] = {  {&_swigt__p_std__vectorTint32_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint64_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTint64_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint64_t_t__iterator[] = {  {&_swigt__p_std__vectorTint64_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint8_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTint8_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint8_t_t__iterator[] = {  {&_swigt__p_std__vectorTint8_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_t[] = {  {&_swigt__p_std__vectorTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTlong_long_t[] = {  {&_swigt__p_std__vectorTlong_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTshort_t[] = {  {&_swigt__p_std__vectorTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_t[] = {  {&_swigt__p_std__vectorTstd__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__wstring_t[] = {  {&_swigt__p_std__vectorTstd__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__wstring_t__const_iterator[] = {  {&_swigt__p_std__vectorTstd__wstring_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__wstring_t__iterator[] = {  {&_swigt__p_std__vectorTstd__wstring_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int16_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTu_int16_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int16_t_t__iterator[] = {  {&_swigt__p_std__vectorTu_int16_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int32_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTu_int32_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int32_t_t__iterator[] = {  {&_swigt__p_std__vectorTu_int32_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int64_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTu_int64_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int64_t_t__iterator[] = {  {&_swigt__p_std__vectorTu_int64_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int8_t_t__const_iterator[] = {  {&_swigt__p_std__vectorTu_int8_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTu_int8_t_t__iterator[] = {  {&_swigt__p_std__vectorTu_int8_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_char_t[] = {  {&_swigt__p_std__vectorTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_int_t[] = {  {&_swigt__p_std__vectorTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_long_long_t[] = {  {&_swigt__p_std__vectorTunsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_short_t[] = {  {&_swigt__p_std__vectorTunsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wstring[] = {  {&_swigt__p_wstring, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FusionCELFileEntryType,
  _swigc__p_GeneChipAssayType,
  _swigc__p__CoordinatePoint,
  _swigc__p__GridCoordinatesType,
  _swigc__p__TagValuePairType,
  _swigc__p_affxbar__CBARFileData,
  _swigc__p_affxbar__CGDACSequenceResultItem,
  _swigc__p_affxbar___BarSequenceResultData,
  _swigc__p_affxbar___GDACFILES_BAR_DATA_TYPE,
  _swigc__p_affxbpmap__CBPMAPFileData,
  _swigc__p_affxbpmap__CGDACSequenceItem,
  _swigc__p_affxbpmap___GDACSequenceHitItemType,
  _swigc__p_affxcdf__CCDFFileData,
  _swigc__p_affxcdf__CCDFFileHeader,
  _swigc__p_affxcdf__CCDFProbeGroupInformation,
  _swigc__p_affxcdf__CCDFProbeInformation,
  _swigc__p_affxcdf__CCDFProbeSetInformation,
  _swigc__p_affxcdf__CCDFProbeSetNames,
  _swigc__p_affxcdf__CCDFQCProbeInformation,
  _swigc__p_affxcdf__CCDFQCProbeSetInformation,
  _swigc__p_affxcel__CCELFileData,
  _swigc__p_affxcel__CCELFileHeaderData,
  _swigc__p_affxcel___CELFileEntryType,
  _swigc__p_affxcel___CELFileTranscriptomeEntryType,
  _swigc__p_affxchp__CCHPFileData,
  _swigc__p_affxchp__CCHPFileHeader,
  _swigc__p_affxchp__CExpressionProbeSetResults,
  _swigc__p_affxchp__CGenotypeProbeSetResults,
  _swigc__p_affxchp__CProbeSetResults,
  _swigc__p_affxchp__CResequencingResults,
  _swigc__p_affxchp__CUniversalProbeSetResults,
  _swigc__p_affxchp___BackgroundZoneInfo,
  _swigc__p_affxchp___BackgroundZoneType,
  _swigc__p_affxchp___BaseCallType,
  _swigc__p_affxchp___ForceCallType,
  _swigc__p_affxexp__CEXPFileData,
  _swigc__p_affxgrc__CGRCFileData,
  _swigc__p_affxmsk__CMSKFileData,
  _swigc__p_affxmsk__ProbeSetIndiciesList__const_iterator,
  _swigc__p_affxmsk__ProbeSetList__const_iterator,
  _swigc__p_affxmsk___ProbeSetIndiciesType,
  _swigc__p_affxpsi__CPSIFileData,
  _swigc__p_affxpsi___ProbeSetInfo,
  _swigc__p_affymetrix_calvin_array__ArrayAttributes,
  _swigc__p_affymetrix_calvin_array__ArrayAuditEntry,
  _swigc__p_affymetrix_calvin_array__ArrayData,
  _swigc__p_affymetrix_calvin_array__TemplateData,
  _swigc__p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException,
  _swigc__p_affymetrix_calvin_exceptions__CalvinException,
  _swigc__p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException,
  _swigc__p_affymetrix_calvin_exceptions__DataGroupNotFoundException,
  _swigc__p_affymetrix_calvin_exceptions__DataSetNotFoundException,
  _swigc__p_affymetrix_calvin_exceptions__DataSetNotOpenException,
  _swigc__p_affymetrix_calvin_exceptions__FileNotFoundException,
  _swigc__p_affymetrix_calvin_exceptions__FileNotOpenException,
  _swigc__p_affymetrix_calvin_exceptions__FormatException,
  _swigc__p_affymetrix_calvin_exceptions__InvalidFileTypeException,
  _swigc__p_affymetrix_calvin_exceptions__InvalidVersionException,
  _swigc__p_affymetrix_calvin_exceptions__NotImplementedException,
  _swigc__p_affymetrix_calvin_exceptions__OutOfRangeParameterException,
  _swigc__p_affymetrix_calvin_exceptions__ParameterMismatchException,
  _swigc__p_affymetrix_calvin_exceptions__ProbeSetNotFoundException,
  _swigc__p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException,
  _swigc__p_affymetrix_calvin_exceptions__UnableToOpenFileException,
  _swigc__p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException,
  _swigc__p_affymetrix_calvin_exceptions__UnexpectedParameterException,
  _swigc__p_affymetrix_calvin_io__ASCIIColumnType,
  _swigc__p_affymetrix_calvin_io__ArrayFileReader,
  _swigc__p_affymetrix_calvin_io__AuditFileReader,
  _swigc__p_affymetrix_calvin_io__ByteColumnType,
  _swigc__p_affymetrix_calvin_io__CDFData,
  _swigc__p_affymetrix_calvin_io__CDFFileReader,
  _swigc__p_affymetrix_calvin_io__CDFProbeGroupInformation,
  _swigc__p_affymetrix_calvin_io__CDFProbeInformation,
  _swigc__p_affymetrix_calvin_io__CDFProbeSetInformation,
  _swigc__p_affymetrix_calvin_io__CDFQCProbeInformation,
  _swigc__p_affymetrix_calvin_io__CDFQCProbeSetInformation,
  _swigc__p_affymetrix_calvin_io__CHPBackgroundZone,
  _swigc__p_affymetrix_calvin_io__CHPData,
  _swigc__p_affymetrix_calvin_io__CHPExpressionEntry,
  _swigc__p_affymetrix_calvin_io__CHPFileReader,
  _swigc__p_affymetrix_calvin_io__CHPGenotypeEntry,
  _swigc__p_affymetrix_calvin_io__CHPUniversalEntry,
  _swigc__p_affymetrix_calvin_io__CelFileData,
  _swigc__p_affymetrix_calvin_io__CelFileReader,
  _swigc__p_affymetrix_calvin_io__ColumnType,
  _swigc__p_affymetrix_calvin_io__DataGroup,
  _swigc__p_affymetrix_calvin_io__DataGroupHeader,
  _swigc__p_affymetrix_calvin_io__DataGroupHeaderReader,
  _swigc__p_affymetrix_calvin_io__DataGroupReader,
  _swigc__p_affymetrix_calvin_io__DataSet,
  _swigc__p_affymetrix_calvin_io__DataSetHeader,
  _swigc__p_affymetrix_calvin_io__DataSetHeaderReader,
  _swigc__p_affymetrix_calvin_io__DataSetReader,
  _swigc__p_affymetrix_calvin_io__FileHeader,
  _swigc__p_affymetrix_calvin_io__FileHeaderReader,
  _swigc__p_affymetrix_calvin_io__FileInput,
  _swigc__p_affymetrix_calvin_io__FloatColumnType,
  _swigc__p_affymetrix_calvin_io__GenericData,
  _swigc__p_affymetrix_calvin_io__GenericDataHeader,
  _swigc__p_affymetrix_calvin_io__GenericDataHeaderReader,
  _swigc__p_affymetrix_calvin_io__GenericFileReader,
  _swigc__p_affymetrix_calvin_io__GridControlFileReader,
  _swigc__p_affymetrix_calvin_io__IntColumnType,
  _swigc__p_affymetrix_calvin_io__ShortColumnType,
  _swigc__p_affymetrix_calvin_io__TemplateFileReader,
  _swigc__p_affymetrix_calvin_io__TextFileReader,
  _swigc__p_affymetrix_calvin_io__UByteColumnType,
  _swigc__p_affymetrix_calvin_io__UIntColumnType,
  _swigc__p_affymetrix_calvin_io__UShortColumnType,
  _swigc__p_affymetrix_calvin_io__UnicodeColumnType,
  _swigc__p_affymetrix_calvin_io__XYCoord,
  _swigc__p_affymetrix_calvin_parameter__MIMEValue,
  _swigc__p_affymetrix_calvin_parameter__ParameterNameValueType,
  _swigc__p_affymetrix_calvin_parameter___ParameterDataValue,
  _swigc__p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary,
  _swigc__p_affymetrix_calvin_parameter___tagParameterNameValuePair,
  _swigc__p_affymetrix_calvin_parameter___tagParameterValue,
  _swigc__p_affymetrix_calvin_utilities__AffymetrixGuid,
  _swigc__p_affymetrix_calvin_utilities__CheckSum,
  _swigc__p_affymetrix_calvin_utilities__DateTime,
  _swigc__p_affymetrix_calvin_utilities__FPoint,
  _swigc__p_affymetrix_calvin_utilities__FRect,
  _swigc__p_affymetrix_calvin_utilities__FRegion,
  _swigc__p_affymetrix_calvin_utilities__FileUtils,
  _swigc__p_affymetrix_calvin_utilities__Point,
  _swigc__p_affymetrix_calvin_utilities__PointU16_t,
  _swigc__p_affymetrix_calvin_utilities__Rect,
  _swigc__p_affymetrix_calvin_utilities__Region,
  _swigc__p_affymetrix_calvin_utilities__StringUtils,
  _swigc__p_affymetrix_calvin_utilities__Subgrid,
  _swigc__p_affymetrix_dttarray__DttArrayData,
  _swigc__p_affymetrix_dttarray__DttArrayFileReader,
  _swigc__p_affymetrix_dttarray___AttributeNameValueType,
  _swigc__p_affymetrix_fusion_io__FusionArrayFileReader,
  _swigc__p_affymetrix_fusion_io__FusionCDFData,
  _swigc__p_affymetrix_fusion_io__FusionCDFFileHeader,
  _swigc__p_affymetrix_fusion_io__FusionCDFProbeGroupInformation,
  _swigc__p_affymetrix_fusion_io__FusionCDFProbeInformation,
  _swigc__p_affymetrix_fusion_io__FusionCDFProbeSetInformation,
  _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeInformation,
  _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation,
  _swigc__p_affymetrix_fusion_io__FusionCDFQCProbeSetNames,
  _swigc__p_affymetrix_fusion_io__FusionCELData,
  _swigc__p_affymetrix_fusion_io__FusionCELFileEntryType,
  _swigc__p_affymetrix_fusion_io__FusionCHPData,
  _swigc__p_affymetrix_fusion_io__FusionCHPHeader,
  _swigc__p_affymetrix_fusion_io__FusionExpressionProbeSetResults,
  _swigc__p_affymetrix_fusion_io__FusionGenotypeProbeSetResults,
  _swigc__p_affymetrix_fusion_io__FusionProbeSetResults,
  _swigc__p_affymetrix_fusion_io__FusionTagValuePairType,
  _swigc__p_affymetrix_fusion_io__FusionUniversalProbeSetResults,
  _swigc__p_affymetrix_fusion_io__IFusionCELDataAdapter,
  _swigc__p_affymetrix_fusion_io__IFusionCHPDataAdapter,
  _swigc__p_affymetrix_fusion_io__IFusionCHPHeaderAdapter,
  _swigc__p_affymetrix_fusion_io___AssayType,
  _swigc__p_affymetrix_grid_control__GridControlData,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_std__ifstream,
  _swigc__p_std__istream,
  _swigc__p_std__listT_TagValuePairType_t,
  _swigc__p_std__listTaffxchp___BackgroundZoneType_t,
  _swigc__p_std__listTaffxmsk___ProbeSetIndiciesType_t,
  _swigc__p_std__listTaffymetrix_calvin_array__ArrayAuditEntry_t,
  _swigc__p_std__listTaffymetrix_calvin_parameter__ParameterNameValueType_t,
  _swigc__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t,
  _swigc__p_std__listTaffymetrix_calvin_parameter___tagParameterNameValuePair_t,
  _swigc__p_std__listTaffymetrix_dttarray___AttributeNameValueType_t,
  _swigc__p_std__listTaffymetrix_fusion_io__FusionTagValuePairType_t,
  _swigc__p_std__listTbool_t,
  _swigc__p_std__listTbool_t__const_iterator,
  _swigc__p_std__listTbool_t__iterator,
  _swigc__p_std__listTchar_t,
  _swigc__p_std__listTfloat_t,
  _swigc__p_std__listTfloat_t__const_iterator,
  _swigc__p_std__listTfloat_t__iterator,
  _swigc__p_std__listTint16_t_t__const_iterator,
  _swigc__p_std__listTint16_t_t__iterator,
  _swigc__p_std__listTint32_t_t__const_iterator,
  _swigc__p_std__listTint32_t_t__iterator,
  _swigc__p_std__listTint8_t_t__const_iterator,
  _swigc__p_std__listTint8_t_t__iterator,
  _swigc__p_std__listTint_t,
  _swigc__p_std__listTshort_t,
  _swigc__p_std__listTstd__string_t,
  _swigc__p_std__listTstd__wstring_t,
  _swigc__p_std__listTstd__wstring_t__const_iterator,
  _swigc__p_std__listTstd__wstring_t__iterator,
  _swigc__p_std__listTu_int16_t_t__const_iterator,
  _swigc__p_std__listTu_int16_t_t__iterator,
  _swigc__p_std__listTu_int32_t_t__const_iterator,
  _swigc__p_std__listTu_int32_t_t__iterator,
  _swigc__p_std__listTu_int64_t_t__const_iterator,
  _swigc__p_std__listTu_int64_t_t__iterator,
  _swigc__p_std__listTu_int8_t_t__const_iterator,
  _swigc__p_std__listTu_int8_t_t__iterator,
  _swigc__p_std__listTunsigned_char_t,
  _swigc__p_std__listTunsigned_int_t,
  _swigc__p_std__listTunsigned_long_long_t,
  _swigc__p_std__listTunsigned_short_t,
  _swigc__p_std__mapTstd__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_TagValuePairType_t,
  _swigc__p_std__vectorTaffxbar___GDACFILES_BAR_DATA_TYPE_t,
  _swigc__p_std__vectorTaffxchp___BaseCallType_t,
  _swigc__p_std__vectorTaffxchp___ForceCallType_t,
  _swigc__p_std__vectorTaffxpsi___ProbeSetInfo_t,
  _swigc__p_std__vectorTaffymetrix_calvin_array__ArrayAttributes_t,
  _swigc__p_std__vectorTaffymetrix_calvin_array__ArrayAuditEntry_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPBackgroundZone_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPExpressionEntry_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPGenotypeEntry_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__CHPUniversalEntry_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__ColumnType_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__ColumnType_t__const_iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__const_iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupHeader_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataGroupReader_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetHeader_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__DataSetReader_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__GenericDataHeader_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t,
  _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__const_iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_io__XYCoord_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t,
  _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__const_iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_parameter__ParameterNameValueType_t__iterator,
  _swigc__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValueControlVocabulary_t,
  _swigc__p_std__vectorTaffymetrix_calvin_parameter___tagParameterNameValuePair_t,
  _swigc__p_std__vectorTaffymetrix_calvin_utilities__FPoint_t,
  _swigc__p_std__vectorTaffymetrix_calvin_utilities__FRegion_t,
  _swigc__p_std__vectorTaffymetrix_calvin_utilities__Point_t,
  _swigc__p_std__vectorTaffymetrix_calvin_utilities__Region_t,
  _swigc__p_std__vectorTaffymetrix_calvin_utilities__Subgrid_t,
  _swigc__p_std__vectorTbool_t,
  _swigc__p_std__vectorTbool_t__const_iterator,
  _swigc__p_std__vectorTbool_t__iterator,
  _swigc__p_std__vectorTchar_t,
  _swigc__p_std__vectorTfloat_t,
  _swigc__p_std__vectorTfloat_t__const_iterator,
  _swigc__p_std__vectorTfloat_t__iterator,
  _swigc__p_std__vectorTint16_t_t__const_iterator,
  _swigc__p_std__vectorTint16_t_t__iterator,
  _swigc__p_std__vectorTint32_t_t__const_iterator,
  _swigc__p_std__vectorTint32_t_t__iterator,
  _swigc__p_std__vectorTint64_t_t__const_iterator,
  _swigc__p_std__vectorTint64_t_t__iterator,
  _swigc__p_std__vectorTint8_t_t__const_iterator,
  _swigc__p_std__vectorTint8_t_t__iterator,
  _swigc__p_std__vectorTint_t,
  _swigc__p_std__vectorTlong_long_t,
  _swigc__p_std__vectorTshort_t,
  _swigc__p_std__vectorTstd__string_t,
  _swigc__p_std__vectorTstd__wstring_t,
  _swigc__p_std__vectorTstd__wstring_t__const_iterator,
  _swigc__p_std__vectorTstd__wstring_t__iterator,
  _swigc__p_std__vectorTu_int16_t_t__const_iterator,
  _swigc__p_std__vectorTu_int16_t_t__iterator,
  _swigc__p_std__vectorTu_int32_t_t__const_iterator,
  _swigc__p_std__vectorTu_int32_t_t__iterator,
  _swigc__p_std__vectorTu_int64_t_t__const_iterator,
  _swigc__p_std__vectorTu_int64_t_t__iterator,
  _swigc__p_std__vectorTu_int8_t_t__const_iterator,
  _swigc__p_std__vectorTu_int8_t_t__iterator,
  _swigc__p_std__vectorTunsigned_char_t,
  _swigc__p_std__vectorTunsigned_int_t,
  _swigc__p_std__vectorTunsigned_long_long_t,
  _swigc__p_std__vectorTunsigned_short_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__p_wchar_t,
  _swigc__p_wstring,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "UpperLeft", (long) affymetrix_calvin_utilities::UpperLeft, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UpperRight", (long) affymetrix_calvin_utilities::UpperRight, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "LowerRight", (long) affymetrix_calvin_utilities::LowerRight, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "LowerLeft", (long) affymetrix_calvin_utilities::LowerLeft, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PARAMETER_VALUE_SIGNED_INTEGRAL", (long) 0, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PARAMETER_VALUE_UNSIGNED_INTEGRAL", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PARAMETER_VALUE_FLOATING_POINT", (long) 2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PARAMETER_VALUE_STRING8_TYPE", (long) 3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PARAMETER_VALUE_STRING16_TYPE", (long) 3, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AFFY_EXPR_PS", 0, 0, (void *)"affymetrix-expression-probesets", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AFFY_GENO_PS", 0, 0, (void *)"affymetrix-genotyping-probesets", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AFFY_TAG_PS", 0, 0, (void *)"affymetrix-tag-probesets", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AFFY_RESEQ_PS", 0, 0, (void *)"affymetrix-resequencing-probesets", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AFFY_CNTRL_PS", 0, 0, (void *)"affymetrix-control-probesets", 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_Int8Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::Int8Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_UInt8Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::UInt8Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_Int16Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::Int16Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_UInt16Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::UInt16Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_Int32Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::Int32Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_UInt32Type", (long) affymetrix_calvin_parameter::ParameterNameValueType::UInt32Type, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_FloatType", (long) affymetrix_calvin_parameter::ParameterNameValueType::FloatType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_TextType", (long) affymetrix_calvin_parameter::ParameterNameValueType::TextType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_AsciiType", (long) affymetrix_calvin_parameter::ParameterNameValueType::AsciiType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ParameterNameValueType_UnknownType", (long) affymetrix_calvin_parameter::ParameterNameValueType::UnknownType, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "ARRAY_FILE_TYPE_IDENTIFIER", 0, 0, (void *)"affymetrix-calvin-array", 0},
{ SWIG_INT,     (char *) SWIG_prefix "MAX_CDF_PROBE_SET_NAME_LENGTH", (long) 32, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ByteColType", (long) affymetrix_calvin_io::ByteColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UByteColType", (long) affymetrix_calvin_io::UByteColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ShortColType", (long) affymetrix_calvin_io::ShortColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UShortColType", (long) affymetrix_calvin_io::UShortColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "IntColType", (long) affymetrix_calvin_io::IntColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UIntColType", (long) affymetrix_calvin_io::UIntColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FloatColType", (long) affymetrix_calvin_io::FloatColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ASCIICharColType", (long) affymetrix_calvin_io::ASCIICharColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UnicodeCharColType", (long) affymetrix_calvin_io::UnicodeCharColType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Expression", (long) affymetrix_calvin_io::Expression, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Genotyping", (long) affymetrix_calvin_io::Genotyping, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Tag", (long) affymetrix_calvin_io::Tag, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Resequencing", (long) affymetrix_calvin_io::Resequencing, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "Control", (long) affymetrix_calvin_io::Control, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ProbeNoDirection", (long) affymetrix_calvin_io::ProbeNoDirection, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ProbeSenseDirection", (long) affymetrix_calvin_io::ProbeSenseDirection, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ProbeAntiSenseDirection", (long) affymetrix_calvin_io::ProbeAntiSenseDirection, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_USER_TAG", 0, 0, (void *)"User", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_DATE_TAG", 0, 0, (void *)"Date", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_TIME_TAG", 0, 0, (void *)"Time", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_ACTION_TAG", 0, 0, (void *)"Action", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_ARRAY_ID_TAG", 0, 0, (void *)"ArrayId", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_INPUT_ID_TAG", 0, 0, (void *)"InputId", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_OUTPUT_ID_TAG", 0, 0, (void *)"OutputId", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_START_TAG", 0, 0, (void *)"#Audit-Start", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "AUDIT_END_TAG", 0, 0, (void *)"#Audit-End", 0},
{ SWIG_INT,     (char *) SWIG_prefix "CDFFileReader_ReadSequential", (long) affymetrix_calvin_io::CDFFileReader::ReadSequential, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CDFFileReader_ReadByProbeSetNumber", (long) affymetrix_calvin_io::CDFFileReader::ReadByProbeSetNumber, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CDFFileReader_ReadByProbeSetName", (long) affymetrix_calvin_io::CDFFileReader::ReadByProbeSetName, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_All", (long) affymetrix_calvin_io::GenericFileReader::All, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_Sequential", (long) affymetrix_calvin_io::GenericFileReader::Sequential, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_None", (long) affymetrix_calvin_io::GenericFileReader::None, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_ReadAllHeaders", (long) affymetrix_calvin_io::GenericFileReader::ReadAllHeaders, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_ReadMinDataGroupHeader", (long) affymetrix_calvin_io::GenericFileReader::ReadMinDataGroupHeader, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenericFileReader_ReadNoDataGroupHeader", (long) affymetrix_calvin_io::GenericFileReader::ReadNoDataGroupHeader, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "GRD_FILE_TYPE_IDENTIFIER", 0, 0, (void *)"affymetrix-calvin-grid-control", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "TEMPLATE_FILE_TYPE_IDENTIFIER", 0, 0, (void *)"affymetrix-calvin-template", 0},
{ SWIG_INT,     (char *) SWIG_prefix "_AFFY_BASE_TYPE_H", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "__int8_t_defined", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "AFFX_FILEIO_H", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "MAX_PROBE_SET_NAME_LENGTH", (long) 64, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UnknownProbeSetType", (long) affxcdf::UnknownProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ExpressionProbeSetType", (long) affxcdf::ExpressionProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GenotypingProbeSetType", (long) affxcdf::GenotypingProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ResequencingProbeSetType", (long) affxcdf::ResequencingProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "TagProbeSetType", (long) affxcdf::TagProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "NoDirection", (long) affxcdf::NoDirection, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SenseDirection", (long) affxcdf::SenseDirection, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "AntiSenseDirection", (long) affxcdf::AntiSenseDirection, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PROBE_SIZE", (long) (4+4+2+2+1+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PROBE_GROUP_SIZE", (long) (64+4+4+4+4+1+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PROBE_SET_SIZE", (long) (4+4+4+4+2+1+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "QC_PROBE_SIZE", (long) (2+2+1+1+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "UnknownQCProbeSetType", (long) affxcdf::UnknownQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CheckerboardNegativeQCProbeSetType", (long) affxcdf::CheckerboardNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CheckerboardPositiveQCProbeSetType", (long) affxcdf::CheckerboardPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "HybNegativeQCProbeSetType", (long) affxcdf::HybNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "HybPositiveQCProbeSetType", (long) affxcdf::HybPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "TextFeaturesNegativeQCProbeSetType", (long) affxcdf::TextFeaturesNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "TextFeaturesPositiveQCProbeSetType", (long) affxcdf::TextFeaturesPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CentralNegativeQCProbeSetType", (long) affxcdf::CentralNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CentralPositiveQCProbeSetType", (long) affxcdf::CentralPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GeneExpNegativeQCProbeSetType", (long) affxcdf::GeneExpNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GeneExpPositiveQCProbeSetType", (long) affxcdf::GeneExpPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CycleFidelityNegativeQCProbeSetType", (long) affxcdf::CycleFidelityNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CycleFidelityPositiveQCProbeSetType", (long) affxcdf::CycleFidelityPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CentralCrossNegativeQCProbeSetType", (long) affxcdf::CentralCrossNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CentralCrossPositiveQCProbeSetType", (long) affxcdf::CentralCrossPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CrossHybNegativeQCProbeSetType", (long) affxcdf::CrossHybNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CrossHybPositiveQCProbeSetType", (long) affxcdf::CrossHybPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SpatialNormalizationNegativeQCProbeSetType", (long) affxcdf::SpatialNormalizationNegativeQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "SpatialNormalizationPositiveQCProbeSetType", (long) affxcdf::SpatialNormalizationPositiveQCProbeSetType, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "QC_PROBE_SET_SIZE", (long) (4+2), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_TEXT_CEL", (long) affxcel::CCELFileData::TEXT_CEL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_XDA_BCEL", (long) affxcel::CCELFileData::XDA_BCEL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_TRANSCRIPTOME_BCEL", (long) affxcel::CCELFileData::TRANSCRIPTOME_BCEL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_COMPACT_BCEL", (long) affxcel::CCELFileData::COMPACT_BCEL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_CEL_ALL", (long) affxcel::CCELFileData::CEL_ALL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_CEL_DATA", (long) affxcel::CCELFileData::CEL_DATA, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_CEL_OUTLIER", (long) affxcel::CCELFileData::CEL_OUTLIER, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCELFileData_CEL_MASK", (long) affxcel::CCELFileData::CEL_MASK, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCHPFileHeader_Expression", (long) affxchp::CCHPFileHeader::Expression, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCHPFileHeader_Genotyping", (long) affxchp::CCHPFileHeader::Genotyping, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCHPFileHeader_Resequencing", (long) affxchp::CCHPFileHeader::Resequencing, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCHPFileHeader_Universal", (long) affxchp::CCHPFileHeader::Universal, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "CCHPFileHeader_Unknown", (long) affxchp::CCHPFileHeader::Unknown, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ABS_PRESENT_CALL", (long) 0, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ABS_MARGINAL_CALL", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ABS_ABSENT_CALL", (long) 2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ABS_NO_CALL", (long) 3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_INCREASE_CALL", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_DECREASE_CALL", (long) 2, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_MOD_INCREASE_CALL", (long) 3, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_MOD_DECREASE_CALL", (long) 4, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_NO_CHANGE_CALL", (long) 5, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "COMP_NO_CALL", (long) 6, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ALLELE_A_CALL", (long) 6, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ALLELE_B_CALL", (long) 7, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ALLELE_AB_CALL", (long) 8, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "ALLELE_NO_CALL", (long) 11, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "NO_SIGNAL_THR_FORCE_CALL", 0, 0, (void *)"N", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "WEAK_SIGNAL_THR_FORCE_CALL", 0, 0, (void *)"W", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SATURATION_LEVEL_FORCE_CALL", 0, 0, (void *)"S", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "QUALITY_SCORE_THR_FORCE_CALL", 0, 0, (void *)"Q", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL", 0, 0, (void *)"F", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "RELIABILITY_THR_FORCE_CALL", 0, 0, (void *)"B", 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_DOUBLE", (long) affxbar::BAR_DATA_DOUBLE, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_FLOAT", (long) affxbar::BAR_DATA_FLOAT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_INTEGER", (long) affxbar::BAR_DATA_INTEGER, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_SHORT", (long) affxbar::BAR_DATA_SHORT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_CHAR", (long) affxbar::BAR_DATA_CHAR, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_UINTEGER", (long) affxbar::BAR_DATA_UINTEGER, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_USHORT", (long) affxbar::BAR_DATA_USHORT, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "BAR_DATA_UCHAR", (long) affxbar::BAR_DATA_UCHAR, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "BPMAP_FILE_HEADER_BYTES", 0, 0, (void *)"PHT7\r\n\32\n", 0},
{ SWIG_INT,     (char *) SWIG_prefix "BPMAP_FILE_HEADER_LEN", (long) 8, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PM_ONLY", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PM_MM", (long) 0, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "PROBE_STORAGE_BUFFER_LENGTH", (long) 7, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "HIT_ITEM_SIZE_WITH_PROBE_PAIRS", (long) (4+4+4+4+1+7+4+4+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "HIT_ITEM_SIZE_WITH_PM_ONLY", (long) (4+4+1+7+4+4+1), 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GRC_VERSION", (long) 1, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "GRC_MAGIC", (long) 129, 0, 0, 0},
{ SWIG_STRING,  (char *) SWIG_prefix "GCOS_SAMPLE_NAME_PARAMETER_NAME", 0, 0, (void *)"GCOS Sample Name", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "GCOS_SAMPLE_TYPE_PARAMETER_NAME", 0, 0, (void *)"GCOS Sample Type", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "GCOS_SAMPLE_PROJECT_PARAMETER_NAME", 0, 0, (void *)"GCOS Sample Project", 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionCELData_CEL_ALL", (long) affymetrix_fusion_io::FusionCELData::CEL_ALL, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionCELData_CEL_DATA", (long) affymetrix_fusion_io::FusionCELData::CEL_DATA, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionCELData_CEL_OUTLIER", (long) affymetrix_fusion_io::FusionCELData::CEL_OUTLIER, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionCELData_CEL_MASK", (long) affymetrix_fusion_io::FusionCELData::CEL_MASK, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionExpression", (long) affymetrix_fusion_io::FusionExpression, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionGenotyping", (long) affymetrix_fusion_io::FusionGenotyping, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionResequencing", (long) affymetrix_fusion_io::FusionResequencing, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionUniversal", (long) affymetrix_fusion_io::FusionUniversal, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "FusionUnknown", (long) affymetrix_fusion_io::FusionUnknown, 0, 0, 0},
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "affx_fusionc::ARRAY_FILE_CREATEION_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_ARRAY_FILE_CREATEION_ACTION,0 },
    { "affx_fusionc::ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_ARRAY_FILE_ATTRIBUTE_UPDATE_ACTION,0 },
    { "affx_fusionc::FLUIDICS_INSTRUMENT_CONTROL_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_FLUIDICS_INSTRUMENT_CONTROL_ACTION,0 },
    { "affx_fusionc::SCAN_INSTRUMENT_CONTROL_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_SCAN_INSTRUMENT_CONTROL_ACTION,0 },
    { "affx_fusionc::MAGIC_NUM", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_MAGIC_NUM,0 },
    { "affx_fusionc::VERSION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_VERSION,0 },
    { "affx_fusionc::SCAN_ACQUISITION_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_SCAN_ACQUISITION_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::INTENSITY_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_INTENSITY_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::EXPRESSION_RESULTS_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_EXPRESSION_RESULTS_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::GENOTYPING_RESULTS_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_GENOTYPING_RESULTS_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::RESEQUENCING_RESULTS_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_RESEQUENCING_RESULTS_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::TAG_RESULTS_DATA_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_TAG_RESULTS_DATA_TYPE,&SWIGTYPE_p_std__string },
    { "affx_fusionc::TEMPLATE_FILE_CREATEION_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_TEMPLATE_FILE_CREATEION_ACTION,0 },
    { "affx_fusionc::TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_val_TEMPLATE_FILE_ATTRIBUTE_UPDATE_ACTION,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"affx_fusionc::new_AffymetrixGuid", _wrap_new_AffymetrixGuid},
{"affx_fusionc::delete_AffymetrixGuid", _wrap_delete_AffymetrixGuid},
{"affx_fusionc::AffymetrixGuid_GenerateNewGuid", _wrap_AffymetrixGuid_GenerateNewGuid},
{"affx_fusionc::CheckSum_OnesComplementCheckSum", _wrap_CheckSum_OnesComplementCheckSum},
{"affx_fusionc::new_CheckSum", _wrap_new_CheckSum},
{"affx_fusionc::delete_CheckSum", _wrap_delete_CheckSum},
{"affx_fusionc::FPoint_x_set", _wrap_FPoint_x_set},
{"affx_fusionc::FPoint_x_get", _wrap_FPoint_x_get},
{"affx_fusionc::FPoint_y_set", _wrap_FPoint_y_set},
{"affx_fusionc::FPoint_y_get", _wrap_FPoint_y_get},
{"affx_fusionc::FPoint_FPoint_equals", _wrap_FPoint_FPoint_equals},
{"affx_fusionc::FPoint_FPoint_not_equals", _wrap_FPoint_FPoint_not_equals},
{"affx_fusionc::new_FPoint", _wrap_new_FPoint},
{"affx_fusionc::delete_FPoint", _wrap_delete_FPoint},
{"affx_fusionc::FRegion_Clear", _wrap_FRegion_Clear},
{"affx_fusionc::FRegion_pts_set", _wrap_FRegion_pts_set},
{"affx_fusionc::FRegion_pts_get", _wrap_FRegion_pts_get},
{"affx_fusionc::new_FRegion", _wrap_new_FRegion},
{"affx_fusionc::delete_FRegion", _wrap_delete_FRegion},
{"affx_fusionc::new_FRect", _wrap_new_FRect},
{"affx_fusionc::FRect_op_FRegion", _wrap_FRect_op_FRegion},
{"affx_fusionc::FRect_IsEmpty", _wrap_FRect_IsEmpty},
{"affx_fusionc::FRect_upperleft_set", _wrap_FRect_upperleft_set},
{"affx_fusionc::FRect_upperleft_get", _wrap_FRect_upperleft_get},
{"affx_fusionc::FRect_upperright_set", _wrap_FRect_upperright_set},
{"affx_fusionc::FRect_upperright_get", _wrap_FRect_upperright_get},
{"affx_fusionc::FRect_lowerright_set", _wrap_FRect_lowerright_set},
{"affx_fusionc::FRect_lowerright_get", _wrap_FRect_lowerright_get},
{"affx_fusionc::FRect_lowerleft_set", _wrap_FRect_lowerleft_set},
{"affx_fusionc::FRect_lowerleft_get", _wrap_FRect_lowerleft_get},
{"affx_fusionc::delete_FRect", _wrap_delete_FRect},
{"affx_fusionc::Point_x_set", _wrap_Point_x_set},
{"affx_fusionc::Point_x_get", _wrap_Point_x_get},
{"affx_fusionc::Point_y_set", _wrap_Point_y_set},
{"affx_fusionc::Point_y_get", _wrap_Point_y_get},
{"affx_fusionc::Point_Point_equals", _wrap_Point_Point_equals},
{"affx_fusionc::Point_Point_not_equals", _wrap_Point_Point_not_equals},
{"affx_fusionc::new_Point", _wrap_new_Point},
{"affx_fusionc::delete_Point", _wrap_delete_Point},
{"affx_fusionc::PointU16_t_x_set", _wrap_PointU16_t_x_set},
{"affx_fusionc::PointU16_t_x_get", _wrap_PointU16_t_x_get},
{"affx_fusionc::PointU16_t_y_set", _wrap_PointU16_t_y_set},
{"affx_fusionc::PointU16_t_y_get", _wrap_PointU16_t_y_get},
{"affx_fusionc::new_PointU16_t", _wrap_new_PointU16_t},
{"affx_fusionc::delete_PointU16_t", _wrap_delete_PointU16_t},
{"affx_fusionc::Region_Clear", _wrap_Region_Clear},
{"affx_fusionc::Region_pts_set", _wrap_Region_pts_set},
{"affx_fusionc::Region_pts_get", _wrap_Region_pts_get},
{"affx_fusionc::new_Region", _wrap_new_Region},
{"affx_fusionc::delete_Region", _wrap_delete_Region},
{"affx_fusionc::new_Rect", _wrap_new_Rect},
{"affx_fusionc::Rect_op_Region", _wrap_Rect_op_Region},
{"affx_fusionc::Rect_IsEmpty", _wrap_Rect_IsEmpty},
{"affx_fusionc::Rect_upperleft_set", _wrap_Rect_upperleft_set},
{"affx_fusionc::Rect_upperleft_get", _wrap_Rect_upperleft_get},
{"affx_fusionc::Rect_upperright_set", _wrap_Rect_upperright_set},
{"affx_fusionc::Rect_upperright_get", _wrap_Rect_upperright_get},
{"affx_fusionc::Rect_lowerright_set", _wrap_Rect_lowerright_set},
{"affx_fusionc::Rect_lowerright_get", _wrap_Rect_lowerright_get},
{"affx_fusionc::Rect_lowerleft_set", _wrap_Rect_lowerleft_set},
{"affx_fusionc::Rect_lowerleft_get", _wrap_Rect_lowerleft_get},
{"affx_fusionc::delete_Rect", _wrap_delete_Rect},
{"affx_fusionc::new_DateTime", _wrap_new_DateTime},
{"affx_fusionc::delete_DateTime", _wrap_delete_DateTime},
{"affx_fusionc::DateTime_Date", _wrap_DateTime_Date},
{"affx_fusionc::DateTime_Time", _wrap_DateTime_Time},
{"affx_fusionc::DateTime_Clear", _wrap_DateTime_Clear},
{"affx_fusionc::DateTime_GetCurrentDateTime", _wrap_DateTime_GetCurrentDateTime},
{"affx_fusionc::DateTime_IsUTC", _wrap_DateTime_IsUTC},
{"affx_fusionc::DateTime_ToString", _wrap_DateTime_ToString},
{"affx_fusionc::DateTime_Parse", _wrap_DateTime_Parse},
{"affx_fusionc::FileUtils_Exists", _wrap_FileUtils_Exists},
{"affx_fusionc::FileUtils_LockFile", _wrap_FileUtils_LockFile},
{"affx_fusionc::FileUtils_UnlockFile", _wrap_FileUtils_UnlockFile},
{"affx_fusionc::FileUtils_ListFiles", _wrap_FileUtils_ListFiles},
{"affx_fusionc::new_FileUtils", _wrap_new_FileUtils},
{"affx_fusionc::delete_FileUtils", _wrap_delete_FileUtils},
{"affx_fusionc::StringUtils_STLTrimLeft", _wrap_StringUtils_STLTrimLeft},
{"affx_fusionc::StringUtils_STLTrimRight", _wrap_StringUtils_STLTrimRight},
{"affx_fusionc::StringUtils_ConvertWCSToMBS", _wrap_StringUtils_ConvertWCSToMBS},
{"affx_fusionc::StringUtils_ConvertMBSToWCS", _wrap_StringUtils_ConvertMBSToWCS},
{"affx_fusionc::new_StringUtils", _wrap_new_StringUtils},
{"affx_fusionc::delete_StringUtils", _wrap_delete_StringUtils},
{"affx_fusionc::Subgrid_row_set", _wrap_Subgrid_row_set},
{"affx_fusionc::Subgrid_row_get", _wrap_Subgrid_row_get},
{"affx_fusionc::Subgrid_col_set", _wrap_Subgrid_col_set},
{"affx_fusionc::Subgrid_col_get", _wrap_Subgrid_col_get},
{"affx_fusionc::Subgrid_pixelgrid_set", _wrap_Subgrid_pixelgrid_set},
{"affx_fusionc::Subgrid_pixelgrid_get", _wrap_Subgrid_pixelgrid_get},
{"affx_fusionc::Subgrid_cellgrid_set", _wrap_Subgrid_cellgrid_set},
{"affx_fusionc::Subgrid_cellgrid_get", _wrap_Subgrid_cellgrid_get},
{"affx_fusionc::new_Subgrid", _wrap_new_Subgrid},
{"affx_fusionc::delete_Subgrid", _wrap_delete_Subgrid},
{"affx_fusionc::new_CalvinException", _wrap_new_CalvinException},
{"affx_fusionc::CalvinException_Source", _wrap_CalvinException_Source},
{"affx_fusionc::CalvinException_Description", _wrap_CalvinException_Description},
{"affx_fusionc::CalvinException_TimeStamp", _wrap_CalvinException_TimeStamp},
{"affx_fusionc::CalvinException_SourceFile", _wrap_CalvinException_SourceFile},
{"affx_fusionc::CalvinException_LineNumber", _wrap_CalvinException_LineNumber},
{"affx_fusionc::CalvinException_ErrorCode", _wrap_CalvinException_ErrorCode},
{"affx_fusionc::CalvinException_ToString", _wrap_CalvinException_ToString},
{"affx_fusionc::delete_CalvinException", _wrap_delete_CalvinException},
{"affx_fusionc::new_NotImplementedException", _wrap_new_NotImplementedException},
{"affx_fusionc::delete_NotImplementedException", _wrap_delete_NotImplementedException},
{"affx_fusionc::new_FormatException", _wrap_new_FormatException},
{"affx_fusionc::delete_FormatException", _wrap_delete_FormatException},
{"affx_fusionc::new_ParameterMismatchException", _wrap_new_ParameterMismatchException},
{"affx_fusionc::delete_ParameterMismatchException", _wrap_delete_ParameterMismatchException},
{"affx_fusionc::new_UnexpectedParameterException", _wrap_new_UnexpectedParameterException},
{"affx_fusionc::delete_UnexpectedParameterException", _wrap_delete_UnexpectedParameterException},
{"affx_fusionc::new_OutOfRangeParameterException", _wrap_new_OutOfRangeParameterException},
{"affx_fusionc::delete_OutOfRangeParameterException", _wrap_delete_OutOfRangeParameterException},
{"affx_fusionc::ParameterNameValuePair_Name_set", _wrap_ParameterNameValuePair_Name_set},
{"affx_fusionc::ParameterNameValuePair_Name_get", _wrap_ParameterNameValuePair_Name_get},
{"affx_fusionc::ParameterNameValuePair_Value_set", _wrap_ParameterNameValuePair_Value_set},
{"affx_fusionc::ParameterNameValuePair_Value_get", _wrap_ParameterNameValuePair_Value_get},
{"affx_fusionc::ParameterNameValuePair_ParameterNameValuePair_copy", _wrap_ParameterNameValuePair_ParameterNameValuePair_copy},
{"affx_fusionc::ParameterNameValuePair_ParameterNameValuePair_equals_obj", _wrap_ParameterNameValuePair_ParameterNameValuePair_equals_obj},
{"affx_fusionc::ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name", _wrap_ParameterNameValuePair_ParameterNameValueControlVocabulary_equals_name},
{"affx_fusionc::new_ParameterNameValuePair", _wrap_new_ParameterNameValuePair},
{"affx_fusionc::delete_ParameterNameValuePair", _wrap_delete_ParameterNameValuePair},
{"affx_fusionc::ParameterNameValueControlVocabulary_Name_set", _wrap_ParameterNameValueControlVocabulary_Name_set},
{"affx_fusionc::ParameterNameValueControlVocabulary_Name_get", _wrap_ParameterNameValueControlVocabulary_Name_get},
{"affx_fusionc::ParameterNameValueControlVocabulary_Value_set", _wrap_ParameterNameValueControlVocabulary_Value_set},
{"affx_fusionc::ParameterNameValueControlVocabulary_Value_get", _wrap_ParameterNameValueControlVocabulary_Value_get},
{"affx_fusionc::ParameterNameValueControlVocabulary_ControlledVocabulary_set", _wrap_ParameterNameValueControlVocabulary_ControlledVocabulary_set},
{"affx_fusionc::ParameterNameValueControlVocabulary_ControlledVocabulary_get", _wrap_ParameterNameValueControlVocabulary_ControlledVocabulary_get},
{"affx_fusionc::ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy", _wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_copy},
{"affx_fusionc::ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj", _wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_obj},
{"affx_fusionc::ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name", _wrap_ParameterNameValueControlVocabulary_ParameterNameValueControlVocabulary_equals_name},
{"affx_fusionc::new_ParameterNameValueControlVocabulary", _wrap_new_ParameterNameValueControlVocabulary},
{"affx_fusionc::delete_ParameterNameValueControlVocabulary", _wrap_delete_ParameterNameValueControlVocabulary},
{"affx_fusionc::ParameterDataValue_i8_set", _wrap_ParameterDataValue_i8_set},
{"affx_fusionc::ParameterDataValue_i8_get", _wrap_ParameterDataValue_i8_get},
{"affx_fusionc::ParameterDataValue_i16_set", _wrap_ParameterDataValue_i16_set},
{"affx_fusionc::ParameterDataValue_i16_get", _wrap_ParameterDataValue_i16_get},
{"affx_fusionc::ParameterDataValue_i32_set", _wrap_ParameterDataValue_i32_set},
{"affx_fusionc::ParameterDataValue_i32_get", _wrap_ParameterDataValue_i32_get},
{"affx_fusionc::ParameterDataValue_iu8_set", _wrap_ParameterDataValue_iu8_set},
{"affx_fusionc::ParameterDataValue_iu8_get", _wrap_ParameterDataValue_iu8_get},
{"affx_fusionc::ParameterDataValue_iu16_set", _wrap_ParameterDataValue_iu16_set},
{"affx_fusionc::ParameterDataValue_iu16_get", _wrap_ParameterDataValue_iu16_get},
{"affx_fusionc::ParameterDataValue_iu32_set", _wrap_ParameterDataValue_iu32_set},
{"affx_fusionc::ParameterDataValue_iu32_get", _wrap_ParameterDataValue_iu32_get},
{"affx_fusionc::ParameterDataValue_f32_set", _wrap_ParameterDataValue_f32_set},
{"affx_fusionc::ParameterDataValue_f32_get", _wrap_ParameterDataValue_f32_get},
{"affx_fusionc::new_ParameterDataValue", _wrap_new_ParameterDataValue},
{"affx_fusionc::delete_ParameterDataValue", _wrap_delete_ParameterDataValue},
{"affx_fusionc::ParameterValue_paramValueType_set", _wrap_ParameterValue_paramValueType_set},
{"affx_fusionc::ParameterValue_paramValueType_get", _wrap_ParameterValue_paramValueType_get},
{"affx_fusionc::ParameterValue_valueSize_set", _wrap_ParameterValue_valueSize_set},
{"affx_fusionc::ParameterValue_valueSize_get", _wrap_ParameterValue_valueSize_get},
{"affx_fusionc::ParameterValue_paramValue_set", _wrap_ParameterValue_paramValue_set},
{"affx_fusionc::ParameterValue_paramValue_get", _wrap_ParameterValue_paramValue_get},
{"affx_fusionc::new_ParameterValue", _wrap_new_ParameterValue},
{"affx_fusionc::delete_ParameterValue", _wrap_delete_ParameterValue},
{"affx_fusionc::new_MIMEValue", _wrap_new_MIMEValue},
{"affx_fusionc::delete_MIMEValue", _wrap_delete_MIMEValue},
{"affx_fusionc::MIMEValue_MIMEValue_copy", _wrap_MIMEValue_MIMEValue_copy},
{"affx_fusionc::MIMEValue_MIMEValue_equals", _wrap_MIMEValue_MIMEValue_equals},
{"affx_fusionc::MIMEValue_MIMEValue_not_equals", _wrap_MIMEValue_MIMEValue_not_equals},
{"affx_fusionc::MIMEValue_SetValue", _wrap_MIMEValue_SetValue},
{"affx_fusionc::MIMEValue_GetValue", _wrap_MIMEValue_GetValue},
{"affx_fusionc::MIMEValue_Size", _wrap_MIMEValue_Size},
{"affx_fusionc::new_ParameterNameValueType", _wrap_new_ParameterNameValueType},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_copy", _wrap_ParameterNameValueType_ParameterNameValueType_copy},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_equals_obj", _wrap_ParameterNameValueType_ParameterNameValueType_equals_obj},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_not_equals_obj", _wrap_ParameterNameValueType_ParameterNameValueType_not_equals_obj},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_equals_name", _wrap_ParameterNameValueType_ParameterNameValueType_equals_name},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_not_equals_name", _wrap_ParameterNameValueType_ParameterNameValueType_not_equals_name},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_less_than", _wrap_ParameterNameValueType_ParameterNameValueType_less_than},
{"affx_fusionc::ParameterNameValueType_ParameterNameValueType_greater_than", _wrap_ParameterNameValueType_ParameterNameValueType_greater_than},
{"affx_fusionc::ParameterNameValueType_GetName", _wrap_ParameterNameValueType_GetName},
{"affx_fusionc::ParameterNameValueType_SetName", _wrap_ParameterNameValueType_SetName},
{"affx_fusionc::ParameterNameValueType_GetParameterType", _wrap_ParameterNameValueType_GetParameterType},
{"affx_fusionc::ParameterNameValueType_GetValueInt8", _wrap_ParameterNameValueType_GetValueInt8},
{"affx_fusionc::ParameterNameValueType_SetValueInt8", _wrap_ParameterNameValueType_SetValueInt8},
{"affx_fusionc::ParameterNameValueType_GetValueUInt8", _wrap_ParameterNameValueType_GetValueUInt8},
{"affx_fusionc::ParameterNameValueType_SetValueUInt8", _wrap_ParameterNameValueType_SetValueUInt8},
{"affx_fusionc::ParameterNameValueType_GetValueInt16", _wrap_ParameterNameValueType_GetValueInt16},
{"affx_fusionc::ParameterNameValueType_SetValueInt16", _wrap_ParameterNameValueType_SetValueInt16},
{"affx_fusionc::ParameterNameValueType_GetValueUInt16", _wrap_ParameterNameValueType_GetValueUInt16},
{"affx_fusionc::ParameterNameValueType_SetValueUInt16", _wrap_ParameterNameValueType_SetValueUInt16},
{"affx_fusionc::ParameterNameValueType_GetValueInt32", _wrap_ParameterNameValueType_GetValueInt32},
{"affx_fusionc::ParameterNameValueType_SetValueInt32", _wrap_ParameterNameValueType_SetValueInt32},
{"affx_fusionc::ParameterNameValueType_GetValueUInt32", _wrap_ParameterNameValueType_GetValueUInt32},
{"affx_fusionc::ParameterNameValueType_SetValueUInt32", _wrap_ParameterNameValueType_SetValueUInt32},
{"affx_fusionc::ParameterNameValueType_GetValueFloat", _wrap_ParameterNameValueType_GetValueFloat},
{"affx_fusionc::ParameterNameValueType_SetValueFloat", _wrap_ParameterNameValueType_SetValueFloat},
{"affx_fusionc::ParameterNameValueType_GetValueText", _wrap_ParameterNameValueType_GetValueText},
{"affx_fusionc::ParameterNameValueType_SetValueText", _wrap_ParameterNameValueType_SetValueText},
{"affx_fusionc::ParameterNameValueType_GetValueAscii", _wrap_ParameterNameValueType_GetValueAscii},
{"affx_fusionc::ParameterNameValueType_SetValueAscii", _wrap_ParameterNameValueType_SetValueAscii},
{"affx_fusionc::ParameterNameValueType_GetMIMEType", _wrap_ParameterNameValueType_GetMIMEType},
{"affx_fusionc::ParameterNameValueType_SetMIMEType", _wrap_ParameterNameValueType_SetMIMEType},
{"affx_fusionc::ParameterNameValueType_GetMIMEValue", _wrap_ParameterNameValueType_GetMIMEValue},
{"affx_fusionc::ParameterNameValueType_SetMIMEValue", _wrap_ParameterNameValueType_SetMIMEValue},
{"affx_fusionc::ParameterNameValueType_ToString", _wrap_ParameterNameValueType_ToString},
{"affx_fusionc::delete_ParameterNameValueType", _wrap_delete_ParameterNameValueType},
{"affx_fusionc::new_ArrayAttributes", _wrap_new_ArrayAttributes},
{"affx_fusionc::delete_ArrayAttributes", _wrap_delete_ArrayAttributes},
{"affx_fusionc::ArrayAttributes_Identifier", _wrap_ArrayAttributes_Identifier},
{"affx_fusionc::ArrayAttributes_Attributes", _wrap_ArrayAttributes_Attributes},
{"affx_fusionc::ArrayAttributes_Clear", _wrap_ArrayAttributes_Clear},
{"affx_fusionc::new_ArrayAuditEntry", _wrap_new_ArrayAuditEntry},
{"affx_fusionc::delete_ArrayAuditEntry", _wrap_delete_ArrayAuditEntry},
{"affx_fusionc::ArrayAuditEntry_UserName", _wrap_ArrayAuditEntry_UserName},
{"affx_fusionc::ArrayAuditEntry_DateTime", _wrap_ArrayAuditEntry_DateTime},
{"affx_fusionc::ArrayAuditEntry_ActionType", _wrap_ArrayAuditEntry_ActionType},
{"affx_fusionc::ArrayAuditEntry_ArrayGuid", _wrap_ArrayAuditEntry_ArrayGuid},
{"affx_fusionc::ArrayAuditEntry_InputFileGuids", _wrap_ArrayAuditEntry_InputFileGuids},
{"affx_fusionc::ArrayAuditEntry_OutputFileGuids", _wrap_ArrayAuditEntry_OutputFileGuids},
{"affx_fusionc::ArrayAuditEntry_ActionParameters", _wrap_ArrayAuditEntry_ActionParameters},
{"affx_fusionc::ArrayAuditEntry_Clear", _wrap_ArrayAuditEntry_Clear},
{"affx_fusionc::new_ArrayData", _wrap_new_ArrayData},
{"affx_fusionc::delete_ArrayData", _wrap_delete_ArrayData},
{"affx_fusionc::ArrayData_ArraySetIdentifier", _wrap_ArrayData_ArraySetIdentifier},
{"affx_fusionc::ArrayData_PhysicalArraysAttributes", _wrap_ArrayData_PhysicalArraysAttributes},
{"affx_fusionc::ArrayData_UserAttributes", _wrap_ArrayData_UserAttributes},
{"affx_fusionc::ArrayData_Clear", _wrap_ArrayData_Clear},
{"affx_fusionc::new_CDFData", _wrap_new_CDFData},
{"affx_fusionc::delete_CDFData", _wrap_delete_CDFData},
{"affx_fusionc::CDFData_Clear", _wrap_CDFData_Clear},
{"affx_fusionc::CDFData_SetFilename", _wrap_CDFData_SetFilename},
{"affx_fusionc::CDFData_GetFilename", _wrap_CDFData_GetFilename},
{"affx_fusionc::CDFData_GetProbeSetCnt", _wrap_CDFData_GetProbeSetCnt},
{"affx_fusionc::CDFData_SetProbeSetCnt", _wrap_CDFData_SetProbeSetCnt},
{"affx_fusionc::CDFData_SetArrayRows", _wrap_CDFData_SetArrayRows},
{"affx_fusionc::CDFData_GetArrayRows", _wrap_CDFData_GetArrayRows},
{"affx_fusionc::CDFData_SetArrayCols", _wrap_CDFData_SetArrayCols},
{"affx_fusionc::CDFData_GetArrayCols", _wrap_CDFData_GetArrayCols},
{"affx_fusionc::CDFData_SetRefSequence", _wrap_CDFData_SetRefSequence},
{"affx_fusionc::CDFData_GetRefSequence", _wrap_CDFData_GetRefSequence},
{"affx_fusionc::CDFData_GetDataTypeId", _wrap_CDFData_GetDataTypeId},
{"affx_fusionc::CDFData_GetFileHeader", _wrap_CDFData_GetFileHeader},
{"affx_fusionc::CDFData_GetGenericData", _wrap_CDFData_GetGenericData},
{"affx_fusionc::CDFData_GetProbeSetInformation", _wrap_CDFData_GetProbeSetInformation},
{"affx_fusionc::CDFData_GetQCProbeSetInformation", _wrap_CDFData_GetQCProbeSetInformation},
{"affx_fusionc::new_CDFProbeGroupInformation", _wrap_new_CDFProbeGroupInformation},
{"affx_fusionc::delete_CDFProbeGroupInformation", _wrap_delete_CDFProbeGroupInformation},
{"affx_fusionc::CDFProbeGroupInformation_GetDirection", _wrap_CDFProbeGroupInformation_GetDirection},
{"affx_fusionc::CDFProbeGroupInformation_GetNumLists", _wrap_CDFProbeGroupInformation_GetNumLists},
{"affx_fusionc::CDFProbeGroupInformation_GetNumCells", _wrap_CDFProbeGroupInformation_GetNumCells},
{"affx_fusionc::CDFProbeGroupInformation_GetNumCellsPerList", _wrap_CDFProbeGroupInformation_GetNumCellsPerList},
{"affx_fusionc::CDFProbeGroupInformation_GetName", _wrap_CDFProbeGroupInformation_GetName},
{"affx_fusionc::CDFProbeGroupInformation_GetCell", _wrap_CDFProbeGroupInformation_GetCell},
{"affx_fusionc::new_CDFProbeInformation", _wrap_new_CDFProbeInformation},
{"affx_fusionc::CDFProbeInformation_GetListIndex", _wrap_CDFProbeInformation_GetListIndex},
{"affx_fusionc::CDFProbeInformation_GetExpos", _wrap_CDFProbeInformation_GetExpos},
{"affx_fusionc::CDFProbeInformation_GetX", _wrap_CDFProbeInformation_GetX},
{"affx_fusionc::CDFProbeInformation_GetY", _wrap_CDFProbeInformation_GetY},
{"affx_fusionc::CDFProbeInformation_GetPBase", _wrap_CDFProbeInformation_GetPBase},
{"affx_fusionc::CDFProbeInformation_GetTBase", _wrap_CDFProbeInformation_GetTBase},
{"affx_fusionc::delete_CDFProbeInformation", _wrap_delete_CDFProbeInformation},
{"affx_fusionc::new_CDFProbeSetInformation", _wrap_new_CDFProbeSetInformation},
{"affx_fusionc::delete_CDFProbeSetInformation", _wrap_delete_CDFProbeSetInformation},
{"affx_fusionc::CDFProbeSetInformation_GetName", _wrap_CDFProbeSetInformation_GetName},
{"affx_fusionc::CDFProbeSetInformation_GetDirection", _wrap_CDFProbeSetInformation_GetDirection},
{"affx_fusionc::CDFProbeSetInformation_GetNumLists", _wrap_CDFProbeSetInformation_GetNumLists},
{"affx_fusionc::CDFProbeSetInformation_GetNumGroups", _wrap_CDFProbeSetInformation_GetNumGroups},
{"affx_fusionc::CDFProbeSetInformation_GetNumCells", _wrap_CDFProbeSetInformation_GetNumCells},
{"affx_fusionc::CDFProbeSetInformation_GetNumCellsPerList", _wrap_CDFProbeSetInformation_GetNumCellsPerList},
{"affx_fusionc::CDFProbeSetInformation_GetProbeSetNumber", _wrap_CDFProbeSetInformation_GetProbeSetNumber},
{"affx_fusionc::CDFProbeSetInformation_GetGroupInformation", _wrap_CDFProbeSetInformation_GetGroupInformation},
{"affx_fusionc::CDFProbeSetInformation_GetProbeSetType", _wrap_CDFProbeSetInformation_GetProbeSetType},
{"affx_fusionc::new_CDFQCProbeInformation", _wrap_new_CDFQCProbeInformation},
{"affx_fusionc::CDFQCProbeInformation_GetX", _wrap_CDFQCProbeInformation_GetX},
{"affx_fusionc::CDFQCProbeInformation_GetY", _wrap_CDFQCProbeInformation_GetY},
{"affx_fusionc::CDFQCProbeInformation_GetPLen", _wrap_CDFQCProbeInformation_GetPLen},
{"affx_fusionc::CDFQCProbeInformation_IsPerfectMatchProbe", _wrap_CDFQCProbeInformation_IsPerfectMatchProbe},
{"affx_fusionc::CDFQCProbeInformation_IsBackgroundProbe", _wrap_CDFQCProbeInformation_IsBackgroundProbe},
{"affx_fusionc::delete_CDFQCProbeInformation", _wrap_delete_CDFQCProbeInformation},
{"affx_fusionc::new_CDFQCProbeSetInformation", _wrap_new_CDFQCProbeSetInformation},
{"affx_fusionc::delete_CDFQCProbeSetInformation", _wrap_delete_CDFQCProbeSetInformation},
{"affx_fusionc::CDFQCProbeSetInformation_GetQCProbeSetType", _wrap_CDFQCProbeSetInformation_GetQCProbeSetType},
{"affx_fusionc::CDFQCProbeSetInformation_GetNumCells", _wrap_CDFQCProbeSetInformation_GetNumCells},
{"affx_fusionc::CDFQCProbeSetInformation_GetProbeInformation", _wrap_CDFQCProbeSetInformation_GetProbeInformation},
{"affx_fusionc::new_CHPBackgroundZone", _wrap_new_CHPBackgroundZone},
{"affx_fusionc::delete_CHPBackgroundZone", _wrap_delete_CHPBackgroundZone},
{"affx_fusionc::CHPBackgroundZone_Clear", _wrap_CHPBackgroundZone_Clear},
{"affx_fusionc::CHPBackgroundZone_CHPBackgroundZone_assign", _wrap_CHPBackgroundZone_CHPBackgroundZone_assign},
{"affx_fusionc::CHPBackgroundZone_GetCenterX", _wrap_CHPBackgroundZone_GetCenterX},
{"affx_fusionc::CHPBackgroundZone_GetCenterY", _wrap_CHPBackgroundZone_GetCenterY},
{"affx_fusionc::CHPBackgroundZone_GetBackground", _wrap_CHPBackgroundZone_GetBackground},
{"affx_fusionc::CHPBackgroundZone_GetSmoothFactor", _wrap_CHPBackgroundZone_GetSmoothFactor},
{"affx_fusionc::CHPBackgroundZone_SetCenterX", _wrap_CHPBackgroundZone_SetCenterX},
{"affx_fusionc::CHPBackgroundZone_SetCenterY", _wrap_CHPBackgroundZone_SetCenterY},
{"affx_fusionc::CHPBackgroundZone_SetBackground", _wrap_CHPBackgroundZone_SetBackground},
{"affx_fusionc::CHPBackgroundZone_SetSmoothFactor", _wrap_CHPBackgroundZone_SetSmoothFactor},
{"affx_fusionc::new_CHPData", _wrap_new_CHPData},
{"affx_fusionc::delete_CHPData", _wrap_delete_CHPData},
{"affx_fusionc::CHPData_Clear", _wrap_CHPData_Clear},
{"affx_fusionc::CHPData_SetFilename", _wrap_CHPData_SetFilename},
{"affx_fusionc::CHPData_GetFilename", _wrap_CHPData_GetFilename},
{"affx_fusionc::CHPData_GetVersion", _wrap_CHPData_GetVersion},
{"affx_fusionc::CHPData_GetMagic", _wrap_CHPData_GetMagic},
{"affx_fusionc::CHPData_GetRows", _wrap_CHPData_GetRows},
{"affx_fusionc::CHPData_SetRows", _wrap_CHPData_SetRows},
{"affx_fusionc::CHPData_GetCols", _wrap_CHPData_GetCols},
{"affx_fusionc::CHPData_SetCols", _wrap_CHPData_SetCols},
{"affx_fusionc::CHPData_GetProgId", _wrap_CHPData_GetProgId},
{"affx_fusionc::CHPData_SetProgId", _wrap_CHPData_SetProgId},
{"affx_fusionc::CHPData_GetArrayType", _wrap_CHPData_GetArrayType},
{"affx_fusionc::CHPData_GetAssayType", _wrap_CHPData_GetAssayType},
{"affx_fusionc::CHPData_SetArrayType", _wrap_CHPData_SetArrayType},
{"affx_fusionc::CHPData_GetAlgName", _wrap_CHPData_GetAlgName},
{"affx_fusionc::CHPData_SetAlgName", _wrap_CHPData_SetAlgName},
{"affx_fusionc::CHPData_GetParentCell", _wrap_CHPData_GetParentCell},
{"affx_fusionc::CHPData_SetParentCell", _wrap_CHPData_SetParentCell},
{"affx_fusionc::CHPData_GetAlgVersion", _wrap_CHPData_GetAlgVersion},
{"affx_fusionc::CHPData_SetAlgVersion", _wrap_CHPData_SetAlgVersion},
{"affx_fusionc::CHPData_AddAlgParam", _wrap_CHPData_AddAlgParam},
{"affx_fusionc::CHPData_GetAlgParam", _wrap_CHPData_GetAlgParam},
{"affx_fusionc::CHPData_AddChipSum", _wrap_CHPData_AddChipSum},
{"affx_fusionc::CHPData_GetChipSums", _wrap_CHPData_GetChipSums},
{"affx_fusionc::CHPData_GetChipSum", _wrap_CHPData_GetChipSum},
{"affx_fusionc::CHPData_GetFileHeader", _wrap_CHPData_GetFileHeader},
{"affx_fusionc::CHPData_GetGenericData", _wrap_CHPData_GetGenericData},
{"affx_fusionc::CHPData_SetEntryCount", _wrap_CHPData_SetEntryCount},
{"affx_fusionc::CHPData_GetEntryCount", _wrap_CHPData_GetEntryCount},
{"affx_fusionc::CHPData_GetExpressionEntry", _wrap_CHPData_GetExpressionEntry},
{"affx_fusionc::CHPData_GetGenotypeEntry", _wrap_CHPData_GetGenotypeEntry},
{"affx_fusionc::CHPData_GetUniversalEntry", _wrap_CHPData_GetUniversalEntry},
{"affx_fusionc::CHPData_GetBackgroundZoneCnt", _wrap_CHPData_GetBackgroundZoneCnt},
{"affx_fusionc::CHPData_SetBackgroundZoneCnt", _wrap_CHPData_SetBackgroundZoneCnt},
{"affx_fusionc::CHPData_GetBackgroundZone", _wrap_CHPData_GetBackgroundZone},
{"affx_fusionc::CHPData_GetBackgroundZones", _wrap_CHPData_GetBackgroundZones},
{"affx_fusionc::new_CHPExpressionEntry", _wrap_new_CHPExpressionEntry},
{"affx_fusionc::delete_CHPExpressionEntry", _wrap_delete_CHPExpressionEntry},
{"affx_fusionc::CHPExpressionEntry_Clear", _wrap_CHPExpressionEntry_Clear},
{"affx_fusionc::CHPExpressionEntry_CHPExpressionEntry_assign", _wrap_CHPExpressionEntry_CHPExpressionEntry_assign},
{"affx_fusionc::CHPExpressionEntry_GetProbeSetName", _wrap_CHPExpressionEntry_GetProbeSetName},
{"affx_fusionc::CHPExpressionEntry_GetDetection", _wrap_CHPExpressionEntry_GetDetection},
{"affx_fusionc::CHPExpressionEntry_GetDetectionPValue", _wrap_CHPExpressionEntry_GetDetectionPValue},
{"affx_fusionc::CHPExpressionEntry_GetSignal", _wrap_CHPExpressionEntry_GetSignal},
{"affx_fusionc::CHPExpressionEntry_GetNumPairs", _wrap_CHPExpressionEntry_GetNumPairs},
{"affx_fusionc::CHPExpressionEntry_GetNumPairsUsed", _wrap_CHPExpressionEntry_GetNumPairsUsed},
{"affx_fusionc::CHPExpressionEntry_GetChange", _wrap_CHPExpressionEntry_GetChange},
{"affx_fusionc::CHPExpressionEntry_GetChangePValue", _wrap_CHPExpressionEntry_GetChangePValue},
{"affx_fusionc::CHPExpressionEntry_GetSigLogRatio", _wrap_CHPExpressionEntry_GetSigLogRatio},
{"affx_fusionc::CHPExpressionEntry_GetSigLogRatioLo", _wrap_CHPExpressionEntry_GetSigLogRatioLo},
{"affx_fusionc::CHPExpressionEntry_GetSigLogRatioHi", _wrap_CHPExpressionEntry_GetSigLogRatioHi},
{"affx_fusionc::CHPExpressionEntry_GetCommonPairs", _wrap_CHPExpressionEntry_GetCommonPairs},
{"affx_fusionc::CHPExpressionEntry_SetProbeSetName", _wrap_CHPExpressionEntry_SetProbeSetName},
{"affx_fusionc::CHPExpressionEntry_SetDetection", _wrap_CHPExpressionEntry_SetDetection},
{"affx_fusionc::CHPExpressionEntry_SetDetectionPValue", _wrap_CHPExpressionEntry_SetDetectionPValue},
{"affx_fusionc::CHPExpressionEntry_SetSignal", _wrap_CHPExpressionEntry_SetSignal},
{"affx_fusionc::CHPExpressionEntry_SetNumPairs", _wrap_CHPExpressionEntry_SetNumPairs},
{"affx_fusionc::CHPExpressionEntry_SetNumPairsUsed", _wrap_CHPExpressionEntry_SetNumPairsUsed},
{"affx_fusionc::CHPExpressionEntry_SetChange", _wrap_CHPExpressionEntry_SetChange},
{"affx_fusionc::CHPExpressionEntry_SetChangePValue", _wrap_CHPExpressionEntry_SetChangePValue},
{"affx_fusionc::CHPExpressionEntry_SetSigLogRatio", _wrap_CHPExpressionEntry_SetSigLogRatio},
{"affx_fusionc::CHPExpressionEntry_SetSigLogRatioLo", _wrap_CHPExpressionEntry_SetSigLogRatioLo},
{"affx_fusionc::CHPExpressionEntry_SetSigLogRatioHi", _wrap_CHPExpressionEntry_SetSigLogRatioHi},
{"affx_fusionc::CHPExpressionEntry_SetCommonPairs", _wrap_CHPExpressionEntry_SetCommonPairs},
{"affx_fusionc::new_CHPGenotypeEntry", _wrap_new_CHPGenotypeEntry},
{"affx_fusionc::delete_CHPGenotypeEntry", _wrap_delete_CHPGenotypeEntry},
{"affx_fusionc::CHPGenotypeEntry_Clear", _wrap_CHPGenotypeEntry_Clear},
{"affx_fusionc::CHPGenotypeEntry_CHPGenotypeEntry_assign", _wrap_CHPGenotypeEntry_CHPGenotypeEntry_assign},
{"affx_fusionc::CHPGenotypeEntry_GetProbeSetName", _wrap_CHPGenotypeEntry_GetProbeSetName},
{"affx_fusionc::CHPGenotypeEntry_GetCall", _wrap_CHPGenotypeEntry_GetCall},
{"affx_fusionc::CHPGenotypeEntry_GetConfidence", _wrap_CHPGenotypeEntry_GetConfidence},
{"affx_fusionc::CHPGenotypeEntry_GetRAS1", _wrap_CHPGenotypeEntry_GetRAS1},
{"affx_fusionc::CHPGenotypeEntry_GetRAS2", _wrap_CHPGenotypeEntry_GetRAS2},
{"affx_fusionc::CHPGenotypeEntry_GetAACall", _wrap_CHPGenotypeEntry_GetAACall},
{"affx_fusionc::CHPGenotypeEntry_GetABCall", _wrap_CHPGenotypeEntry_GetABCall},
{"affx_fusionc::CHPGenotypeEntry_GetBBCall", _wrap_CHPGenotypeEntry_GetBBCall},
{"affx_fusionc::CHPGenotypeEntry_GetNoCall", _wrap_CHPGenotypeEntry_GetNoCall},
{"affx_fusionc::CHPGenotypeEntry_SetProbeSetName", _wrap_CHPGenotypeEntry_SetProbeSetName},
{"affx_fusionc::CHPGenotypeEntry_SetCall", _wrap_CHPGenotypeEntry_SetCall},
{"affx_fusionc::CHPGenotypeEntry_SetConfidence", _wrap_CHPGenotypeEntry_SetConfidence},
{"affx_fusionc::CHPGenotypeEntry_SetRAS1", _wrap_CHPGenotypeEntry_SetRAS1},
{"affx_fusionc::CHPGenotypeEntry_SetRAS2", _wrap_CHPGenotypeEntry_SetRAS2},
{"affx_fusionc::CHPGenotypeEntry_SetAACall", _wrap_CHPGenotypeEntry_SetAACall},
{"affx_fusionc::CHPGenotypeEntry_SetABCall", _wrap_CHPGenotypeEntry_SetABCall},
{"affx_fusionc::CHPGenotypeEntry_SetBBCall", _wrap_CHPGenotypeEntry_SetBBCall},
{"affx_fusionc::CHPGenotypeEntry_SetNoCall", _wrap_CHPGenotypeEntry_SetNoCall},
{"affx_fusionc::new_CHPUniversalEntry", _wrap_new_CHPUniversalEntry},
{"affx_fusionc::delete_CHPUniversalEntry", _wrap_delete_CHPUniversalEntry},
{"affx_fusionc::CHPUniversalEntry_Clear", _wrap_CHPUniversalEntry_Clear},
{"affx_fusionc::CHPUniversalEntry_CHPUniversalEntry_assign", _wrap_CHPUniversalEntry_CHPUniversalEntry_assign},
{"affx_fusionc::CHPUniversalEntry_GetBackground", _wrap_CHPUniversalEntry_GetBackground},
{"affx_fusionc::CHPUniversalEntry_SetBackground", _wrap_CHPUniversalEntry_SetBackground},
{"affx_fusionc::new_XYCoord", _wrap_new_XYCoord},
{"affx_fusionc::delete_XYCoord", _wrap_delete_XYCoord},
{"affx_fusionc::XYCoord_xCoord_set", _wrap_XYCoord_xCoord_set},
{"affx_fusionc::XYCoord_xCoord_get", _wrap_XYCoord_xCoord_get},
{"affx_fusionc::XYCoord_yCoord_set", _wrap_XYCoord_yCoord_set},
{"affx_fusionc::XYCoord_yCoord_get", _wrap_XYCoord_yCoord_get},
{"affx_fusionc::XYCoord_XYCoord_assign", _wrap_XYCoord_XYCoord_assign},
{"affx_fusionc::XYCoord_XYCoord_equals", _wrap_XYCoord_XYCoord_equals},
{"affx_fusionc::XYCoord_XYCoord_not_equals", _wrap_XYCoord_XYCoord_not_equals},
{"affx_fusionc::XYCoord_XYCoord_less_than", _wrap_XYCoord_XYCoord_less_than},
{"affx_fusionc::new_CelFileData", _wrap_new_CelFileData},
{"affx_fusionc::delete_CelFileData", _wrap_delete_CelFileData},
{"affx_fusionc::CelFileData_Clear", _wrap_CelFileData_Clear},
{"affx_fusionc::CelFileData_SetFilename", _wrap_CelFileData_SetFilename},
{"affx_fusionc::CelFileData_GetFilename", _wrap_CelFileData_GetFilename},
{"affx_fusionc::CelFileData_SetIntensityCount", _wrap_CelFileData_SetIntensityCount},
{"affx_fusionc::CelFileData_SetStdDevCount", _wrap_CelFileData_SetStdDevCount},
{"affx_fusionc::CelFileData_SetPixelCount", _wrap_CelFileData_SetPixelCount},
{"affx_fusionc::CelFileData_SetOutlierCount", _wrap_CelFileData_SetOutlierCount},
{"affx_fusionc::CelFileData_SetMaskCount", _wrap_CelFileData_SetMaskCount},
{"affx_fusionc::CelFileData_GetFileHeader", _wrap_CelFileData_GetFileHeader},
{"affx_fusionc::CelFileData_GetVersion", _wrap_CelFileData_GetVersion},
{"affx_fusionc::CelFileData_SetArrayType", _wrap_CelFileData_SetArrayType},
{"affx_fusionc::CelFileData_GetArrayType", _wrap_CelFileData_GetArrayType},
{"affx_fusionc::CelFileData_SetAlgorithmName", _wrap_CelFileData_SetAlgorithmName},
{"affx_fusionc::CelFileData_GetAlgorithmName", _wrap_CelFileData_GetAlgorithmName},
{"affx_fusionc::CelFileData_SetRows", _wrap_CelFileData_SetRows},
{"affx_fusionc::CelFileData_GetRows", _wrap_CelFileData_GetRows},
{"affx_fusionc::CelFileData_SetCols", _wrap_CelFileData_SetCols},
{"affx_fusionc::CelFileData_GetCols", _wrap_CelFileData_GetCols},
{"affx_fusionc::CelFileData_GetNumCells", _wrap_CelFileData_GetNumCells},
{"affx_fusionc::CelFileData_GetAlgorithmParameters", _wrap_CelFileData_GetAlgorithmParameters},
{"affx_fusionc::CelFileData_FindAlgorithmParameter", _wrap_CelFileData_FindAlgorithmParameter},
{"affx_fusionc::CelFileData_AddAlgorithmParameter", _wrap_CelFileData_AddAlgorithmParameter},
{"affx_fusionc::CelFileData_GetData", _wrap_CelFileData_GetData},
{"affx_fusionc::CelFileData_HasStdev", _wrap_CelFileData_HasStdev},
{"affx_fusionc::CelFileData_HasNumPixels", _wrap_CelFileData_HasNumPixels},
{"affx_fusionc::CelFileData_GetIntensities", _wrap_CelFileData_GetIntensities},
{"affx_fusionc::CelFileData_GetStdev", _wrap_CelFileData_GetStdev},
{"affx_fusionc::CelFileData_GetNumPixels", _wrap_CelFileData_GetNumPixels},
{"affx_fusionc::CelFileData_GetOutliers", _wrap_CelFileData_GetOutliers},
{"affx_fusionc::CelFileData_GetMasked", _wrap_CelFileData_GetMasked},
{"affx_fusionc::CelFileData_GetOutlierCoords", _wrap_CelFileData_GetOutlierCoords},
{"affx_fusionc::CelFileData_GetMaskedCoords", _wrap_CelFileData_GetMaskedCoords},
{"affx_fusionc::new_ColumnType", _wrap_new_ColumnType},
{"affx_fusionc::ColumnType_ColumnType_equals", _wrap_ColumnType_ColumnType_equals},
{"affx_fusionc::ColumnType_ColumnType_not_equals", _wrap_ColumnType_ColumnType_not_equals},
{"affx_fusionc::ColumnType_GetColumnType", _wrap_ColumnType_GetColumnType},
{"affx_fusionc::ColumnType_GetSize", _wrap_ColumnType_GetSize},
{"affx_fusionc::ColumnType_GetLength", _wrap_ColumnType_GetLength},
{"affx_fusionc::delete_ColumnType", _wrap_delete_ColumnType},
{"affx_fusionc::new_ByteColumnType", _wrap_new_ByteColumnType},
{"affx_fusionc::delete_ByteColumnType", _wrap_delete_ByteColumnType},
{"affx_fusionc::new_UByteColumnType", _wrap_new_UByteColumnType},
{"affx_fusionc::delete_UByteColumnType", _wrap_delete_UByteColumnType},
{"affx_fusionc::new_ShortColumnType", _wrap_new_ShortColumnType},
{"affx_fusionc::delete_ShortColumnType", _wrap_delete_ShortColumnType},
{"affx_fusionc::new_UShortColumnType", _wrap_new_UShortColumnType},
{"affx_fusionc::delete_UShortColumnType", _wrap_delete_UShortColumnType},
{"affx_fusionc::new_IntColumnType", _wrap_new_IntColumnType},
{"affx_fusionc::delete_IntColumnType", _wrap_delete_IntColumnType},
{"affx_fusionc::new_UIntColumnType", _wrap_new_UIntColumnType},
{"affx_fusionc::delete_UIntColumnType", _wrap_delete_UIntColumnType},
{"affx_fusionc::new_FloatColumnType", _wrap_new_FloatColumnType},
{"affx_fusionc::delete_FloatColumnType", _wrap_delete_FloatColumnType},
{"affx_fusionc::new_ASCIIColumnType", _wrap_new_ASCIIColumnType},
{"affx_fusionc::delete_ASCIIColumnType", _wrap_delete_ASCIIColumnType},
{"affx_fusionc::new_UnicodeColumnType", _wrap_new_UnicodeColumnType},
{"affx_fusionc::delete_UnicodeColumnType", _wrap_delete_UnicodeColumnType},
{"affx_fusionc::new_DataSetNotOpenException", _wrap_new_DataSetNotOpenException},
{"affx_fusionc::delete_DataSetNotOpenException", _wrap_delete_DataSetNotOpenException},
{"affx_fusionc::new_ColumnIndexOutOfBoundsException", _wrap_new_ColumnIndexOutOfBoundsException},
{"affx_fusionc::delete_ColumnIndexOutOfBoundsException", _wrap_delete_ColumnIndexOutOfBoundsException},
{"affx_fusionc::new_RowIndexOutOfBoundsException", _wrap_new_RowIndexOutOfBoundsException},
{"affx_fusionc::delete_RowIndexOutOfBoundsException", _wrap_delete_RowIndexOutOfBoundsException},
{"affx_fusionc::new_UnexpectedColumnTypeException", _wrap_new_UnexpectedColumnTypeException},
{"affx_fusionc::delete_UnexpectedColumnTypeException", _wrap_delete_UnexpectedColumnTypeException},
{"affx_fusionc::new_DataGroupNotFoundException", _wrap_new_DataGroupNotFoundException},
{"affx_fusionc::delete_DataGroupNotFoundException", _wrap_delete_DataGroupNotFoundException},
{"affx_fusionc::new_DataSetNotFoundException", _wrap_new_DataSetNotFoundException},
{"affx_fusionc::delete_DataSetNotFoundException", _wrap_delete_DataSetNotFoundException},
{"affx_fusionc::new_ProbeSetNotFoundException", _wrap_new_ProbeSetNotFoundException},
{"affx_fusionc::delete_ProbeSetNotFoundException", _wrap_delete_ProbeSetNotFoundException},
{"affx_fusionc::new_CDFAccessNotSupportedByModeException", _wrap_new_CDFAccessNotSupportedByModeException},
{"affx_fusionc::delete_CDFAccessNotSupportedByModeException", _wrap_delete_CDFAccessNotSupportedByModeException},
{"affx_fusionc::new_DataGroup", _wrap_new_DataGroup},
{"affx_fusionc::DataGroup_Header", _wrap_DataGroup_Header},
{"affx_fusionc::DataGroup_DataSet", _wrap_DataGroup_DataSet},
{"affx_fusionc::delete_DataGroup", _wrap_delete_DataGroup},
{"affx_fusionc::new_DataGroupHeader", _wrap_new_DataGroupHeader},
{"affx_fusionc::delete_DataGroupHeader", _wrap_delete_DataGroupHeader},
{"affx_fusionc::DataGroupHeader_Clear", _wrap_DataGroupHeader_Clear},
{"affx_fusionc::DataGroupHeader_SetName", _wrap_DataGroupHeader_SetName},
{"affx_fusionc::DataGroupHeader_GetName", _wrap_DataGroupHeader_GetName},
{"affx_fusionc::DataGroupHeader_GetDataSetCnt", _wrap_DataGroupHeader_GetDataSetCnt},
{"affx_fusionc::DataGroupHeader_AddDataSetHdr", _wrap_DataGroupHeader_AddDataSetHdr},
{"affx_fusionc::DataGroupHeader_GetDataSet", _wrap_DataGroupHeader_GetDataSet},
{"affx_fusionc::DataGroupHeader_GetDataSetConst", _wrap_DataGroupHeader_GetDataSetConst},
{"affx_fusionc::DataGroupHeader_GetDataSetIterators", _wrap_DataGroupHeader_GetDataSetIterators},
{"affx_fusionc::DataGroupHeader_SetDataSetPos", _wrap_DataGroupHeader_SetDataSetPos},
{"affx_fusionc::DataGroupHeader_GetDataSetPos", _wrap_DataGroupHeader_GetDataSetPos},
{"affx_fusionc::DataGroupHeader_SetNextCubePos", _wrap_DataGroupHeader_SetNextCubePos},
{"affx_fusionc::DataGroupHeader_GetNextCubePos", _wrap_DataGroupHeader_GetNextCubePos},
{"affx_fusionc::DataGroupHeader_FindDataSetHeader", _wrap_DataGroupHeader_FindDataSetHeader},
{"affx_fusionc::new_DataSet", _wrap_new_DataSet},
{"affx_fusionc::DataSet_Delete", _wrap_DataSet_Delete},
{"affx_fusionc::DataSet_Open", _wrap_DataSet_Open},
{"affx_fusionc::DataSet_Close", _wrap_DataSet_Close},
{"affx_fusionc::DataSet_Header", _wrap_DataSet_Header},
{"affx_fusionc::DataSet_Rows", _wrap_DataSet_Rows},
{"affx_fusionc::DataSet_Cols", _wrap_DataSet_Cols},
{"affx_fusionc::DataSet_IsOpen", _wrap_DataSet_IsOpen},
{"affx_fusionc::DataSet_GetData", _wrap_DataSet_GetData},
{"affx_fusionc::DataSet_GetDataRaw", _wrap_DataSet_GetDataRaw},
{"affx_fusionc::DataSet_CheckRowColumnAndType", _wrap_DataSet_CheckRowColumnAndType},
{"affx_fusionc::DataSet_BytesPerRow", _wrap_DataSet_BytesPerRow},
{"affx_fusionc::new_DataSetHeader", _wrap_new_DataSetHeader},
{"affx_fusionc::delete_DataSetHeader", _wrap_delete_DataSetHeader},
{"affx_fusionc::DataSetHeader_Clear", _wrap_DataSetHeader_Clear},
{"affx_fusionc::DataSetHeader_GetDataSize", _wrap_DataSetHeader_GetDataSize},
{"affx_fusionc::DataSetHeader_GetRowSize", _wrap_DataSetHeader_GetRowSize},
{"affx_fusionc::DataSetHeader_SetName", _wrap_DataSetHeader_SetName},
{"affx_fusionc::DataSetHeader_GetName", _wrap_DataSetHeader_GetName},
{"affx_fusionc::DataSetHeader_GetNameValParamCnt", _wrap_DataSetHeader_GetNameValParamCnt},
{"affx_fusionc::DataSetHeader_AddNameValParam", _wrap_DataSetHeader_AddNameValParam},
{"affx_fusionc::DataSetHeader_GetNameValIterators", _wrap_DataSetHeader_GetNameValIterators},
{"affx_fusionc::DataSetHeader_FindNameValParam", _wrap_DataSetHeader_FindNameValParam},
{"affx_fusionc::DataSetHeader_AddColumnType", _wrap_DataSetHeader_AddColumnType},
{"affx_fusionc::DataSetHeader_AddIntColumnType", _wrap_DataSetHeader_AddIntColumnType},
{"affx_fusionc::DataSetHeader_AddUIntColumnType", _wrap_DataSetHeader_AddUIntColumnType},
{"affx_fusionc::DataSetHeader_AddShortColumnType", _wrap_DataSetHeader_AddShortColumnType},
{"affx_fusionc::DataSetHeader_AddUShortColumnType", _wrap_DataSetHeader_AddUShortColumnType},
{"affx_fusionc::DataSetHeader_AddByteColumnType", _wrap_DataSetHeader_AddByteColumnType},
{"affx_fusionc::DataSetHeader_AddUByteColumnType", _wrap_DataSetHeader_AddUByteColumnType},
{"affx_fusionc::DataSetHeader_AddFloatColumnType", _wrap_DataSetHeader_AddFloatColumnType},
{"affx_fusionc::DataSetHeader_AddAsciiColumnType", _wrap_DataSetHeader_AddAsciiColumnType},
{"affx_fusionc::DataSetHeader_AddUnicodeColumnType", _wrap_DataSetHeader_AddUnicodeColumnType},
{"affx_fusionc::DataSetHeader_GetColumnType", _wrap_DataSetHeader_GetColumnType},
{"affx_fusionc::DataSetHeader_GetRowCnt", _wrap_DataSetHeader_GetRowCnt},
{"affx_fusionc::DataSetHeader_SetRowCnt", _wrap_DataSetHeader_SetRowCnt},
{"affx_fusionc::DataSetHeader_GetColumnCnt", _wrap_DataSetHeader_GetColumnCnt},
{"affx_fusionc::DataSetHeader_SetHeaderStartFilePos", _wrap_DataSetHeader_SetHeaderStartFilePos},
{"affx_fusionc::DataSetHeader_GetHeaderStartFilePos", _wrap_DataSetHeader_GetHeaderStartFilePos},
{"affx_fusionc::DataSetHeader_SetDataStartFilePos", _wrap_DataSetHeader_SetDataStartFilePos},
{"affx_fusionc::DataSetHeader_GetDataStartFilePos", _wrap_DataSetHeader_GetDataStartFilePos},
{"affx_fusionc::new_FileHeader", _wrap_new_FileHeader},
{"affx_fusionc::delete_FileHeader", _wrap_delete_FileHeader},
{"affx_fusionc::FileHeader_Clear", _wrap_FileHeader_Clear},
{"affx_fusionc::FileHeader_SetFilename", _wrap_FileHeader_SetFilename},
{"affx_fusionc::FileHeader_GetFilename", _wrap_FileHeader_GetFilename},
{"affx_fusionc::FileHeader_GetMagicNumber", _wrap_FileHeader_GetMagicNumber},
{"affx_fusionc::FileHeader_GetVersion", _wrap_FileHeader_GetVersion},
{"affx_fusionc::FileHeader_GetDataGroupCnt", _wrap_FileHeader_GetDataGroupCnt},
{"affx_fusionc::FileHeader_AddDataGroupHdr", _wrap_FileHeader_AddDataGroupHdr},
{"affx_fusionc::FileHeader_GetDataGroup", _wrap_FileHeader_GetDataGroup},
{"affx_fusionc::FileHeader_GetDataGroupConst", _wrap_FileHeader_GetDataGroupConst},
{"affx_fusionc::FileHeader_GetDataGroupIts", _wrap_FileHeader_GetDataGroupIts},
{"affx_fusionc::FileHeader_SetGenericDataHdr", _wrap_FileHeader_SetGenericDataHdr},
{"affx_fusionc::FileHeader_GetGenericDataHdr", _wrap_FileHeader_GetGenericDataHdr},
{"affx_fusionc::FileHeader_FindDataGroupHeader", _wrap_FileHeader_FindDataGroupHeader},
{"affx_fusionc::FileHeader_GetNumDataGroups", _wrap_FileHeader_GetNumDataGroups},
{"affx_fusionc::FileHeader_SetNumDataGroups", _wrap_FileHeader_SetNumDataGroups},
{"affx_fusionc::FileHeader_GetFirstDataGroupFilePos", _wrap_FileHeader_GetFirstDataGroupFilePos},
{"affx_fusionc::FileHeader_SetFirstDataGroupFilePos", _wrap_FileHeader_SetFirstDataGroupFilePos},
{"affx_fusionc::new_GenericData", _wrap_new_GenericData},
{"affx_fusionc::delete_GenericData", _wrap_delete_GenericData},
{"affx_fusionc::GenericData_FileIdentifier", _wrap_GenericData_FileIdentifier},
{"affx_fusionc::GenericData_ArrayFileIdentifier", _wrap_GenericData_ArrayFileIdentifier},
{"affx_fusionc::GenericData_Header", _wrap_GenericData_Header},
{"affx_fusionc::GenericData_DataGroupCnt", _wrap_GenericData_DataGroupCnt},
{"affx_fusionc::GenericData_DataGroupNames", _wrap_GenericData_DataGroupNames},
{"affx_fusionc::GenericData_DataSetCnt", _wrap_GenericData_DataSetCnt},
{"affx_fusionc::GenericData_DataSetNames", _wrap_GenericData_DataSetNames},
{"affx_fusionc::GenericData_DataSet", _wrap_GenericData_DataSet},
{"affx_fusionc::GenericData_DataGroup", _wrap_GenericData_DataGroup},
{"affx_fusionc::GenericData_Clear", _wrap_GenericData_Clear},
{"affx_fusionc::GenericData_ReadFullDataSetHeader", _wrap_GenericData_ReadFullDataSetHeader},
{"affx_fusionc::GenericData_IsDPHPartiallyRead", _wrap_GenericData_IsDPHPartiallyRead},
{"affx_fusionc::GenericData_OpenFStream", _wrap_GenericData_OpenFStream},
{"affx_fusionc::GenericData_FindDataGroupHeader", _wrap_GenericData_FindDataGroupHeader},
{"affx_fusionc::GenericData_FindDataSetHeader", _wrap_GenericData_FindDataSetHeader},
{"affx_fusionc::GenericData_MapFile", _wrap_GenericData_MapFile},
{"affx_fusionc::GenericData_UnmapFile", _wrap_GenericData_UnmapFile},
{"affx_fusionc::new_GenericDataHeader", _wrap_new_GenericDataHeader},
{"affx_fusionc::delete_GenericDataHeader", _wrap_delete_GenericDataHeader},
{"affx_fusionc::GenericDataHeader_Clear", _wrap_GenericDataHeader_Clear},
{"affx_fusionc::GenericDataHeader_SetFileTypeId", _wrap_GenericDataHeader_SetFileTypeId},
{"affx_fusionc::GenericDataHeader_GetFileTypeId", _wrap_GenericDataHeader_GetFileTypeId},
{"affx_fusionc::GenericDataHeader_SetFileId", _wrap_GenericDataHeader_SetFileId},
{"affx_fusionc::GenericDataHeader_GetFileId", _wrap_GenericDataHeader_GetFileId},
{"affx_fusionc::GenericDataHeader_SetFileCreationTime", _wrap_GenericDataHeader_SetFileCreationTime},
{"affx_fusionc::GenericDataHeader_GetFileCreationTime", _wrap_GenericDataHeader_GetFileCreationTime},
{"affx_fusionc::GenericDataHeader_SetLocale", _wrap_GenericDataHeader_SetLocale},
{"affx_fusionc::GenericDataHeader_GetLocale", _wrap_GenericDataHeader_GetLocale},
{"affx_fusionc::GenericDataHeader_AddNameValParam", _wrap_GenericDataHeader_AddNameValParam},
{"affx_fusionc::GenericDataHeader_GetNameValParam", _wrap_GenericDataHeader_GetNameValParam},
{"affx_fusionc::GenericDataHeader_GetNameValParamCnt", _wrap_GenericDataHeader_GetNameValParamCnt},
{"affx_fusionc::GenericDataHeader_GetNameValIterators", _wrap_GenericDataHeader_GetNameValIterators},
{"affx_fusionc::GenericDataHeader_GetParentCnt", _wrap_GenericDataHeader_GetParentCnt},
{"affx_fusionc::GenericDataHeader_AddParent", _wrap_GenericDataHeader_AddParent},
{"affx_fusionc::GenericDataHeader_GetParent", _wrap_GenericDataHeader_GetParent},
{"affx_fusionc::GenericDataHeader_GetParentIterators", _wrap_GenericDataHeader_GetParentIterators},
{"affx_fusionc::GenericDataHeader_FindNameValParam", _wrap_GenericDataHeader_FindNameValParam},
{"affx_fusionc::GenericDataHeader_GetNameValParamsBeginsWith", _wrap_GenericDataHeader_GetNameValParamsBeginsWith},
{"affx_fusionc::new_ArrayFileReader", _wrap_new_ArrayFileReader},
{"affx_fusionc::delete_ArrayFileReader", _wrap_delete_ArrayFileReader},
{"affx_fusionc::ArrayFileReader_Read", _wrap_ArrayFileReader_Read},
{"affx_fusionc::ArrayFileReader_IsFileType", _wrap_ArrayFileReader_IsFileType},
{"affx_fusionc::ArrayFileReader_DataTypeIdentifier", _wrap_ArrayFileReader_DataTypeIdentifier},
{"affx_fusionc::new_AuditFileReader", _wrap_new_AuditFileReader},
{"affx_fusionc::delete_AuditFileReader", _wrap_delete_AuditFileReader},
{"affx_fusionc::AuditFileReader_Read", _wrap_AuditFileReader_Read},
{"affx_fusionc::new_CDFFileReader", _wrap_new_CDFFileReader},
{"affx_fusionc::delete_CDFFileReader", _wrap_delete_CDFFileReader},
{"affx_fusionc::CDFFileReader_GetFilename", _wrap_CDFFileReader_GetFilename},
{"affx_fusionc::CDFFileReader_SetFilename", _wrap_CDFFileReader_SetFilename},
{"affx_fusionc::CDFFileReader_Read", _wrap_CDFFileReader_Read},
{"affx_fusionc::new_CHPFileReader", _wrap_new_CHPFileReader},
{"affx_fusionc::delete_CHPFileReader", _wrap_delete_CHPFileReader},
{"affx_fusionc::CHPFileReader_GetFilename", _wrap_CHPFileReader_GetFilename},
{"affx_fusionc::CHPFileReader_SetFilename", _wrap_CHPFileReader_SetFilename},
{"affx_fusionc::CHPFileReader_Read", _wrap_CHPFileReader_Read},
{"affx_fusionc::new_CelFileReader", _wrap_new_CelFileReader},
{"affx_fusionc::delete_CelFileReader", _wrap_delete_CelFileReader},
{"affx_fusionc::CelFileReader_GetFilename", _wrap_CelFileReader_GetFilename},
{"affx_fusionc::CelFileReader_SetFilename", _wrap_CelFileReader_SetFilename},
{"affx_fusionc::CelFileReader_Read", _wrap_CelFileReader_Read},
{"affx_fusionc::new_DataGroupHeaderReader", _wrap_new_DataGroupHeaderReader},
{"affx_fusionc::DataGroupHeaderReader_ReadAllMinimumInfo", _wrap_DataGroupHeaderReader_ReadAllMinimumInfo},
{"affx_fusionc::DataGroupHeaderReader_ReadAll", _wrap_DataGroupHeaderReader_ReadAll},
{"affx_fusionc::DataGroupHeaderReader_ReadMinimumInfo", _wrap_DataGroupHeaderReader_ReadMinimumInfo},
{"affx_fusionc::DataGroupHeaderReader_Read", _wrap_DataGroupHeaderReader_Read},
{"affx_fusionc::DataGroupHeaderReader_ReadHeader", _wrap_DataGroupHeaderReader_ReadHeader},
{"affx_fusionc::delete_DataGroupHeaderReader", _wrap_delete_DataGroupHeaderReader},
{"affx_fusionc::new_DataGroupReader", _wrap_new_DataGroupReader},
{"affx_fusionc::delete_DataGroupReader", _wrap_delete_DataGroupReader},
{"affx_fusionc::DataGroupReader_GetDataSetCnt", _wrap_DataGroupReader_GetDataSetCnt},
{"affx_fusionc::DataGroupReader_GetDataGroupName", _wrap_DataGroupReader_GetDataGroupName},
{"affx_fusionc::DataGroupReader_GetDataSetReader", _wrap_DataGroupReader_GetDataSetReader},
{"affx_fusionc::new_DataSetHeaderReader", _wrap_new_DataSetHeaderReader},
{"affx_fusionc::DataSetHeaderReader_ReadAllMinimumInfo", _wrap_DataSetHeaderReader_ReadAllMinimumInfo},
{"affx_fusionc::DataSetHeaderReader_ReadAll", _wrap_DataSetHeaderReader_ReadAll},
{"affx_fusionc::DataSetHeaderReader_ReadMinimumInfo", _wrap_DataSetHeaderReader_ReadMinimumInfo},
{"affx_fusionc::DataSetHeaderReader_Read", _wrap_DataSetHeaderReader_Read},
{"affx_fusionc::delete_DataSetHeaderReader", _wrap_delete_DataSetHeaderReader},
{"affx_fusionc::new_DataSetReader", _wrap_new_DataSetReader},
{"affx_fusionc::delete_DataSetReader", _wrap_delete_DataSetReader},
{"affx_fusionc::DataSetReader_GetDataSetName", _wrap_DataSetReader_GetDataSetName},
{"affx_fusionc::DataSetReader_GetDataSetHeader", _wrap_DataSetReader_GetDataSetHeader},
{"affx_fusionc::DataSetReader_Read", _wrap_DataSetReader_Read},
{"affx_fusionc::new_FileNotFoundException", _wrap_new_FileNotFoundException},
{"affx_fusionc::delete_FileNotFoundException", _wrap_delete_FileNotFoundException},
{"affx_fusionc::new_InvalidVersionException", _wrap_new_InvalidVersionException},
{"affx_fusionc::delete_InvalidVersionException", _wrap_delete_InvalidVersionException},
{"affx_fusionc::new_InvalidFileTypeException", _wrap_new_InvalidFileTypeException},
{"affx_fusionc::delete_InvalidFileTypeException", _wrap_delete_InvalidFileTypeException},
{"affx_fusionc::new_UnableToOpenFileException", _wrap_new_UnableToOpenFileException},
{"affx_fusionc::delete_UnableToOpenFileException", _wrap_delete_UnableToOpenFileException},
{"affx_fusionc::new_FileNotOpenException", _wrap_new_FileNotOpenException},
{"affx_fusionc::delete_FileNotOpenException", _wrap_delete_FileNotOpenException},
{"affx_fusionc::new_FileHeaderReader", _wrap_new_FileHeaderReader},
{"affx_fusionc::FileHeaderReader_Read", _wrap_FileHeaderReader_Read},
{"affx_fusionc::FileHeaderReader_GetDataGroupCnt", _wrap_FileHeaderReader_GetDataGroupCnt},
{"affx_fusionc::FileHeaderReader_GetFirstDataGroupFilePos", _wrap_FileHeaderReader_GetFirstDataGroupFilePos},
{"affx_fusionc::delete_FileHeaderReader", _wrap_delete_FileHeaderReader},
{"affx_fusionc::FileInput_ReadInt8", _wrap_FileInput_ReadInt8},
{"affx_fusionc::FileInput_ReadInt16", _wrap_FileInput_ReadInt16},
{"affx_fusionc::FileInput_ReadInt32", _wrap_FileInput_ReadInt32},
{"affx_fusionc::FileInput_ReadUInt8", _wrap_FileInput_ReadUInt8},
{"affx_fusionc::FileInput_ReadUInt16", _wrap_FileInput_ReadUInt16},
{"affx_fusionc::FileInput_ReadUInt32", _wrap_FileInput_ReadUInt32},
{"affx_fusionc::FileInput_ReadFloat", _wrap_FileInput_ReadFloat},
{"affx_fusionc::FileInput_ReadString16", _wrap_FileInput_ReadString16},
{"affx_fusionc::FileInput_ReadString8", _wrap_FileInput_ReadString8},
{"affx_fusionc::FileInput_ReadBlob", _wrap_FileInput_ReadBlob},
{"affx_fusionc::new_FileInput", _wrap_new_FileInput},
{"affx_fusionc::delete_FileInput", _wrap_delete_FileInput},
{"affx_fusionc::new_GenericDataHeaderReader", _wrap_new_GenericDataHeaderReader},
{"affx_fusionc::GenericDataHeaderReader_Read", _wrap_GenericDataHeaderReader_Read},
{"affx_fusionc::delete_GenericDataHeaderReader", _wrap_delete_GenericDataHeaderReader},
{"affx_fusionc::new_GenericFileReader", _wrap_new_GenericFileReader},
{"affx_fusionc::delete_GenericFileReader", _wrap_delete_GenericFileReader},
{"affx_fusionc::GenericFileReader_GetFilename", _wrap_GenericFileReader_GetFilename},
{"affx_fusionc::GenericFileReader_SetFilename", _wrap_GenericFileReader_SetFilename},
{"affx_fusionc::GenericFileReader_ReadHeader", _wrap_GenericFileReader_ReadHeader},
{"affx_fusionc::GenericFileReader_Open", _wrap_GenericFileReader_Open},
{"affx_fusionc::GenericFileReader_GetDataGroupCnt", _wrap_GenericFileReader_GetDataGroupCnt},
{"affx_fusionc::GenericFileReader_GetDataGroupReader", _wrap_GenericFileReader_GetDataGroupReader},
{"affx_fusionc::GenericFileReader_Close", _wrap_GenericFileReader_Close},
{"affx_fusionc::new_GridControlFileReader", _wrap_new_GridControlFileReader},
{"affx_fusionc::delete_GridControlFileReader", _wrap_delete_GridControlFileReader},
{"affx_fusionc::GridControlFileReader_Read", _wrap_GridControlFileReader_Read},
{"affx_fusionc::new_TemplateFileReader", _wrap_new_TemplateFileReader},
{"affx_fusionc::delete_TemplateFileReader", _wrap_delete_TemplateFileReader},
{"affx_fusionc::new_TextFileReader", _wrap_new_TextFileReader},
{"affx_fusionc::delete_TextFileReader", _wrap_delete_TextFileReader},
{"affx_fusionc::TextFileReader_ReadFile", _wrap_TextFileReader_ReadFile},
{"affx_fusionc::new_TemplateData", _wrap_new_TemplateData},
{"affx_fusionc::delete_TemplateData", _wrap_delete_TemplateData},
{"affx_fusionc::ReadUInt32_I", _wrap_ReadUInt32_I},
{"affx_fusionc::ReadInt32_I", _wrap_ReadInt32_I},
{"affx_fusionc::ReadFloat_I", _wrap_ReadFloat_I},
{"affx_fusionc::ReadUInt16_I", _wrap_ReadUInt16_I},
{"affx_fusionc::ReadInt16_I", _wrap_ReadInt16_I},
{"affx_fusionc::ReadCString_I", _wrap_ReadCString_I},
{"affx_fusionc::ReadString_I", _wrap_ReadString_I},
{"affx_fusionc::ReadUIntLenString_I", _wrap_ReadUIntLenString_I},
{"affx_fusionc::ReadUInt8", _wrap_ReadUInt8},
{"affx_fusionc::ReadInt8", _wrap_ReadInt8},
{"affx_fusionc::ReadUInt32_N", _wrap_ReadUInt32_N},
{"affx_fusionc::ReadInt32_N", _wrap_ReadInt32_N},
{"affx_fusionc::ReadFloat_N", _wrap_ReadFloat_N},
{"affx_fusionc::ReadUInt16_N", _wrap_ReadUInt16_N},
{"affx_fusionc::ReadInt16_N", _wrap_ReadInt16_N},
{"affx_fusionc::ReadCString_N", _wrap_ReadCString_N},
{"affx_fusionc::ReadString_N", _wrap_ReadString_N},
{"affx_fusionc::ReadUIntLenString_N", _wrap_ReadUIntLenString_N},
{"affx_fusionc::ReadFixedString", _wrap_ReadFixedString},
{"affx_fusionc::ReadFixedCString", _wrap_ReadFixedCString},
{"affx_fusionc::ReadFixedUCString", _wrap_ReadFixedUCString},
{"affx_fusionc::ReadCharacterArray", _wrap_ReadCharacterArray},
{"affx_fusionc::ReadNextLine", _wrap_ReadNextLine},
{"affx_fusionc::ReadFloatFromOldBPMAP_N", _wrap_ReadFloatFromOldBPMAP_N},
{"affx_fusionc::MmGetUInt32_I", _wrap_MmGetUInt32_I},
{"affx_fusionc::MmGetInt32_I", _wrap_MmGetInt32_I},
{"affx_fusionc::MmGetUInt16_I", _wrap_MmGetUInt16_I},
{"affx_fusionc::MmGetInt16_I", _wrap_MmGetInt16_I},
{"affx_fusionc::MmGetUInt8", _wrap_MmGetUInt8},
{"affx_fusionc::MmGetInt8", _wrap_MmGetInt8},
{"affx_fusionc::MmGetUInt32_N", _wrap_MmGetUInt32_N},
{"affx_fusionc::MmGetUInt16_N", _wrap_MmGetUInt16_N},
{"affx_fusionc::MmGetFloat_N", _wrap_MmGetFloat_N},
{"affx_fusionc::MmGetInt32_N", _wrap_MmGetInt32_N},
{"affx_fusionc::MmGetInt16_N", _wrap_MmGetInt16_N},
{"affx_fusionc::MmGetFloat_I", _wrap_MmGetFloat_I},
{"affx_fusionc::MmGetFloatFromOldBPMAP_N", _wrap_MmGetFloatFromOldBPMAP_N},
{"affx_fusionc::MmSetUInt32_I", _wrap_MmSetUInt32_I},
{"affx_fusionc::MmSetUInt16_I", _wrap_MmSetUInt16_I},
{"affx_fusionc::MmSetUInt8", _wrap_MmSetUInt8},
{"affx_fusionc::MmSetFloat_I", _wrap_MmSetFloat_I},
{"affx_fusionc::MmSetUInt32_N", _wrap_MmSetUInt32_N},
{"affx_fusionc::MmSetUInt16_N", _wrap_MmSetUInt16_N},
{"affx_fusionc::MmSetFloat_N", _wrap_MmSetFloat_N},
{"affx_fusionc::CoordinatePoint_x_set", _wrap_CoordinatePoint_x_set},
{"affx_fusionc::CoordinatePoint_x_get", _wrap_CoordinatePoint_x_get},
{"affx_fusionc::CoordinatePoint_y_set", _wrap_CoordinatePoint_y_set},
{"affx_fusionc::CoordinatePoint_y_get", _wrap_CoordinatePoint_y_get},
{"affx_fusionc::new_CoordinatePoint", _wrap_new_CoordinatePoint},
{"affx_fusionc::delete_CoordinatePoint", _wrap_delete_CoordinatePoint},
{"affx_fusionc::GridCoordinatesType_upperleft_set", _wrap_GridCoordinatesType_upperleft_set},
{"affx_fusionc::GridCoordinatesType_upperleft_get", _wrap_GridCoordinatesType_upperleft_get},
{"affx_fusionc::GridCoordinatesType_upperright_set", _wrap_GridCoordinatesType_upperright_set},
{"affx_fusionc::GridCoordinatesType_upperright_get", _wrap_GridCoordinatesType_upperright_get},
{"affx_fusionc::GridCoordinatesType_lowerright_set", _wrap_GridCoordinatesType_lowerright_set},
{"affx_fusionc::GridCoordinatesType_lowerright_get", _wrap_GridCoordinatesType_lowerright_get},
{"affx_fusionc::GridCoordinatesType_lowerleft_set", _wrap_GridCoordinatesType_lowerleft_set},
{"affx_fusionc::GridCoordinatesType_lowerleft_get", _wrap_GridCoordinatesType_lowerleft_get},
{"affx_fusionc::new_GridCoordinatesType", _wrap_new_GridCoordinatesType},
{"affx_fusionc::delete_GridCoordinatesType", _wrap_delete_GridCoordinatesType},
{"affx_fusionc::TagValuePairType_Tag_set", _wrap_TagValuePairType_Tag_set},
{"affx_fusionc::TagValuePairType_Tag_get", _wrap_TagValuePairType_Tag_get},
{"affx_fusionc::TagValuePairType_Value_set", _wrap_TagValuePairType_Value_set},
{"affx_fusionc::TagValuePairType_Value_get", _wrap_TagValuePairType_Value_get},
{"affx_fusionc::TagValuePairType__TagValuePairType_assign", _wrap_TagValuePairType__TagValuePairType_assign},
{"affx_fusionc::TagValuePairType__TagValuePairType_equals_obj", _wrap_TagValuePairType__TagValuePairType_equals_obj},
{"affx_fusionc::TagValuePairType__TagValuePairType_equals_tag", _wrap_TagValuePairType__TagValuePairType_equals_tag},
{"affx_fusionc::new_TagValuePairType", _wrap_new_TagValuePairType},
{"affx_fusionc::delete_TagValuePairType", _wrap_delete_TagValuePairType},
{"affx_fusionc::CCDFFileHeader_GetCols", _wrap_CCDFFileHeader_GetCols},
{"affx_fusionc::CCDFFileHeader_GetRows", _wrap_CCDFFileHeader_GetRows},
{"affx_fusionc::CCDFFileHeader_GetNumProbeSets", _wrap_CCDFFileHeader_GetNumProbeSets},
{"affx_fusionc::CCDFFileHeader_GetNumQCProbeSets", _wrap_CCDFFileHeader_GetNumQCProbeSets},
{"affx_fusionc::CCDFFileHeader_GetReference", _wrap_CCDFFileHeader_GetReference},
{"affx_fusionc::new_CCDFFileHeader", _wrap_new_CCDFFileHeader},
{"affx_fusionc::delete_CCDFFileHeader", _wrap_delete_CCDFFileHeader},
{"affx_fusionc::CCDFProbeInformation_GetListIndex", _wrap_CCDFProbeInformation_GetListIndex},
{"affx_fusionc::CCDFProbeInformation_GetExpos", _wrap_CCDFProbeInformation_GetExpos},
{"affx_fusionc::CCDFProbeInformation_GetX", _wrap_CCDFProbeInformation_GetX},
{"affx_fusionc::CCDFProbeInformation_GetY", _wrap_CCDFProbeInformation_GetY},
{"affx_fusionc::CCDFProbeInformation_GetPBase", _wrap_CCDFProbeInformation_GetPBase},
{"affx_fusionc::CCDFProbeInformation_GetTBase", _wrap_CCDFProbeInformation_GetTBase},
{"affx_fusionc::new_CCDFProbeInformation", _wrap_new_CCDFProbeInformation},
{"affx_fusionc::delete_CCDFProbeInformation", _wrap_delete_CCDFProbeInformation},
{"affx_fusionc::CCDFProbeGroupInformation_GetDirection", _wrap_CCDFProbeGroupInformation_GetDirection},
{"affx_fusionc::CCDFProbeGroupInformation_GetNumLists", _wrap_CCDFProbeGroupInformation_GetNumLists},
{"affx_fusionc::CCDFProbeGroupInformation_GetNumCells", _wrap_CCDFProbeGroupInformation_GetNumCells},
{"affx_fusionc::CCDFProbeGroupInformation_GetNumCellsPerList", _wrap_CCDFProbeGroupInformation_GetNumCellsPerList},
{"affx_fusionc::CCDFProbeGroupInformation_GetStart", _wrap_CCDFProbeGroupInformation_GetStart},
{"affx_fusionc::CCDFProbeGroupInformation_GetStop", _wrap_CCDFProbeGroupInformation_GetStop},
{"affx_fusionc::CCDFProbeGroupInformation_GetName", _wrap_CCDFProbeGroupInformation_GetName},
{"affx_fusionc::CCDFProbeGroupInformation_GetCell", _wrap_CCDFProbeGroupInformation_GetCell},
{"affx_fusionc::new_CCDFProbeGroupInformation", _wrap_new_CCDFProbeGroupInformation},
{"affx_fusionc::delete_CCDFProbeGroupInformation", _wrap_delete_CCDFProbeGroupInformation},
{"affx_fusionc::CCDFProbeSetInformation_GetProbeSetType", _wrap_CCDFProbeSetInformation_GetProbeSetType},
{"affx_fusionc::CCDFProbeSetInformation_GetDirection", _wrap_CCDFProbeSetInformation_GetDirection},
{"affx_fusionc::CCDFProbeSetInformation_GetNumLists", _wrap_CCDFProbeSetInformation_GetNumLists},
{"affx_fusionc::CCDFProbeSetInformation_GetNumGroups", _wrap_CCDFProbeSetInformation_GetNumGroups},
{"affx_fusionc::CCDFProbeSetInformation_GetNumCells", _wrap_CCDFProbeSetInformation_GetNumCells},
{"affx_fusionc::CCDFProbeSetInformation_GetNumCellsPerList", _wrap_CCDFProbeSetInformation_GetNumCellsPerList},
{"affx_fusionc::CCDFProbeSetInformation_GetProbeSetNumber", _wrap_CCDFProbeSetInformation_GetProbeSetNumber},
{"affx_fusionc::CCDFProbeSetInformation_GetGroupInformation", _wrap_CCDFProbeSetInformation_GetGroupInformation},
{"affx_fusionc::new_CCDFProbeSetInformation", _wrap_new_CCDFProbeSetInformation},
{"affx_fusionc::delete_CCDFProbeSetInformation", _wrap_delete_CCDFProbeSetInformation},
{"affx_fusionc::new_CCDFProbeSetNames", _wrap_new_CCDFProbeSetNames},
{"affx_fusionc::delete_CCDFProbeSetNames", _wrap_delete_CCDFProbeSetNames},
{"affx_fusionc::CCDFProbeSetNames_Clear", _wrap_CCDFProbeSetNames_Clear},
{"affx_fusionc::CCDFProbeSetNames_GetName", _wrap_CCDFProbeSetNames_GetName},
{"affx_fusionc::new_CCDFQCProbeInformation", _wrap_new_CCDFQCProbeInformation},
{"affx_fusionc::CCDFQCProbeInformation_GetX", _wrap_CCDFQCProbeInformation_GetX},
{"affx_fusionc::CCDFQCProbeInformation_GetY", _wrap_CCDFQCProbeInformation_GetY},
{"affx_fusionc::CCDFQCProbeInformation_GetPLen", _wrap_CCDFQCProbeInformation_GetPLen},
{"affx_fusionc::CCDFQCProbeInformation_IsPerfectMatchProbe", _wrap_CCDFQCProbeInformation_IsPerfectMatchProbe},
{"affx_fusionc::CCDFQCProbeInformation_IsBackgroundProbe", _wrap_CCDFQCProbeInformation_IsBackgroundProbe},
{"affx_fusionc::delete_CCDFQCProbeInformation", _wrap_delete_CCDFQCProbeInformation},
{"affx_fusionc::CCDFQCProbeSetInformation_GetQCProbeSetType", _wrap_CCDFQCProbeSetInformation_GetQCProbeSetType},
{"affx_fusionc::CCDFQCProbeSetInformation_GetNumCells", _wrap_CCDFQCProbeSetInformation_GetNumCells},
{"affx_fusionc::CCDFQCProbeSetInformation_GetProbeInformation", _wrap_CCDFQCProbeSetInformation_GetProbeInformation},
{"affx_fusionc::new_CCDFQCProbeSetInformation", _wrap_new_CCDFQCProbeSetInformation},
{"affx_fusionc::delete_CCDFQCProbeSetInformation", _wrap_delete_CCDFQCProbeSetInformation},
{"affx_fusionc::CCDFFileData_SetFileName", _wrap_CCDFFileData_SetFileName},
{"affx_fusionc::CCDFFileData_GetFileName", _wrap_CCDFFileData_GetFileName},
{"affx_fusionc::CCDFFileData_GetHeader", _wrap_CCDFFileData_GetHeader},
{"affx_fusionc::CCDFFileData_GetError", _wrap_CCDFFileData_GetError},
{"affx_fusionc::CCDFFileData_GetProbeSetName", _wrap_CCDFFileData_GetProbeSetName},
{"affx_fusionc::CCDFFileData_GetChipType", _wrap_CCDFFileData_GetChipType},
{"affx_fusionc::CCDFFileData_Read", _wrap_CCDFFileData_Read},
{"affx_fusionc::CCDFFileData_ReadHeader", _wrap_CCDFFileData_ReadHeader},
{"affx_fusionc::CCDFFileData_Exists", _wrap_CCDFFileData_Exists},
{"affx_fusionc::CCDFFileData_Close", _wrap_CCDFFileData_Close},
{"affx_fusionc::CCDFFileData_IsXDACompatibleFile", _wrap_CCDFFileData_IsXDACompatibleFile},
{"affx_fusionc::CCDFFileData_GetProbeSetType", _wrap_CCDFFileData_GetProbeSetType},
{"affx_fusionc::CCDFFileData_GetProbeSetInformation", _wrap_CCDFFileData_GetProbeSetInformation},
{"affx_fusionc::CCDFFileData_GetQCProbeSetInformation", _wrap_CCDFFileData_GetQCProbeSetInformation},
{"affx_fusionc::CCDFFileData_GetQCProbeSetInformation_By_Type", _wrap_CCDFFileData_GetQCProbeSetInformation_By_Type},
{"affx_fusionc::new_CCDFFileData", _wrap_new_CCDFFileData},
{"affx_fusionc::delete_CCDFFileData", _wrap_delete_CCDFFileData},
{"affx_fusionc::CELFileEntryType_Intensity_set", _wrap_CELFileEntryType_Intensity_set},
{"affx_fusionc::CELFileEntryType_Intensity_get", _wrap_CELFileEntryType_Intensity_get},
{"affx_fusionc::CELFileEntryType_Stdv_set", _wrap_CELFileEntryType_Stdv_set},
{"affx_fusionc::CELFileEntryType_Stdv_get", _wrap_CELFileEntryType_Stdv_get},
{"affx_fusionc::CELFileEntryType_Pixels_set", _wrap_CELFileEntryType_Pixels_set},
{"affx_fusionc::CELFileEntryType_Pixels_get", _wrap_CELFileEntryType_Pixels_get},
{"affx_fusionc::new_CELFileEntryType", _wrap_new_CELFileEntryType},
{"affx_fusionc::delete_CELFileEntryType", _wrap_delete_CELFileEntryType},
{"affx_fusionc::CELFileTranscriptomeEntryType_Intensity_set", _wrap_CELFileTranscriptomeEntryType_Intensity_set},
{"affx_fusionc::CELFileTranscriptomeEntryType_Intensity_get", _wrap_CELFileTranscriptomeEntryType_Intensity_get},
{"affx_fusionc::CELFileTranscriptomeEntryType_Stdv_set", _wrap_CELFileTranscriptomeEntryType_Stdv_set},
{"affx_fusionc::CELFileTranscriptomeEntryType_Stdv_get", _wrap_CELFileTranscriptomeEntryType_Stdv_get},
{"affx_fusionc::CELFileTranscriptomeEntryType_Pixels_set", _wrap_CELFileTranscriptomeEntryType_Pixels_set},
{"affx_fusionc::CELFileTranscriptomeEntryType_Pixels_get", _wrap_CELFileTranscriptomeEntryType_Pixels_get},
{"affx_fusionc::new_CELFileTranscriptomeEntryType", _wrap_new_CELFileTranscriptomeEntryType},
{"affx_fusionc::delete_CELFileTranscriptomeEntryType", _wrap_delete_CELFileTranscriptomeEntryType},
{"affx_fusionc::new_CCELFileHeaderData", _wrap_new_CCELFileHeaderData},
{"affx_fusionc::delete_CCELFileHeaderData", _wrap_delete_CCELFileHeaderData},
{"affx_fusionc::CCELFileHeaderData_Clear", _wrap_CCELFileHeaderData_Clear},
{"affx_fusionc::CCELFileHeaderData_SetMagic", _wrap_CCELFileHeaderData_SetMagic},
{"affx_fusionc::CCELFileHeaderData_GetMagic", _wrap_CCELFileHeaderData_GetMagic},
{"affx_fusionc::CCELFileHeaderData_SetVersion", _wrap_CCELFileHeaderData_SetVersion},
{"affx_fusionc::CCELFileHeaderData_GetVersion", _wrap_CCELFileHeaderData_GetVersion},
{"affx_fusionc::CCELFileHeaderData_SetCols", _wrap_CCELFileHeaderData_SetCols},
{"affx_fusionc::CCELFileHeaderData_GetCols", _wrap_CCELFileHeaderData_GetCols},
{"affx_fusionc::CCELFileHeaderData_SetRows", _wrap_CCELFileHeaderData_SetRows},
{"affx_fusionc::CCELFileHeaderData_GetRows", _wrap_CCELFileHeaderData_GetRows},
{"affx_fusionc::CCELFileHeaderData_SetCells", _wrap_CCELFileHeaderData_SetCells},
{"affx_fusionc::CCELFileHeaderData_GetCells", _wrap_CCELFileHeaderData_GetCells},
{"affx_fusionc::CCELFileHeaderData_AppendHeader", _wrap_CCELFileHeaderData_AppendHeader},
{"affx_fusionc::CCELFileHeaderData_SetHeader", _wrap_CCELFileHeaderData_SetHeader},
{"affx_fusionc::CCELFileHeaderData_GetHeader", _wrap_CCELFileHeaderData_GetHeader},
{"affx_fusionc::CCELFileHeaderData_SetAlg", _wrap_CCELFileHeaderData_SetAlg},
{"affx_fusionc::CCELFileHeaderData_GetAlg", _wrap_CCELFileHeaderData_GetAlg},
{"affx_fusionc::CCELFileHeaderData_SetParams", _wrap_CCELFileHeaderData_SetParams},
{"affx_fusionc::CCELFileHeaderData_GetParams", _wrap_CCELFileHeaderData_GetParams},
{"affx_fusionc::CCELFileHeaderData_ParseChipType", _wrap_CCELFileHeaderData_ParseChipType},
{"affx_fusionc::CCELFileHeaderData_SetChipType", _wrap_CCELFileHeaderData_SetChipType},
{"affx_fusionc::CCELFileHeaderData_GetChipType", _wrap_CCELFileHeaderData_GetChipType},
{"affx_fusionc::CCELFileHeaderData_ParseDatHeader", _wrap_CCELFileHeaderData_ParseDatHeader},
{"affx_fusionc::CCELFileHeaderData_SetDatHeader", _wrap_CCELFileHeaderData_SetDatHeader},
{"affx_fusionc::CCELFileHeaderData_GetDatHeader", _wrap_CCELFileHeaderData_GetDatHeader},
{"affx_fusionc::CCELFileHeaderData_SetMargin", _wrap_CCELFileHeaderData_SetMargin},
{"affx_fusionc::CCELFileHeaderData_GetMargin", _wrap_CCELFileHeaderData_GetMargin},
{"affx_fusionc::CCELFileHeaderData_SetOutliers", _wrap_CCELFileHeaderData_SetOutliers},
{"affx_fusionc::CCELFileHeaderData_GetOutliers", _wrap_CCELFileHeaderData_GetOutliers},
{"affx_fusionc::CCELFileHeaderData_IncrementOutliers", _wrap_CCELFileHeaderData_IncrementOutliers},
{"affx_fusionc::CCELFileHeaderData_DecrementOutliers", _wrap_CCELFileHeaderData_DecrementOutliers},
{"affx_fusionc::CCELFileHeaderData_SetMasked", _wrap_CCELFileHeaderData_SetMasked},
{"affx_fusionc::CCELFileHeaderData_GetMasked", _wrap_CCELFileHeaderData_GetMasked},
{"affx_fusionc::CCELFileHeaderData_IncrementMasked", _wrap_CCELFileHeaderData_IncrementMasked},
{"affx_fusionc::CCELFileHeaderData_DecrementMasked", _wrap_CCELFileHeaderData_DecrementMasked},
{"affx_fusionc::CCELFileHeaderData_ParseAlgorithmParameters", _wrap_CCELFileHeaderData_ParseAlgorithmParameters},
{"affx_fusionc::CCELFileHeaderData_AddAlgorithmParameter", _wrap_CCELFileHeaderData_AddAlgorithmParameter},
{"affx_fusionc::CCELFileHeaderData_SetAlgorithmParameter", _wrap_CCELFileHeaderData_SetAlgorithmParameter},
{"affx_fusionc::CCELFileHeaderData_GetAlgorithmParameter", _wrap_CCELFileHeaderData_GetAlgorithmParameter},
{"affx_fusionc::CCELFileHeaderData_GetAlgorithmParameterTag", _wrap_CCELFileHeaderData_GetAlgorithmParameterTag},
{"affx_fusionc::CCELFileHeaderData_GetNumberAlgorithmParameters", _wrap_CCELFileHeaderData_GetNumberAlgorithmParameters},
{"affx_fusionc::CCELFileHeaderData_GetAlgorithmParameters", _wrap_CCELFileHeaderData_GetAlgorithmParameters},
{"affx_fusionc::CCELFileHeaderData_SetGridCorners", _wrap_CCELFileHeaderData_SetGridCorners},
{"affx_fusionc::CCELFileHeaderData_ParseCorners", _wrap_CCELFileHeaderData_ParseCorners},
{"affx_fusionc::CCELFileHeaderData_GetGridCorners", _wrap_CCELFileHeaderData_GetGridCorners},
{"affx_fusionc::new_CCELFileData", _wrap_new_CCELFileData},
{"affx_fusionc::delete_CCELFileData", _wrap_delete_CCELFileData},
{"affx_fusionc::CCELFileData_SetError", _wrap_CCELFileData_SetError},
{"affx_fusionc::CCELFileData_GetError", _wrap_CCELFileData_GetError},
{"affx_fusionc::CCELFileData_GetThisPtr", _wrap_CCELFileData_GetThisPtr},
{"affx_fusionc::CCELFileData_SetFileName", _wrap_CCELFileData_SetFileName},
{"affx_fusionc::CCELFileData_GetFileName", _wrap_CCELFileData_GetFileName},
{"affx_fusionc::CCELFileData_GetHeaderKey", _wrap_CCELFileData_GetHeaderKey},
{"affx_fusionc::CCELFileData_GetVersion", _wrap_CCELFileData_GetVersion},
{"affx_fusionc::CCELFileData_GetCols", _wrap_CCELFileData_GetCols},
{"affx_fusionc::CCELFileData_GetRows", _wrap_CCELFileData_GetRows},
{"affx_fusionc::CCELFileData_GetNumCells", _wrap_CCELFileData_GetNumCells},
{"affx_fusionc::CCELFileData_GetHeaderString", _wrap_CCELFileData_GetHeaderString},
{"affx_fusionc::CCELFileData_GetHeader", _wrap_CCELFileData_GetHeader},
{"affx_fusionc::CCELFileData_GetAlg", _wrap_CCELFileData_GetAlg},
{"affx_fusionc::CCELFileData_GetParams", _wrap_CCELFileData_GetParams},
{"affx_fusionc::CCELFileData_GetAlgorithmParameter", _wrap_CCELFileData_GetAlgorithmParameter},
{"affx_fusionc::CCELFileData_GetAlgorithmParameterTag", _wrap_CCELFileData_GetAlgorithmParameterTag},
{"affx_fusionc::CCELFileData_GetNumberAlgorithmParameters", _wrap_CCELFileData_GetNumberAlgorithmParameters},
{"affx_fusionc::CCELFileData_GetAlgorithmParameters", _wrap_CCELFileData_GetAlgorithmParameters},
{"affx_fusionc::CCELFileData_GetDatHeader", _wrap_CCELFileData_GetDatHeader},
{"affx_fusionc::CCELFileData_GetChipType", _wrap_CCELFileData_GetChipType},
{"affx_fusionc::CCELFileData_GetCellMargin", _wrap_CCELFileData_GetCellMargin},
{"affx_fusionc::CCELFileData_GetNumOutliers", _wrap_CCELFileData_GetNumOutliers},
{"affx_fusionc::CCELFileData_GetNumMasked", _wrap_CCELFileData_GetNumMasked},
{"affx_fusionc::CCELFileData_GetGridCorners", _wrap_CCELFileData_GetGridCorners},
{"affx_fusionc::CCELFileData_IndexToX", _wrap_CCELFileData_IndexToX},
{"affx_fusionc::CCELFileData_IndexToY", _wrap_CCELFileData_IndexToY},
{"affx_fusionc::CCELFileData_XYToIndex", _wrap_CCELFileData_XYToIndex},
{"affx_fusionc::CCELFileData_GetEntry", _wrap_CCELFileData_GetEntry},
{"affx_fusionc::CCELFileData_GetTranscriptomeEntry", _wrap_CCELFileData_GetTranscriptomeEntry},
{"affx_fusionc::CCELFileData_GetIntensity", _wrap_CCELFileData_GetIntensity},
{"affx_fusionc::CCELFileData_GetStdv", _wrap_CCELFileData_GetStdv},
{"affx_fusionc::CCELFileData_GetPixels", _wrap_CCELFileData_GetPixels},
{"affx_fusionc::CCELFileData_IsMasked", _wrap_CCELFileData_IsMasked},
{"affx_fusionc::CCELFileData_IsOutlier", _wrap_CCELFileData_IsOutlier},
{"affx_fusionc::CCELFileData_Close", _wrap_CCELFileData_Close},
{"affx_fusionc::CCELFileData_GetFileSize", _wrap_CCELFileData_GetFileSize},
{"affx_fusionc::CCELFileData_Exists", _wrap_CCELFileData_Exists},
{"affx_fusionc::CCELFileData_ReadHeader", _wrap_CCELFileData_ReadHeader},
{"affx_fusionc::CCELFileData_Read", _wrap_CCELFileData_Read},
{"affx_fusionc::CCELFileData_IsXDACompatibleFile", _wrap_CCELFileData_IsXDACompatibleFile},
{"affx_fusionc::CCELFileData_IsTranscriptomeBcelFile", _wrap_CCELFileData_IsTranscriptomeBcelFile},
{"affx_fusionc::CCELFileData_IsCompactCelFile", _wrap_CCELFileData_IsCompactCelFile},
{"affx_fusionc::CCELFileData_ReadEx", _wrap_CCELFileData_ReadEx},
{"affx_fusionc::CCELFileData_GetReadState", _wrap_CCELFileData_GetReadState},
{"affx_fusionc::CCELFileData_Clear", _wrap_CCELFileData_Clear},
{"affx_fusionc::CCELFileData_GetFileFormat", _wrap_CCELFileData_GetFileFormat},
{"affx_fusionc::CCELFileData_SetFileFormat", _wrap_CCELFileData_SetFileFormat},
{"affx_fusionc::CCELFileData_SetAlgorithmName", _wrap_CCELFileData_SetAlgorithmName},
{"affx_fusionc::CCELFileData_AddAlgorithmParameter", _wrap_CCELFileData_AddAlgorithmParameter},
{"affx_fusionc::CCELFileData_SetDimensions", _wrap_CCELFileData_SetDimensions},
{"affx_fusionc::CCELFileData_SetChipType", _wrap_CCELFileData_SetChipType},
{"affx_fusionc::CCELFileData_SetMargin", _wrap_CCELFileData_SetMargin},
{"affx_fusionc::CCELFileData_SetGridCorners", _wrap_CCELFileData_SetGridCorners},
{"affx_fusionc::CCELFileData_SetCellEntry", _wrap_CCELFileData_SetCellEntry},
{"affx_fusionc::CCELFileData_AllocateEntries", _wrap_CCELFileData_AllocateEntries},
{"affx_fusionc::CCELFileData_SetTranscriptomeCellEntry", _wrap_CCELFileData_SetTranscriptomeCellEntry},
{"affx_fusionc::CCELFileData_AllocateTranscriptomeEntries", _wrap_CCELFileData_AllocateTranscriptomeEntries},
{"affx_fusionc::CCELFileData_SetIntensity", _wrap_CCELFileData_SetIntensity},
{"affx_fusionc::CCELFileData_SetStdv", _wrap_CCELFileData_SetStdv},
{"affx_fusionc::CCELFileData_SetPixels", _wrap_CCELFileData_SetPixels},
{"affx_fusionc::CCELFileData_SetMask", _wrap_CCELFileData_SetMask},
{"affx_fusionc::CCELFileData_SetOutlier", _wrap_CCELFileData_SetOutlier},
{"affx_fusionc::CCELFileData_Munmap", _wrap_CCELFileData_Munmap},
{"affx_fusionc::CCELFileData_EnsureNotMmapped", _wrap_CCELFileData_EnsureNotMmapped},
{"affx_fusionc::BackgroundZoneType_centerx_set", _wrap_BackgroundZoneType_centerx_set},
{"affx_fusionc::BackgroundZoneType_centerx_get", _wrap_BackgroundZoneType_centerx_get},
{"affx_fusionc::BackgroundZoneType_centery_set", _wrap_BackgroundZoneType_centery_set},
{"affx_fusionc::BackgroundZoneType_centery_get", _wrap_BackgroundZoneType_centery_get},
{"affx_fusionc::BackgroundZoneType_background_set", _wrap_BackgroundZoneType_background_set},
{"affx_fusionc::BackgroundZoneType_background_get", _wrap_BackgroundZoneType_background_get},
{"affx_fusionc::BackgroundZoneType__BackgroundZoneType_assign", _wrap_BackgroundZoneType__BackgroundZoneType_assign},
{"affx_fusionc::new_BackgroundZoneType", _wrap_new_BackgroundZoneType},
{"affx_fusionc::delete_BackgroundZoneType", _wrap_delete_BackgroundZoneType},
{"affx_fusionc::BackgroundZoneInfo_number_zones_set", _wrap_BackgroundZoneInfo_number_zones_set},
{"affx_fusionc::BackgroundZoneInfo_number_zones_get", _wrap_BackgroundZoneInfo_number_zones_get},
{"affx_fusionc::BackgroundZoneInfo_smooth_factor_set", _wrap_BackgroundZoneInfo_smooth_factor_set},
{"affx_fusionc::BackgroundZoneInfo_smooth_factor_get", _wrap_BackgroundZoneInfo_smooth_factor_get},
{"affx_fusionc::BackgroundZoneInfo_zones_set", _wrap_BackgroundZoneInfo_zones_set},
{"affx_fusionc::BackgroundZoneInfo_zones_get", _wrap_BackgroundZoneInfo_zones_get},
{"affx_fusionc::new_BackgroundZoneInfo", _wrap_new_BackgroundZoneInfo},
{"affx_fusionc::delete_BackgroundZoneInfo", _wrap_delete_BackgroundZoneInfo},
{"affx_fusionc::new_CCHPFileHeader", _wrap_new_CCHPFileHeader},
{"affx_fusionc::delete_CCHPFileHeader", _wrap_delete_CCHPFileHeader},
{"affx_fusionc::CCHPFileHeader_GetCols", _wrap_CCHPFileHeader_GetCols},
{"affx_fusionc::CCHPFileHeader_GetRows", _wrap_CCHPFileHeader_GetRows},
{"affx_fusionc::CCHPFileHeader_GetNumProbeSets", _wrap_CCHPFileHeader_GetNumProbeSets},
{"affx_fusionc::CCHPFileHeader_GetAssayType", _wrap_CCHPFileHeader_GetAssayType},
{"affx_fusionc::CCHPFileHeader_GetChipType", _wrap_CCHPFileHeader_GetChipType},
{"affx_fusionc::CCHPFileHeader_GetAlgName", _wrap_CCHPFileHeader_GetAlgName},
{"affx_fusionc::CCHPFileHeader_GetAlgVersion", _wrap_CCHPFileHeader_GetAlgVersion},
{"affx_fusionc::CCHPFileHeader_AlgorithmParameters", _wrap_CCHPFileHeader_AlgorithmParameters},
{"affx_fusionc::CCHPFileHeader_SummaryParameters", _wrap_CCHPFileHeader_SummaryParameters},
{"affx_fusionc::CCHPFileHeader_GetParentCellFile", _wrap_CCHPFileHeader_GetParentCellFile},
{"affx_fusionc::CCHPFileHeader_GetProgID", _wrap_CCHPFileHeader_GetProgID},
{"affx_fusionc::CCHPFileHeader_GetAlgorithmParameter", _wrap_CCHPFileHeader_GetAlgorithmParameter},
{"affx_fusionc::CCHPFileHeader_GetSummaryParameter", _wrap_CCHPFileHeader_GetSummaryParameter},
{"affx_fusionc::CCHPFileHeader_GetBackgroundZoneInfo", _wrap_CCHPFileHeader_GetBackgroundZoneInfo},
{"affx_fusionc::CCHPFileHeader_GetBackgroundZones", _wrap_CCHPFileHeader_GetBackgroundZones},
{"affx_fusionc::CCHPFileHeader_GetBackgroundZone", _wrap_CCHPFileHeader_GetBackgroundZone},
{"affx_fusionc::CCHPFileHeader_GetMagicNumber", _wrap_CCHPFileHeader_GetMagicNumber},
{"affx_fusionc::CCHPFileHeader_GetVersionNumber", _wrap_CCHPFileHeader_GetVersionNumber},
{"affx_fusionc::CCHPFileHeader_SetCols", _wrap_CCHPFileHeader_SetCols},
{"affx_fusionc::CCHPFileHeader_SetRows", _wrap_CCHPFileHeader_SetRows},
{"affx_fusionc::CCHPFileHeader_SetNumProbeSets", _wrap_CCHPFileHeader_SetNumProbeSets},
{"affx_fusionc::CCHPFileHeader_SetAssayType", _wrap_CCHPFileHeader_SetAssayType},
{"affx_fusionc::CCHPFileHeader_SetChipType", _wrap_CCHPFileHeader_SetChipType},
{"affx_fusionc::CCHPFileHeader_SetAlgName", _wrap_CCHPFileHeader_SetAlgName},
{"affx_fusionc::CCHPFileHeader_SetAlgVersion", _wrap_CCHPFileHeader_SetAlgVersion},
{"affx_fusionc::CCHPFileHeader_SetParentCellFile", _wrap_CCHPFileHeader_SetParentCellFile},
{"affx_fusionc::CCHPFileHeader_SetProgID", _wrap_CCHPFileHeader_SetProgID},
{"affx_fusionc::new_CProbeSetResults", _wrap_new_CProbeSetResults},
{"affx_fusionc::delete_CProbeSetResults", _wrap_delete_CProbeSetResults},
{"affx_fusionc::CExpressionProbeSetResults_DetectionPValue_set", _wrap_CExpressionProbeSetResults_DetectionPValue_set},
{"affx_fusionc::CExpressionProbeSetResults_DetectionPValue_get", _wrap_CExpressionProbeSetResults_DetectionPValue_get},
{"affx_fusionc::CExpressionProbeSetResults_Signal_set", _wrap_CExpressionProbeSetResults_Signal_set},
{"affx_fusionc::CExpressionProbeSetResults_Signal_get", _wrap_CExpressionProbeSetResults_Signal_get},
{"affx_fusionc::CExpressionProbeSetResults_NumPairs_set", _wrap_CExpressionProbeSetResults_NumPairs_set},
{"affx_fusionc::CExpressionProbeSetResults_NumPairs_get", _wrap_CExpressionProbeSetResults_NumPairs_get},
{"affx_fusionc::CExpressionProbeSetResults_NumUsedPairs_set", _wrap_CExpressionProbeSetResults_NumUsedPairs_set},
{"affx_fusionc::CExpressionProbeSetResults_NumUsedPairs_get", _wrap_CExpressionProbeSetResults_NumUsedPairs_get},
{"affx_fusionc::CExpressionProbeSetResults_Detection_set", _wrap_CExpressionProbeSetResults_Detection_set},
{"affx_fusionc::CExpressionProbeSetResults_Detection_get", _wrap_CExpressionProbeSetResults_Detection_get},
{"affx_fusionc::CExpressionProbeSetResults_m_HasCompResults_set", _wrap_CExpressionProbeSetResults_m_HasCompResults_set},
{"affx_fusionc::CExpressionProbeSetResults_m_HasCompResults_get", _wrap_CExpressionProbeSetResults_m_HasCompResults_get},
{"affx_fusionc::CExpressionProbeSetResults_ChangePValue_set", _wrap_CExpressionProbeSetResults_ChangePValue_set},
{"affx_fusionc::CExpressionProbeSetResults_ChangePValue_get", _wrap_CExpressionProbeSetResults_ChangePValue_get},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatio_set", _wrap_CExpressionProbeSetResults_SignalLogRatio_set},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatio_get", _wrap_CExpressionProbeSetResults_SignalLogRatio_get},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatioLow_set", _wrap_CExpressionProbeSetResults_SignalLogRatioLow_set},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatioLow_get", _wrap_CExpressionProbeSetResults_SignalLogRatioLow_get},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatioHigh_set", _wrap_CExpressionProbeSetResults_SignalLogRatioHigh_set},
{"affx_fusionc::CExpressionProbeSetResults_SignalLogRatioHigh_get", _wrap_CExpressionProbeSetResults_SignalLogRatioHigh_get},
{"affx_fusionc::CExpressionProbeSetResults_NumCommonPairs_set", _wrap_CExpressionProbeSetResults_NumCommonPairs_set},
{"affx_fusionc::CExpressionProbeSetResults_NumCommonPairs_get", _wrap_CExpressionProbeSetResults_NumCommonPairs_get},
{"affx_fusionc::CExpressionProbeSetResults_Change_set", _wrap_CExpressionProbeSetResults_Change_set},
{"affx_fusionc::CExpressionProbeSetResults_Change_get", _wrap_CExpressionProbeSetResults_Change_get},
{"affx_fusionc::CExpressionProbeSetResults_GetDetectionString", _wrap_CExpressionProbeSetResults_GetDetectionString},
{"affx_fusionc::CExpressionProbeSetResults_GetChangeString", _wrap_CExpressionProbeSetResults_GetChangeString},
{"affx_fusionc::CExpressionProbeSetResults_CExpressionProbeSetResults_assign", _wrap_CExpressionProbeSetResults_CExpressionProbeSetResults_assign},
{"affx_fusionc::new_CExpressionProbeSetResults", _wrap_new_CExpressionProbeSetResults},
{"affx_fusionc::delete_CExpressionProbeSetResults", _wrap_delete_CExpressionProbeSetResults},
{"affx_fusionc::CGenotypeProbeSetResults_AlleleCall_set", _wrap_CGenotypeProbeSetResults_AlleleCall_set},
{"affx_fusionc::CGenotypeProbeSetResults_AlleleCall_get", _wrap_CGenotypeProbeSetResults_AlleleCall_get},
{"affx_fusionc::CGenotypeProbeSetResults_Confidence_set", _wrap_CGenotypeProbeSetResults_Confidence_set},
{"affx_fusionc::CGenotypeProbeSetResults_Confidence_get", _wrap_CGenotypeProbeSetResults_Confidence_get},
{"affx_fusionc::CGenotypeProbeSetResults_RAS1_set", _wrap_CGenotypeProbeSetResults_RAS1_set},
{"affx_fusionc::CGenotypeProbeSetResults_RAS1_get", _wrap_CGenotypeProbeSetResults_RAS1_get},
{"affx_fusionc::CGenotypeProbeSetResults_RAS2_set", _wrap_CGenotypeProbeSetResults_RAS2_set},
{"affx_fusionc::CGenotypeProbeSetResults_RAS2_get", _wrap_CGenotypeProbeSetResults_RAS2_get},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_AA_set", _wrap_CGenotypeProbeSetResults_pvalue_AA_set},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_AA_get", _wrap_CGenotypeProbeSetResults_pvalue_AA_get},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_AB_set", _wrap_CGenotypeProbeSetResults_pvalue_AB_set},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_AB_get", _wrap_CGenotypeProbeSetResults_pvalue_AB_get},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_BB_set", _wrap_CGenotypeProbeSetResults_pvalue_BB_set},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_BB_get", _wrap_CGenotypeProbeSetResults_pvalue_BB_get},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_NoCall_set", _wrap_CGenotypeProbeSetResults_pvalue_NoCall_set},
{"affx_fusionc::CGenotypeProbeSetResults_pvalue_NoCall_get", _wrap_CGenotypeProbeSetResults_pvalue_NoCall_get},
{"affx_fusionc::CGenotypeProbeSetResults_GetAlleleCallString", _wrap_CGenotypeProbeSetResults_GetAlleleCallString},
{"affx_fusionc::CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign", _wrap_CGenotypeProbeSetResults_CGenotypeProbeSetResults_assign},
{"affx_fusionc::new_CGenotypeProbeSetResults", _wrap_new_CGenotypeProbeSetResults},
{"affx_fusionc::delete_CGenotypeProbeSetResults", _wrap_delete_CGenotypeProbeSetResults},
{"affx_fusionc::CUniversalProbeSetResults_GetBackground", _wrap_CUniversalProbeSetResults_GetBackground},
{"affx_fusionc::CUniversalProbeSetResults_SetBackground", _wrap_CUniversalProbeSetResults_SetBackground},
{"affx_fusionc::CUniversalProbeSetResults_CUniversalProbeSetResults_assign", _wrap_CUniversalProbeSetResults_CUniversalProbeSetResults_assign},
{"affx_fusionc::new_CUniversalProbeSetResults", _wrap_new_CUniversalProbeSetResults},
{"affx_fusionc::delete_CUniversalProbeSetResults", _wrap_delete_CUniversalProbeSetResults},
{"affx_fusionc::ForceCallType_position_set", _wrap_ForceCallType_position_set},
{"affx_fusionc::ForceCallType_position_get", _wrap_ForceCallType_position_get},
{"affx_fusionc::ForceCallType_call_set", _wrap_ForceCallType_call_set},
{"affx_fusionc::ForceCallType_call_get", _wrap_ForceCallType_call_get},
{"affx_fusionc::ForceCallType_reason_set", _wrap_ForceCallType_reason_set},
{"affx_fusionc::ForceCallType_reason_get", _wrap_ForceCallType_reason_get},
{"affx_fusionc::new_ForceCallType", _wrap_new_ForceCallType},
{"affx_fusionc::delete_ForceCallType", _wrap_delete_ForceCallType},
{"affx_fusionc::BaseCallType_position_set", _wrap_BaseCallType_position_set},
{"affx_fusionc::BaseCallType_position_get", _wrap_BaseCallType_position_get},
{"affx_fusionc::BaseCallType_call_set", _wrap_BaseCallType_call_set},
{"affx_fusionc::BaseCallType_call_get", _wrap_BaseCallType_call_get},
{"affx_fusionc::new_BaseCallType", _wrap_new_BaseCallType},
{"affx_fusionc::delete_BaseCallType", _wrap_delete_BaseCallType},
{"affx_fusionc::new_CResequencingResults", _wrap_new_CResequencingResults},
{"affx_fusionc::delete_CResequencingResults", _wrap_delete_CResequencingResults},
{"affx_fusionc::CResequencingResults_Clear", _wrap_CResequencingResults_Clear},
{"affx_fusionc::CResequencingResults_GetCalledBases", _wrap_CResequencingResults_GetCalledBases},
{"affx_fusionc::CResequencingResults_GetCalledBase", _wrap_CResequencingResults_GetCalledBase},
{"affx_fusionc::CResequencingResults_GetCalledBasesSize", _wrap_CResequencingResults_GetCalledBasesSize},
{"affx_fusionc::CResequencingResults_ResizeCalledBases", _wrap_CResequencingResults_ResizeCalledBases},
{"affx_fusionc::CResequencingResults_SetCalledBase", _wrap_CResequencingResults_SetCalledBase},
{"affx_fusionc::CResequencingResults_GetScores", _wrap_CResequencingResults_GetScores},
{"affx_fusionc::CResequencingResults_GetScore", _wrap_CResequencingResults_GetScore},
{"affx_fusionc::CResequencingResults_GetScoresSize", _wrap_CResequencingResults_GetScoresSize},
{"affx_fusionc::CResequencingResults_ResizeScores", _wrap_CResequencingResults_ResizeScores},
{"affx_fusionc::CResequencingResults_SetScore", _wrap_CResequencingResults_SetScore},
{"affx_fusionc::CResequencingResults_GetForceCalls", _wrap_CResequencingResults_GetForceCalls},
{"affx_fusionc::CResequencingResults_GetForceCall", _wrap_CResequencingResults_GetForceCall},
{"affx_fusionc::CResequencingResults_GetForceCallsSize", _wrap_CResequencingResults_GetForceCallsSize},
{"affx_fusionc::CResequencingResults_ResizeForceCalls", _wrap_CResequencingResults_ResizeForceCalls},
{"affx_fusionc::CResequencingResults_SetForceCall", _wrap_CResequencingResults_SetForceCall},
{"affx_fusionc::CResequencingResults_GetOrigCalls", _wrap_CResequencingResults_GetOrigCalls},
{"affx_fusionc::CResequencingResults_GetOrigCall", _wrap_CResequencingResults_GetOrigCall},
{"affx_fusionc::CResequencingResults_GetOrigCallsSize", _wrap_CResequencingResults_GetOrigCallsSize},
{"affx_fusionc::CResequencingResults_ResizeOrigCalls", _wrap_CResequencingResults_ResizeOrigCalls},
{"affx_fusionc::CResequencingResults_SetOrigCall", _wrap_CResequencingResults_SetOrigCall},
{"affx_fusionc::new_CCHPFileData", _wrap_new_CCHPFileData},
{"affx_fusionc::delete_CCHPFileData", _wrap_delete_CCHPFileData},
{"affx_fusionc::CCHPFileData_GetHeader", _wrap_CCHPFileData_GetHeader},
{"affx_fusionc::CCHPFileData_GetExpressionResults", _wrap_CCHPFileData_GetExpressionResults},
{"affx_fusionc::CCHPFileData_GetGenotypingResults", _wrap_CCHPFileData_GetGenotypingResults},
{"affx_fusionc::CCHPFileData_GetUniversalResults", _wrap_CCHPFileData_GetUniversalResults},
{"affx_fusionc::CCHPFileData_GetResequencingResults", _wrap_CCHPFileData_GetResequencingResults},
{"affx_fusionc::CCHPFileData_GetError", _wrap_CCHPFileData_GetError},
{"affx_fusionc::CCHPFileData_Read", _wrap_CCHPFileData_Read},
{"affx_fusionc::CCHPFileData_ReadHeader", _wrap_CCHPFileData_ReadHeader},
{"affx_fusionc::CCHPFileData_Exists", _wrap_CCHPFileData_Exists},
{"affx_fusionc::CCHPFileData_IsXDACompatibleFile", _wrap_CCHPFileData_IsXDACompatibleFile},
{"affx_fusionc::CCHPFileData_SetFileName", _wrap_CCHPFileData_SetFileName},
{"affx_fusionc::CCHPFileData_GetFileName", _wrap_CCHPFileData_GetFileName},
{"affx_fusionc::CCHPFileData_Clear", _wrap_CCHPFileData_Clear},
{"affx_fusionc::BarSequenceResultData_dValue_set", _wrap_BarSequenceResultData_dValue_set},
{"affx_fusionc::BarSequenceResultData_dValue_get", _wrap_BarSequenceResultData_dValue_get},
{"affx_fusionc::BarSequenceResultData_fValue_set", _wrap_BarSequenceResultData_fValue_set},
{"affx_fusionc::BarSequenceResultData_fValue_get", _wrap_BarSequenceResultData_fValue_get},
{"affx_fusionc::BarSequenceResultData_iValue_set", _wrap_BarSequenceResultData_iValue_set},
{"affx_fusionc::BarSequenceResultData_iValue_get", _wrap_BarSequenceResultData_iValue_get},
{"affx_fusionc::BarSequenceResultData_sValue_set", _wrap_BarSequenceResultData_sValue_set},
{"affx_fusionc::BarSequenceResultData_sValue_get", _wrap_BarSequenceResultData_sValue_get},
{"affx_fusionc::BarSequenceResultData_cValue_set", _wrap_BarSequenceResultData_cValue_set},
{"affx_fusionc::BarSequenceResultData_cValue_get", _wrap_BarSequenceResultData_cValue_get},
{"affx_fusionc::BarSequenceResultData_uiValue_set", _wrap_BarSequenceResultData_uiValue_set},
{"affx_fusionc::BarSequenceResultData_uiValue_get", _wrap_BarSequenceResultData_uiValue_get},
{"affx_fusionc::BarSequenceResultData_usValue_set", _wrap_BarSequenceResultData_usValue_set},
{"affx_fusionc::BarSequenceResultData_usValue_get", _wrap_BarSequenceResultData_usValue_get},
{"affx_fusionc::BarSequenceResultData_ucValue_set", _wrap_BarSequenceResultData_ucValue_set},
{"affx_fusionc::BarSequenceResultData_ucValue_get", _wrap_BarSequenceResultData_ucValue_get},
{"affx_fusionc::new_BarSequenceResultData", _wrap_new_BarSequenceResultData},
{"affx_fusionc::delete_BarSequenceResultData", _wrap_delete_BarSequenceResultData},
{"affx_fusionc::new_CGDACSequenceResultItem", _wrap_new_CGDACSequenceResultItem},
{"affx_fusionc::delete_CGDACSequenceResultItem", _wrap_delete_CGDACSequenceResultItem},
{"affx_fusionc::CGDACSequenceResultItem_GetName", _wrap_CGDACSequenceResultItem_GetName},
{"affx_fusionc::CGDACSequenceResultItem_GetVersion", _wrap_CGDACSequenceResultItem_GetVersion},
{"affx_fusionc::CGDACSequenceResultItem_GetGroupName", _wrap_CGDACSequenceResultItem_GetGroupName},
{"affx_fusionc::CGDACSequenceResultItem_GetNumberDataPoints", _wrap_CGDACSequenceResultItem_GetNumberDataPoints},
{"affx_fusionc::CGDACSequenceResultItem_GetNumberColumns", _wrap_CGDACSequenceResultItem_GetNumberColumns},
{"affx_fusionc::CGDACSequenceResultItem_GetColumnType", _wrap_CGDACSequenceResultItem_GetColumnType},
{"affx_fusionc::CGDACSequenceResultItem_GetData", _wrap_CGDACSequenceResultItem_GetData},
{"affx_fusionc::CGDACSequenceResultItem_GetNumberParameters", _wrap_CGDACSequenceResultItem_GetNumberParameters},
{"affx_fusionc::CGDACSequenceResultItem_GetParameter", _wrap_CGDACSequenceResultItem_GetParameter},
{"affx_fusionc::CGDACSequenceResultItem_SetName", _wrap_CGDACSequenceResultItem_SetName},
{"affx_fusionc::CGDACSequenceResultItem_SetVersion", _wrap_CGDACSequenceResultItem_SetVersion},
{"affx_fusionc::CGDACSequenceResultItem_SetGroupName", _wrap_CGDACSequenceResultItem_SetGroupName},
{"affx_fusionc::CGDACSequenceResultItem_SetNumberDataPoints", _wrap_CGDACSequenceResultItem_SetNumberDataPoints},
{"affx_fusionc::CGDACSequenceResultItem_SetDataPoint", _wrap_CGDACSequenceResultItem_SetDataPoint},
{"affx_fusionc::CGDACSequenceResultItem_AddParameter", _wrap_CGDACSequenceResultItem_AddParameter},
{"affx_fusionc::new_CBARFileData", _wrap_new_CBARFileData},
{"affx_fusionc::delete_CBARFileData", _wrap_delete_CBARFileData},
{"affx_fusionc::CBARFileData_SetFileName", _wrap_CBARFileData_SetFileName},
{"affx_fusionc::CBARFileData_GetFileName", _wrap_CBARFileData_GetFileName},
{"affx_fusionc::CBARFileData_Read", _wrap_CBARFileData_Read},
{"affx_fusionc::CBARFileData_ReadHeader", _wrap_CBARFileData_ReadHeader},
{"affx_fusionc::CBARFileData_Exists", _wrap_CBARFileData_Exists},
{"affx_fusionc::CBARFileData_Close", _wrap_CBARFileData_Close},
{"affx_fusionc::CBARFileData_GetError", _wrap_CBARFileData_GetError},
{"affx_fusionc::CBARFileData_GetVersion", _wrap_CBARFileData_GetVersion},
{"affx_fusionc::CBARFileData_GetNumberSequences", _wrap_CBARFileData_GetNumberSequences},
{"affx_fusionc::CBARFileData_GetNumberColumns", _wrap_CBARFileData_GetNumberColumns},
{"affx_fusionc::CBARFileData_GetNumberParameters", _wrap_CBARFileData_GetNumberParameters},
{"affx_fusionc::CBARFileData_GetParameter", _wrap_CBARFileData_GetParameter},
{"affx_fusionc::CBARFileData_GetColumnTypes", _wrap_CBARFileData_GetColumnTypes},
{"affx_fusionc::CBARFileData_GetResults", _wrap_CBARFileData_GetResults},
{"affx_fusionc::CBARFileData_AddAlgorithmParameter", _wrap_CBARFileData_AddAlgorithmParameter},
{"affx_fusionc::CBARFileData_AddColumn", _wrap_CBARFileData_AddColumn},
{"affx_fusionc::CBARFileData_SetNumberSequences", _wrap_CBARFileData_SetNumberSequences},
{"affx_fusionc::CBARFileData_GetResultsPtr", _wrap_CBARFileData_GetResultsPtr},
{"affx_fusionc::GDACSequenceHitItemType_PMX_set", _wrap_GDACSequenceHitItemType_PMX_set},
{"affx_fusionc::GDACSequenceHitItemType_PMX_get", _wrap_GDACSequenceHitItemType_PMX_get},
{"affx_fusionc::GDACSequenceHitItemType_PMY_set", _wrap_GDACSequenceHitItemType_PMY_set},
{"affx_fusionc::GDACSequenceHitItemType_PMY_get", _wrap_GDACSequenceHitItemType_PMY_get},
{"affx_fusionc::GDACSequenceHitItemType_MMX_set", _wrap_GDACSequenceHitItemType_MMX_set},
{"affx_fusionc::GDACSequenceHitItemType_MMX_get", _wrap_GDACSequenceHitItemType_MMX_get},
{"affx_fusionc::GDACSequenceHitItemType_MMY_set", _wrap_GDACSequenceHitItemType_MMY_set},
{"affx_fusionc::GDACSequenceHitItemType_MMY_get", _wrap_GDACSequenceHitItemType_MMY_get},
{"affx_fusionc::GDACSequenceHitItemType_MatchScore_set", _wrap_GDACSequenceHitItemType_MatchScore_set},
{"affx_fusionc::GDACSequenceHitItemType_MatchScore_get", _wrap_GDACSequenceHitItemType_MatchScore_get},
{"affx_fusionc::GDACSequenceHitItemType_Position_set", _wrap_GDACSequenceHitItemType_Position_set},
{"affx_fusionc::GDACSequenceHitItemType_Position_get", _wrap_GDACSequenceHitItemType_Position_get},
{"affx_fusionc::GDACSequenceHitItemType_PMProbe_set", _wrap_GDACSequenceHitItemType_PMProbe_set},
{"affx_fusionc::GDACSequenceHitItemType_PMProbe_get", _wrap_GDACSequenceHitItemType_PMProbe_get},
{"affx_fusionc::GDACSequenceHitItemType_ProbeLength_set", _wrap_GDACSequenceHitItemType_ProbeLength_set},
{"affx_fusionc::GDACSequenceHitItemType_ProbeLength_get", _wrap_GDACSequenceHitItemType_ProbeLength_get},
{"affx_fusionc::GDACSequenceHitItemType_TopStrand_set", _wrap_GDACSequenceHitItemType_TopStrand_set},
{"affx_fusionc::GDACSequenceHitItemType_TopStrand_get", _wrap_GDACSequenceHitItemType_TopStrand_get},
{"affx_fusionc::GDACSequenceHitItemType__GDACSequenceHitItemType_less_than", _wrap_GDACSequenceHitItemType__GDACSequenceHitItemType_less_than},
{"affx_fusionc::GDACSequenceHitItemType_PackedPMProbe_set", _wrap_GDACSequenceHitItemType_PackedPMProbe_set},
{"affx_fusionc::GDACSequenceHitItemType_PackedPMProbe_get", _wrap_GDACSequenceHitItemType_PackedPMProbe_get},
{"affx_fusionc::new_GDACSequenceHitItemType", _wrap_new_GDACSequenceHitItemType},
{"affx_fusionc::delete_GDACSequenceHitItemType", _wrap_delete_GDACSequenceHitItemType},
{"affx_fusionc::new_CGDACSequenceItem", _wrap_new_CGDACSequenceItem},
{"affx_fusionc::delete_CGDACSequenceItem", _wrap_delete_CGDACSequenceItem},
{"affx_fusionc::CGDACSequenceItem_GetName", _wrap_CGDACSequenceItem_GetName},
{"affx_fusionc::CGDACSequenceItem_GroupName", _wrap_CGDACSequenceItem_GroupName},
{"affx_fusionc::CGDACSequenceItem_GetSeqVersion", _wrap_CGDACSequenceItem_GetSeqVersion},
{"affx_fusionc::CGDACSequenceItem_GetProbeMapping", _wrap_CGDACSequenceItem_GetProbeMapping},
{"affx_fusionc::CGDACSequenceItem_GetNumber", _wrap_CGDACSequenceItem_GetNumber},
{"affx_fusionc::CGDACSequenceItem_GetNumberHits", _wrap_CGDACSequenceItem_GetNumberHits},
{"affx_fusionc::CGDACSequenceItem_GetNumberParameters", _wrap_CGDACSequenceItem_GetNumberParameters},
{"affx_fusionc::CGDACSequenceItem_GetParameter", _wrap_CGDACSequenceItem_GetParameter},
{"affx_fusionc::CGDACSequenceItem_GetHitItem", _wrap_CGDACSequenceItem_GetHitItem},
{"affx_fusionc::new_CBPMAPFileData", _wrap_new_CBPMAPFileData},
{"affx_fusionc::delete_CBPMAPFileData", _wrap_delete_CBPMAPFileData},
{"affx_fusionc::CBPMAPFileData_SetFileName", _wrap_CBPMAPFileData_SetFileName},
{"affx_fusionc::CBPMAPFileData_GetFileName", _wrap_CBPMAPFileData_GetFileName},
{"affx_fusionc::CBPMAPFileData_Read", _wrap_CBPMAPFileData_Read},
{"affx_fusionc::CBPMAPFileData_ReadHeader", _wrap_CBPMAPFileData_ReadHeader},
{"affx_fusionc::CBPMAPFileData_Exists", _wrap_CBPMAPFileData_Exists},
{"affx_fusionc::CBPMAPFileData_Close", _wrap_CBPMAPFileData_Close},
{"affx_fusionc::CBPMAPFileData_GetError", _wrap_CBPMAPFileData_GetError},
{"affx_fusionc::CBPMAPFileData_GetNumberSequences", _wrap_CBPMAPFileData_GetNumberSequences},
{"affx_fusionc::CBPMAPFileData_GetVersion", _wrap_CBPMAPFileData_GetVersion},
{"affx_fusionc::CBPMAPFileData_GetSequenceItem", _wrap_CBPMAPFileData_GetSequenceItem},
{"affx_fusionc::new_CEXPFileData", _wrap_new_CEXPFileData},
{"affx_fusionc::delete_CEXPFileData", _wrap_delete_CEXPFileData},
{"affx_fusionc::CEXPFileData_SetFileName", _wrap_CEXPFileData_SetFileName},
{"affx_fusionc::CEXPFileData_GetFileName", _wrap_CEXPFileData_GetFileName},
{"affx_fusionc::CEXPFileData_GetArrayType", _wrap_CEXPFileData_GetArrayType},
{"affx_fusionc::CEXPFileData_SetArrayType", _wrap_CEXPFileData_SetArrayType},
{"affx_fusionc::CEXPFileData_Read", _wrap_CEXPFileData_Read},
{"affx_fusionc::CEXPFileData_Exists", _wrap_CEXPFileData_Exists},
{"affx_fusionc::CEXPFileData_Clear", _wrap_CEXPFileData_Clear},
{"affx_fusionc::CEXPFileData_GetScanParameters", _wrap_CEXPFileData_GetScanParameters},
{"affx_fusionc::CEXPFileData_GetHybParameters", _wrap_CEXPFileData_GetHybParameters},
{"affx_fusionc::CEXPFileData_GetSampleParameters", _wrap_CEXPFileData_GetSampleParameters},
{"affx_fusionc::new_CGRCFileData", _wrap_new_CGRCFileData},
{"affx_fusionc::delete_CGRCFileData", _wrap_delete_CGRCFileData},
{"affx_fusionc::CGRCFileData_SetFileName", _wrap_CGRCFileData_SetFileName},
{"affx_fusionc::CGRCFileData_GetFileName", _wrap_CGRCFileData_GetFileName},
{"affx_fusionc::CGRCFileData_Read", _wrap_CGRCFileData_Read},
{"affx_fusionc::CGRCFileData_Exists", _wrap_CGRCFileData_Exists},
{"affx_fusionc::ProbeSetIndiciesType_probeSetName_set", _wrap_ProbeSetIndiciesType_probeSetName_set},
{"affx_fusionc::ProbeSetIndiciesType_probeSetName_get", _wrap_ProbeSetIndiciesType_probeSetName_get},
{"affx_fusionc::ProbeSetIndiciesType_indicies_set", _wrap_ProbeSetIndiciesType_indicies_set},
{"affx_fusionc::ProbeSetIndiciesType_indicies_get", _wrap_ProbeSetIndiciesType_indicies_get},
{"affx_fusionc::new_ProbeSetIndiciesType", _wrap_new_ProbeSetIndiciesType},
{"affx_fusionc::delete_ProbeSetIndiciesType", _wrap_delete_ProbeSetIndiciesType},
{"affx_fusionc::new_CMSKFileData", _wrap_new_CMSKFileData},
{"affx_fusionc::delete_CMSKFileData", _wrap_delete_CMSKFileData},
{"affx_fusionc::CMSKFileData_SetFileName", _wrap_CMSKFileData_SetFileName},
{"affx_fusionc::CMSKFileData_GetFileName", _wrap_CMSKFileData_GetFileName},
{"affx_fusionc::CMSKFileData_GetArrayType", _wrap_CMSKFileData_GetArrayType},
{"affx_fusionc::CMSKFileData_GetProbeSetIndiciesListCount", _wrap_CMSKFileData_GetProbeSetIndiciesListCount},
{"affx_fusionc::CMSKFileData_GetProbeSetListCount", _wrap_CMSKFileData_GetProbeSetListCount},
{"affx_fusionc::CMSKFileData_GetError", _wrap_CMSKFileData_GetError},
{"affx_fusionc::CMSKFileData_GetProbeSetIndiciesIterators", _wrap_CMSKFileData_GetProbeSetIndiciesIterators},
{"affx_fusionc::CMSKFileData_GetProbeSetIterators", _wrap_CMSKFileData_GetProbeSetIterators},
{"affx_fusionc::CMSKFileData_Read", _wrap_CMSKFileData_Read},
{"affx_fusionc::CMSKFileData_Exists", _wrap_CMSKFileData_Exists},
{"affx_fusionc::CMSKFileData_Clear", _wrap_CMSKFileData_Clear},
{"affx_fusionc::ProbeSetInfo_probeSetName_set", _wrap_ProbeSetInfo_probeSetName_set},
{"affx_fusionc::ProbeSetInfo_probeSetName_get", _wrap_ProbeSetInfo_probeSetName_get},
{"affx_fusionc::ProbeSetInfo_numberPairs_set", _wrap_ProbeSetInfo_numberPairs_set},
{"affx_fusionc::ProbeSetInfo_numberPairs_get", _wrap_ProbeSetInfo_numberPairs_get},
{"affx_fusionc::new_ProbeSetInfo", _wrap_new_ProbeSetInfo},
{"affx_fusionc::delete_ProbeSetInfo", _wrap_delete_ProbeSetInfo},
{"affx_fusionc::new_CPSIFileData", _wrap_new_CPSIFileData},
{"affx_fusionc::delete_CPSIFileData", _wrap_delete_CPSIFileData},
{"affx_fusionc::CPSIFileData_SetFileName", _wrap_CPSIFileData_SetFileName},
{"affx_fusionc::CPSIFileData_GetFileName", _wrap_CPSIFileData_GetFileName},
{"affx_fusionc::CPSIFileData_GetProbeSetCount", _wrap_CPSIFileData_GetProbeSetCount},
{"affx_fusionc::CPSIFileData_GetProbeSetName", _wrap_CPSIFileData_GetProbeSetName},
{"affx_fusionc::CPSIFileData_GetProbePairs", _wrap_CPSIFileData_GetProbePairs},
{"affx_fusionc::CPSIFileData_Read", _wrap_CPSIFileData_Read},
{"affx_fusionc::CPSIFileData_Exists", _wrap_CPSIFileData_Exists},
{"affx_fusionc::CPSIFileData_Clear", _wrap_CPSIFileData_Clear},
{"affx_fusionc::AttributeNameValueType_name_set", _wrap_AttributeNameValueType_name_set},
{"affx_fusionc::AttributeNameValueType_name_get", _wrap_AttributeNameValueType_name_get},
{"affx_fusionc::AttributeNameValueType_value_set", _wrap_AttributeNameValueType_value_set},
{"affx_fusionc::AttributeNameValueType_value_get", _wrap_AttributeNameValueType_value_get},
{"affx_fusionc::AttributeNameValueType_type_set", _wrap_AttributeNameValueType_type_set},
{"affx_fusionc::AttributeNameValueType_type_get", _wrap_AttributeNameValueType_type_get},
{"affx_fusionc::new_AttributeNameValueType", _wrap_new_AttributeNameValueType},
{"affx_fusionc::delete_AttributeNameValueType", _wrap_delete_AttributeNameValueType},
{"affx_fusionc::new_DttArrayData", _wrap_new_DttArrayData},
{"affx_fusionc::delete_DttArrayData", _wrap_delete_DttArrayData},
{"affx_fusionc::DttArrayData_GetArrayType", _wrap_DttArrayData_GetArrayType},
{"affx_fusionc::DttArrayData_SetArrayType", _wrap_DttArrayData_SetArrayType},
{"affx_fusionc::DttArrayData_GetExperimentName", _wrap_DttArrayData_GetExperimentName},
{"affx_fusionc::DttArrayData_SetExperimentName", _wrap_DttArrayData_SetExperimentName},
{"affx_fusionc::DttArrayData_Attributes", _wrap_DttArrayData_Attributes},
{"affx_fusionc::DttArrayData_Clear", _wrap_DttArrayData_Clear},
{"affx_fusionc::new_DttArrayFileReader", _wrap_new_DttArrayFileReader},
{"affx_fusionc::delete_DttArrayFileReader", _wrap_delete_DttArrayFileReader},
{"affx_fusionc::DttArrayFileReader_GetFileName", _wrap_DttArrayFileReader_GetFileName},
{"affx_fusionc::DttArrayFileReader_SetFileName", _wrap_DttArrayFileReader_SetFileName},
{"affx_fusionc::DttArrayFileReader_Read", _wrap_DttArrayFileReader_Read},
{"affx_fusionc::DttArrayFileReader_Exists", _wrap_DttArrayFileReader_Exists},
{"affx_fusionc::FusionTagValuePairType_Tag_set", _wrap_FusionTagValuePairType_Tag_set},
{"affx_fusionc::FusionTagValuePairType_Tag_get", _wrap_FusionTagValuePairType_Tag_get},
{"affx_fusionc::FusionTagValuePairType_Value_set", _wrap_FusionTagValuePairType_Value_set},
{"affx_fusionc::FusionTagValuePairType_Value_get", _wrap_FusionTagValuePairType_Value_get},
{"affx_fusionc::FusionTagValuePairType_FusionTagValuePairType_assign", _wrap_FusionTagValuePairType_FusionTagValuePairType_assign},
{"affx_fusionc::FusionTagValuePairType_FusionTagValuePairType_equals_obj", _wrap_FusionTagValuePairType_FusionTagValuePairType_equals_obj},
{"affx_fusionc::FusionTagValuePairType_FusionTagValuePairType_equals_tag", _wrap_FusionTagValuePairType_FusionTagValuePairType_equals_tag},
{"affx_fusionc::FusionTagValuePairType_DetailedType", _wrap_FusionTagValuePairType_DetailedType},
{"affx_fusionc::new_FusionTagValuePairType", _wrap_new_FusionTagValuePairType},
{"affx_fusionc::delete_FusionTagValuePairType", _wrap_delete_FusionTagValuePairType},
{"affx_fusionc::new_FusionArrayFileReader", _wrap_new_FusionArrayFileReader},
{"affx_fusionc::delete_FusionArrayFileReader", _wrap_delete_FusionArrayFileReader},
{"affx_fusionc::FusionArrayFileReader_Read", _wrap_FusionArrayFileReader_Read},
{"affx_fusionc::FusionArrayFileReader_DataTypeIdentifier", _wrap_FusionArrayFileReader_DataTypeIdentifier},
{"affx_fusionc::new_FusionProbeSetResults", _wrap_new_FusionProbeSetResults},
{"affx_fusionc::delete_FusionProbeSetResults", _wrap_delete_FusionProbeSetResults},
{"affx_fusionc::FusionExpressionProbeSetResults_Clear", _wrap_FusionExpressionProbeSetResults_Clear},
{"affx_fusionc::FusionExpressionProbeSetResults_GetDetectionPValue", _wrap_FusionExpressionProbeSetResults_GetDetectionPValue},
{"affx_fusionc::FusionExpressionProbeSetResults_GetSignal", _wrap_FusionExpressionProbeSetResults_GetSignal},
{"affx_fusionc::FusionExpressionProbeSetResults_GetNumPairs", _wrap_FusionExpressionProbeSetResults_GetNumPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_GetNumUsedPairs", _wrap_FusionExpressionProbeSetResults_GetNumUsedPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_GetDetection", _wrap_FusionExpressionProbeSetResults_GetDetection},
{"affx_fusionc::FusionExpressionProbeSetResults_HasCompResults", _wrap_FusionExpressionProbeSetResults_HasCompResults},
{"affx_fusionc::FusionExpressionProbeSetResults_GetChangePValue", _wrap_FusionExpressionProbeSetResults_GetChangePValue},
{"affx_fusionc::FusionExpressionProbeSetResults_GetSignalLogRatio", _wrap_FusionExpressionProbeSetResults_GetSignalLogRatio},
{"affx_fusionc::FusionExpressionProbeSetResults_GetSignalLogRatioLow", _wrap_FusionExpressionProbeSetResults_GetSignalLogRatioLow},
{"affx_fusionc::FusionExpressionProbeSetResults_GetSignalLogRatioHigh", _wrap_FusionExpressionProbeSetResults_GetSignalLogRatioHigh},
{"affx_fusionc::FusionExpressionProbeSetResults_GetNumCommonPairs", _wrap_FusionExpressionProbeSetResults_GetNumCommonPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_GetChange", _wrap_FusionExpressionProbeSetResults_GetChange},
{"affx_fusionc::FusionExpressionProbeSetResults_SetDetectionPValue", _wrap_FusionExpressionProbeSetResults_SetDetectionPValue},
{"affx_fusionc::FusionExpressionProbeSetResults_SetSignal", _wrap_FusionExpressionProbeSetResults_SetSignal},
{"affx_fusionc::FusionExpressionProbeSetResults_SetNumPairs", _wrap_FusionExpressionProbeSetResults_SetNumPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_SetNumUsedPairs", _wrap_FusionExpressionProbeSetResults_SetNumUsedPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_SetDetection", _wrap_FusionExpressionProbeSetResults_SetDetection},
{"affx_fusionc::FusionExpressionProbeSetResults_SetHasCompResults", _wrap_FusionExpressionProbeSetResults_SetHasCompResults},
{"affx_fusionc::FusionExpressionProbeSetResults_SetChangePValue", _wrap_FusionExpressionProbeSetResults_SetChangePValue},
{"affx_fusionc::FusionExpressionProbeSetResults_SetSignalLogRatio", _wrap_FusionExpressionProbeSetResults_SetSignalLogRatio},
{"affx_fusionc::FusionExpressionProbeSetResults_SetSignalLogRatioLow", _wrap_FusionExpressionProbeSetResults_SetSignalLogRatioLow},
{"affx_fusionc::FusionExpressionProbeSetResults_SetSignalLogRatioHigh", _wrap_FusionExpressionProbeSetResults_SetSignalLogRatioHigh},
{"affx_fusionc::FusionExpressionProbeSetResults_SetNumCommonPairs", _wrap_FusionExpressionProbeSetResults_SetNumCommonPairs},
{"affx_fusionc::FusionExpressionProbeSetResults_SetChange", _wrap_FusionExpressionProbeSetResults_SetChange},
{"affx_fusionc::FusionExpressionProbeSetResults_GetDetectionString", _wrap_FusionExpressionProbeSetResults_GetDetectionString},
{"affx_fusionc::FusionExpressionProbeSetResults_GetChangeString", _wrap_FusionExpressionProbeSetResults_GetChangeString},
{"affx_fusionc::FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign", _wrap_FusionExpressionProbeSetResults_FusionExpressionProbeSetResults_assign},
{"affx_fusionc::new_FusionExpressionProbeSetResults", _wrap_new_FusionExpressionProbeSetResults},
{"affx_fusionc::delete_FusionExpressionProbeSetResults", _wrap_delete_FusionExpressionProbeSetResults},
{"affx_fusionc::FusionGenotypeProbeSetResults_Clear", _wrap_FusionGenotypeProbeSetResults_Clear},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetAlleleCall", _wrap_FusionGenotypeProbeSetResults_GetAlleleCall},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetConfidence", _wrap_FusionGenotypeProbeSetResults_GetConfidence},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetRAS1", _wrap_FusionGenotypeProbeSetResults_GetRAS1},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetRAS2", _wrap_FusionGenotypeProbeSetResults_GetRAS2},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetPValueAA", _wrap_FusionGenotypeProbeSetResults_GetPValueAA},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetPValueAB", _wrap_FusionGenotypeProbeSetResults_GetPValueAB},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetPValueBB", _wrap_FusionGenotypeProbeSetResults_GetPValueBB},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetPValueNoCall", _wrap_FusionGenotypeProbeSetResults_GetPValueNoCall},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetAlleleCall", _wrap_FusionGenotypeProbeSetResults_SetAlleleCall},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetConfidence", _wrap_FusionGenotypeProbeSetResults_SetConfidence},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetRAS1", _wrap_FusionGenotypeProbeSetResults_SetRAS1},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetRAS2", _wrap_FusionGenotypeProbeSetResults_SetRAS2},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetPValueAA", _wrap_FusionGenotypeProbeSetResults_SetPValueAA},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetPValueAB", _wrap_FusionGenotypeProbeSetResults_SetPValueAB},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetPValueBB", _wrap_FusionGenotypeProbeSetResults_SetPValueBB},
{"affx_fusionc::FusionGenotypeProbeSetResults_SetPValueNoCall", _wrap_FusionGenotypeProbeSetResults_SetPValueNoCall},
{"affx_fusionc::FusionGenotypeProbeSetResults_GetAlleleCallString", _wrap_FusionGenotypeProbeSetResults_GetAlleleCallString},
{"affx_fusionc::FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign", _wrap_FusionGenotypeProbeSetResults_FusionGenotypeProbeSetResults_assign},
{"affx_fusionc::new_FusionGenotypeProbeSetResults", _wrap_new_FusionGenotypeProbeSetResults},
{"affx_fusionc::delete_FusionGenotypeProbeSetResults", _wrap_delete_FusionGenotypeProbeSetResults},
{"affx_fusionc::FusionUniversalProbeSetResults_GetBackground", _wrap_FusionUniversalProbeSetResults_GetBackground},
{"affx_fusionc::FusionUniversalProbeSetResults_SetBackground", _wrap_FusionUniversalProbeSetResults_SetBackground},
{"affx_fusionc::FusionUniversalProbeSetResults_Clear", _wrap_FusionUniversalProbeSetResults_Clear},
{"affx_fusionc::FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign", _wrap_FusionUniversalProbeSetResults_FusionUniversalProbeSetResults_assign},
{"affx_fusionc::new_FusionUniversalProbeSetResults", _wrap_new_FusionUniversalProbeSetResults},
{"affx_fusionc::delete_FusionUniversalProbeSetResults", _wrap_delete_FusionUniversalProbeSetResults},
{"affx_fusionc::FusionCDFFileHeader_GetCols", _wrap_FusionCDFFileHeader_GetCols},
{"affx_fusionc::FusionCDFFileHeader_GetRows", _wrap_FusionCDFFileHeader_GetRows},
{"affx_fusionc::FusionCDFFileHeader_GetNumProbeSets", _wrap_FusionCDFFileHeader_GetNumProbeSets},
{"affx_fusionc::FusionCDFFileHeader_GetNumQCProbeSets", _wrap_FusionCDFFileHeader_GetNumQCProbeSets},
{"affx_fusionc::FusionCDFFileHeader_GetReference", _wrap_FusionCDFFileHeader_GetReference},
{"affx_fusionc::new_FusionCDFFileHeader", _wrap_new_FusionCDFFileHeader},
{"affx_fusionc::delete_FusionCDFFileHeader", _wrap_delete_FusionCDFFileHeader},
{"affx_fusionc::FusionCDFProbeInformation_GetListIndex", _wrap_FusionCDFProbeInformation_GetListIndex},
{"affx_fusionc::FusionCDFProbeInformation_GetExpos", _wrap_FusionCDFProbeInformation_GetExpos},
{"affx_fusionc::FusionCDFProbeInformation_GetX", _wrap_FusionCDFProbeInformation_GetX},
{"affx_fusionc::FusionCDFProbeInformation_GetY", _wrap_FusionCDFProbeInformation_GetY},
{"affx_fusionc::FusionCDFProbeInformation_GetPBase", _wrap_FusionCDFProbeInformation_GetPBase},
{"affx_fusionc::FusionCDFProbeInformation_GetTBase", _wrap_FusionCDFProbeInformation_GetTBase},
{"affx_fusionc::new_FusionCDFProbeInformation", _wrap_new_FusionCDFProbeInformation},
{"affx_fusionc::delete_FusionCDFProbeInformation", _wrap_delete_FusionCDFProbeInformation},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetDirection", _wrap_FusionCDFProbeGroupInformation_GetDirection},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetNumLists", _wrap_FusionCDFProbeGroupInformation_GetNumLists},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetNumCells", _wrap_FusionCDFProbeGroupInformation_GetNumCells},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetNumCellsPerList", _wrap_FusionCDFProbeGroupInformation_GetNumCellsPerList},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetStart", _wrap_FusionCDFProbeGroupInformation_GetStart},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetStop", _wrap_FusionCDFProbeGroupInformation_GetStop},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetName", _wrap_FusionCDFProbeGroupInformation_GetName},
{"affx_fusionc::FusionCDFProbeGroupInformation_GetCell", _wrap_FusionCDFProbeGroupInformation_GetCell},
{"affx_fusionc::new_FusionCDFProbeGroupInformation", _wrap_new_FusionCDFProbeGroupInformation},
{"affx_fusionc::delete_FusionCDFProbeGroupInformation", _wrap_delete_FusionCDFProbeGroupInformation},
{"affx_fusionc::FusionCDFProbeSetInformation_GetProbeSetType", _wrap_FusionCDFProbeSetInformation_GetProbeSetType},
{"affx_fusionc::FusionCDFProbeSetInformation_GetDirection", _wrap_FusionCDFProbeSetInformation_GetDirection},
{"affx_fusionc::FusionCDFProbeSetInformation_GetNumLists", _wrap_FusionCDFProbeSetInformation_GetNumLists},
{"affx_fusionc::FusionCDFProbeSetInformation_GetNumGroups", _wrap_FusionCDFProbeSetInformation_GetNumGroups},
{"affx_fusionc::FusionCDFProbeSetInformation_GetNumCells", _wrap_FusionCDFProbeSetInformation_GetNumCells},
{"affx_fusionc::FusionCDFProbeSetInformation_GetNumCellsPerList", _wrap_FusionCDFProbeSetInformation_GetNumCellsPerList},
{"affx_fusionc::FusionCDFProbeSetInformation_GetProbeSetNumber", _wrap_FusionCDFProbeSetInformation_GetProbeSetNumber},
{"affx_fusionc::FusionCDFProbeSetInformation_GetGroupInformation", _wrap_FusionCDFProbeSetInformation_GetGroupInformation},
{"affx_fusionc::new_FusionCDFProbeSetInformation", _wrap_new_FusionCDFProbeSetInformation},
{"affx_fusionc::delete_FusionCDFProbeSetInformation", _wrap_delete_FusionCDFProbeSetInformation},
{"affx_fusionc::new_FusionCDFQCProbeInformation", _wrap_new_FusionCDFQCProbeInformation},
{"affx_fusionc::delete_FusionCDFQCProbeInformation", _wrap_delete_FusionCDFQCProbeInformation},
{"affx_fusionc::FusionCDFQCProbeInformation_GetX", _wrap_FusionCDFQCProbeInformation_GetX},
{"affx_fusionc::FusionCDFQCProbeInformation_GetY", _wrap_FusionCDFQCProbeInformation_GetY},
{"affx_fusionc::FusionCDFQCProbeInformation_GetPLen", _wrap_FusionCDFQCProbeInformation_GetPLen},
{"affx_fusionc::FusionCDFQCProbeInformation_IsPerfectMatchProbe", _wrap_FusionCDFQCProbeInformation_IsPerfectMatchProbe},
{"affx_fusionc::FusionCDFQCProbeInformation_IsBackgroundProbe", _wrap_FusionCDFQCProbeInformation_IsBackgroundProbe},
{"affx_fusionc::FusionCDFQCProbeSetInformation_GetQCProbeSetType", _wrap_FusionCDFQCProbeSetInformation_GetQCProbeSetType},
{"affx_fusionc::FusionCDFQCProbeSetInformation_GetNumCells", _wrap_FusionCDFQCProbeSetInformation_GetNumCells},
{"affx_fusionc::FusionCDFQCProbeSetInformation_GetProbeInformation", _wrap_FusionCDFQCProbeSetInformation_GetProbeInformation},
{"affx_fusionc::new_FusionCDFQCProbeSetInformation", _wrap_new_FusionCDFQCProbeSetInformation},
{"affx_fusionc::delete_FusionCDFQCProbeSetInformation", _wrap_delete_FusionCDFQCProbeSetInformation},
{"affx_fusionc::new_FusionCDFData", _wrap_new_FusionCDFData},
{"affx_fusionc::delete_FusionCDFData", _wrap_delete_FusionCDFData},
{"affx_fusionc::FusionCDFData_SetFileName", _wrap_FusionCDFData_SetFileName},
{"affx_fusionc::FusionCDFData_GetFileName", _wrap_FusionCDFData_GetFileName},
{"affx_fusionc::FusionCDFData_GetHeader", _wrap_FusionCDFData_GetHeader},
{"affx_fusionc::FusionCDFData_GetError", _wrap_FusionCDFData_GetError},
{"affx_fusionc::FusionCDFData_GetProbeSetName", _wrap_FusionCDFData_GetProbeSetName},
{"affx_fusionc::FusionCDFData_GetChipType", _wrap_FusionCDFData_GetChipType},
{"affx_fusionc::FusionCDFData_Read", _wrap_FusionCDFData_Read},
{"affx_fusionc::FusionCDFData_ReadHeader", _wrap_FusionCDFData_ReadHeader},
{"affx_fusionc::FusionCDFData_Exists", _wrap_FusionCDFData_Exists},
{"affx_fusionc::FusionCDFData_Close", _wrap_FusionCDFData_Close},
{"affx_fusionc::FusionCDFData_IsXDACompatibleFile", _wrap_FusionCDFData_IsXDACompatibleFile},
{"affx_fusionc::FusionCDFData_IsCalvinCompatibleFile", _wrap_FusionCDFData_IsCalvinCompatibleFile},
{"affx_fusionc::FusionCDFData_GetProbeSetType", _wrap_FusionCDFData_GetProbeSetType},
{"affx_fusionc::FusionCDFData_GetProbeSetInformation", _wrap_FusionCDFData_GetProbeSetInformation},
{"affx_fusionc::FusionCDFData_GetQCProbeSetInformation", _wrap_FusionCDFData_GetQCProbeSetInformation},
{"affx_fusionc::FusionCDFData_FusionGetQCProbeSetInformation_By_Type", _wrap_FusionCDFData_FusionGetQCProbeSetInformation_By_Type},
{"affx_fusionc::FusionCDFQCProbeSetNames_GetStaticCDFQCProbeSetName", _wrap_FusionCDFQCProbeSetNames_GetStaticCDFQCProbeSetName},
{"affx_fusionc::new_FusionCDFQCProbeSetNames", _wrap_new_FusionCDFQCProbeSetNames},
{"affx_fusionc::delete_FusionCDFQCProbeSetNames", _wrap_delete_FusionCDFQCProbeSetNames},
{"affx_fusionc::new_FusionCELData", _wrap_new_FusionCELData},
{"affx_fusionc::delete_FusionCELData", _wrap_delete_FusionCELData},
{"affx_fusionc::FusionCELData_SetFileName", _wrap_FusionCELData_SetFileName},
{"affx_fusionc::FusionCELData_GetFileName", _wrap_FusionCELData_GetFileName},
{"affx_fusionc::FusionCELData_SetError", _wrap_FusionCELData_SetError},
{"affx_fusionc::FusionCELData_GetError", _wrap_FusionCELData_GetError},
{"affx_fusionc::FusionCELData_GetHeaderKey", _wrap_FusionCELData_GetHeaderKey},
{"affx_fusionc::FusionCELData_GetVersion", _wrap_FusionCELData_GetVersion},
{"affx_fusionc::FusionCELData_GetCols", _wrap_FusionCELData_GetCols},
{"affx_fusionc::FusionCELData_GetRows", _wrap_FusionCELData_GetRows},
{"affx_fusionc::FusionCELData_GetNumCells", _wrap_FusionCELData_GetNumCells},
{"affx_fusionc::FusionCELData_GetHeader", _wrap_FusionCELData_GetHeader},
{"affx_fusionc::FusionCELData_GetAlg", _wrap_FusionCELData_GetAlg},
{"affx_fusionc::FusionCELData_GetParams", _wrap_FusionCELData_GetParams},
{"affx_fusionc::FusionCELData_GetAlgorithmParameter", _wrap_FusionCELData_GetAlgorithmParameter},
{"affx_fusionc::FusionCELData_GetAlgorithmParameterTag", _wrap_FusionCELData_GetAlgorithmParameterTag},
{"affx_fusionc::FusionCELData_GetNumberAlgorithmParameters", _wrap_FusionCELData_GetNumberAlgorithmParameters},
{"affx_fusionc::FusionCELData_GetAlgorithmParameters", _wrap_FusionCELData_GetAlgorithmParameters},
{"affx_fusionc::FusionCELData_GetParameters", _wrap_FusionCELData_GetParameters},
{"affx_fusionc::FusionCELData_GetChipType", _wrap_FusionCELData_GetChipType},
{"affx_fusionc::FusionCELData_GetCellMargin", _wrap_FusionCELData_GetCellMargin},
{"affx_fusionc::FusionCELData_GetNumOutliers", _wrap_FusionCELData_GetNumOutliers},
{"affx_fusionc::FusionCELData_GetNumMasked", _wrap_FusionCELData_GetNumMasked},
{"affx_fusionc::FusionCELData_IndexToX", _wrap_FusionCELData_IndexToX},
{"affx_fusionc::FusionCELData_IndexToY", _wrap_FusionCELData_IndexToY},
{"affx_fusionc::FusionCELData_XYToIndex", _wrap_FusionCELData_XYToIndex},
{"affx_fusionc::FusionCELData_GetEntry", _wrap_FusionCELData_GetEntry},
{"affx_fusionc::FusionCELData_GetIntensity", _wrap_FusionCELData_GetIntensity},
{"affx_fusionc::FusionCELData_GetStdv", _wrap_FusionCELData_GetStdv},
{"affx_fusionc::FusionCELData_GetPixels", _wrap_FusionCELData_GetPixels},
{"affx_fusionc::FusionCELData_IsMasked", _wrap_FusionCELData_IsMasked},
{"affx_fusionc::FusionCELData_IsOutlier", _wrap_FusionCELData_IsOutlier},
{"affx_fusionc::FusionCELData_Close", _wrap_FusionCELData_Close},
{"affx_fusionc::FusionCELData_GetFileSize", _wrap_FusionCELData_GetFileSize},
{"affx_fusionc::FusionCELData_Exists", _wrap_FusionCELData_Exists},
{"affx_fusionc::FusionCELData_ReadHeader", _wrap_FusionCELData_ReadHeader},
{"affx_fusionc::FusionCELData_Read", _wrap_FusionCELData_Read},
{"affx_fusionc::FusionCELData_ReadEx", _wrap_FusionCELData_ReadEx},
{"affx_fusionc::FusionCELData_GetReadState", _wrap_FusionCELData_GetReadState},
{"affx_fusionc::FusionCELData_Clear", _wrap_FusionCELData_Clear},
{"affx_fusionc::FusionCELData_SetAlgorithmName", _wrap_FusionCELData_SetAlgorithmName},
{"affx_fusionc::FusionCELData_AddAlgorithmParameter", _wrap_FusionCELData_AddAlgorithmParameter},
{"affx_fusionc::FusionCELData_SetDimensions", _wrap_FusionCELData_SetDimensions},
{"affx_fusionc::FusionCELData_SetChipType", _wrap_FusionCELData_SetChipType},
{"affx_fusionc::FusionCELData_SetMargin", _wrap_FusionCELData_SetMargin},
{"affx_fusionc::FusionCELFileEntryType_Intensity_set", _wrap_FusionCELFileEntryType_Intensity_set},
{"affx_fusionc::FusionCELFileEntryType_Intensity_get", _wrap_FusionCELFileEntryType_Intensity_get},
{"affx_fusionc::FusionCELFileEntryType_Stdv_set", _wrap_FusionCELFileEntryType_Stdv_set},
{"affx_fusionc::FusionCELFileEntryType_Stdv_get", _wrap_FusionCELFileEntryType_Stdv_get},
{"affx_fusionc::FusionCELFileEntryType_Pixels_set", _wrap_FusionCELFileEntryType_Pixels_set},
{"affx_fusionc::FusionCELFileEntryType_Pixels_get", _wrap_FusionCELFileEntryType_Pixels_get},
{"affx_fusionc::new_FusionCELFileEntryType", _wrap_new_FusionCELFileEntryType},
{"affx_fusionc::delete_FusionCELFileEntryType", _wrap_delete_FusionCELFileEntryType},
{"affx_fusionc::IFusionCELDataAdapter_CanReadFile", _wrap_IFusionCELDataAdapter_CanReadFile},
{"affx_fusionc::IFusionCELDataAdapter_SetFileName", _wrap_IFusionCELDataAdapter_SetFileName},
{"affx_fusionc::IFusionCELDataAdapter_GetFileName", _wrap_IFusionCELDataAdapter_GetFileName},
{"affx_fusionc::IFusionCELDataAdapter_SetError", _wrap_IFusionCELDataAdapter_SetError},
{"affx_fusionc::IFusionCELDataAdapter_GetError", _wrap_IFusionCELDataAdapter_GetError},
{"affx_fusionc::IFusionCELDataAdapter_GetHeaderKey", _wrap_IFusionCELDataAdapter_GetHeaderKey},
{"affx_fusionc::IFusionCELDataAdapter_GetVersion", _wrap_IFusionCELDataAdapter_GetVersion},
{"affx_fusionc::IFusionCELDataAdapter_GetCols", _wrap_IFusionCELDataAdapter_GetCols},
{"affx_fusionc::IFusionCELDataAdapter_GetRows", _wrap_IFusionCELDataAdapter_GetRows},
{"affx_fusionc::IFusionCELDataAdapter_GetNumCells", _wrap_IFusionCELDataAdapter_GetNumCells},
{"affx_fusionc::IFusionCELDataAdapter_GetHeader", _wrap_IFusionCELDataAdapter_GetHeader},
{"affx_fusionc::IFusionCELDataAdapter_GetAlg", _wrap_IFusionCELDataAdapter_GetAlg},
{"affx_fusionc::IFusionCELDataAdapter_GetParams", _wrap_IFusionCELDataAdapter_GetParams},
{"affx_fusionc::IFusionCELDataAdapter_GetAlgorithmParameter", _wrap_IFusionCELDataAdapter_GetAlgorithmParameter},
{"affx_fusionc::IFusionCELDataAdapter_GetAlgorithmParameterTag", _wrap_IFusionCELDataAdapter_GetAlgorithmParameterTag},
{"affx_fusionc::IFusionCELDataAdapter_GetNumberAlgorithmParameters", _wrap_IFusionCELDataAdapter_GetNumberAlgorithmParameters},
{"affx_fusionc::IFusionCELDataAdapter_GetAlgorithmParameters", _wrap_IFusionCELDataAdapter_GetAlgorithmParameters},
{"affx_fusionc::IFusionCELDataAdapter_GetParameters", _wrap_IFusionCELDataAdapter_GetParameters},
{"affx_fusionc::IFusionCELDataAdapter_GetChipType", _wrap_IFusionCELDataAdapter_GetChipType},
{"affx_fusionc::IFusionCELDataAdapter_GetCellMargin", _wrap_IFusionCELDataAdapter_GetCellMargin},
{"affx_fusionc::IFusionCELDataAdapter_GetNumOutliers", _wrap_IFusionCELDataAdapter_GetNumOutliers},
{"affx_fusionc::IFusionCELDataAdapter_GetNumMasked", _wrap_IFusionCELDataAdapter_GetNumMasked},
{"affx_fusionc::IFusionCELDataAdapter_IndexToX", _wrap_IFusionCELDataAdapter_IndexToX},
{"affx_fusionc::IFusionCELDataAdapter_IndexToY", _wrap_IFusionCELDataAdapter_IndexToY},
{"affx_fusionc::IFusionCELDataAdapter_XYToIndex", _wrap_IFusionCELDataAdapter_XYToIndex},
{"affx_fusionc::IFusionCELDataAdapter_GetEntry", _wrap_IFusionCELDataAdapter_GetEntry},
{"affx_fusionc::IFusionCELDataAdapter_GetIntensity", _wrap_IFusionCELDataAdapter_GetIntensity},
{"affx_fusionc::IFusionCELDataAdapter_GetStdv", _wrap_IFusionCELDataAdapter_GetStdv},
{"affx_fusionc::IFusionCELDataAdapter_GetPixels", _wrap_IFusionCELDataAdapter_GetPixels},
{"affx_fusionc::IFusionCELDataAdapter_IsMasked", _wrap_IFusionCELDataAdapter_IsMasked},
{"affx_fusionc::IFusionCELDataAdapter_IsOutlier", _wrap_IFusionCELDataAdapter_IsOutlier},
{"affx_fusionc::IFusionCELDataAdapter_Close", _wrap_IFusionCELDataAdapter_Close},
{"affx_fusionc::IFusionCELDataAdapter_ReadHeader", _wrap_IFusionCELDataAdapter_ReadHeader},
{"affx_fusionc::IFusionCELDataAdapter_Read", _wrap_IFusionCELDataAdapter_Read},
{"affx_fusionc::IFusionCELDataAdapter_ReadEx", _wrap_IFusionCELDataAdapter_ReadEx},
{"affx_fusionc::IFusionCELDataAdapter_GetReadState", _wrap_IFusionCELDataAdapter_GetReadState},
{"affx_fusionc::IFusionCELDataAdapter_Clear", _wrap_IFusionCELDataAdapter_Clear},
{"affx_fusionc::IFusionCELDataAdapter_SetAlgorithmName", _wrap_IFusionCELDataAdapter_SetAlgorithmName},
{"affx_fusionc::IFusionCELDataAdapter_AddAlgorithmParameter", _wrap_IFusionCELDataAdapter_AddAlgorithmParameter},
{"affx_fusionc::IFusionCELDataAdapter_SetDimensions", _wrap_IFusionCELDataAdapter_SetDimensions},
{"affx_fusionc::IFusionCELDataAdapter_SetChipType", _wrap_IFusionCELDataAdapter_SetChipType},
{"affx_fusionc::IFusionCELDataAdapter_SetMargin", _wrap_IFusionCELDataAdapter_SetMargin},
{"affx_fusionc::delete_IFusionCELDataAdapter", _wrap_delete_IFusionCELDataAdapter},
{"affx_fusionc::ConvertFusion", _wrap_ConvertFusion},
{"affx_fusionc::ConvertGCOS", _wrap_ConvertGCOS},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetCols", _wrap_IFusionCHPHeaderAdapter_GetCols},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetRows", _wrap_IFusionCHPHeaderAdapter_GetRows},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetNumProbeSets", _wrap_IFusionCHPHeaderAdapter_GetNumProbeSets},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAssayType", _wrap_IFusionCHPHeaderAdapter_GetAssayType},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetChipType", _wrap_IFusionCHPHeaderAdapter_GetChipType},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAlgName", _wrap_IFusionCHPHeaderAdapter_GetAlgName},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAlgVersion", _wrap_IFusionCHPHeaderAdapter_GetAlgVersion},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAlgorithmParameters", _wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameters},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAlgorithmParameterCount", _wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameterCount},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetSummaryParameters", _wrap_IFusionCHPHeaderAdapter_GetSummaryParameters},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetParentCellFile", _wrap_IFusionCHPHeaderAdapter_GetParentCellFile},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetProgID", _wrap_IFusionCHPHeaderAdapter_GetProgID},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetAlgorithmParameter", _wrap_IFusionCHPHeaderAdapter_GetAlgorithmParameter},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetSummaryParameter", _wrap_IFusionCHPHeaderAdapter_GetSummaryParameter},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetBackgroundZoneInfo", _wrap_IFusionCHPHeaderAdapter_GetBackgroundZoneInfo},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetBackgroundZones", _wrap_IFusionCHPHeaderAdapter_GetBackgroundZones},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetBackgroundZone", _wrap_IFusionCHPHeaderAdapter_GetBackgroundZone},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetMagic", _wrap_IFusionCHPHeaderAdapter_GetMagic},
{"affx_fusionc::IFusionCHPHeaderAdapter_GetVersion", _wrap_IFusionCHPHeaderAdapter_GetVersion},
{"affx_fusionc::delete_IFusionCHPHeaderAdapter", _wrap_delete_IFusionCHPHeaderAdapter},
{"affx_fusionc::IFusionCHPDataAdapter_GetHeader", _wrap_IFusionCHPDataAdapter_GetHeader},
{"affx_fusionc::IFusionCHPDataAdapter_CanReadFile", _wrap_IFusionCHPDataAdapter_CanReadFile},
{"affx_fusionc::IFusionCHPDataAdapter_GetExpressionResults", _wrap_IFusionCHPDataAdapter_GetExpressionResults},
{"affx_fusionc::IFusionCHPDataAdapter_GetGenotypingResults", _wrap_IFusionCHPDataAdapter_GetGenotypingResults},
{"affx_fusionc::IFusionCHPDataAdapter_GetUniversalResults", _wrap_IFusionCHPDataAdapter_GetUniversalResults},
{"affx_fusionc::IFusionCHPDataAdapter_Read", _wrap_IFusionCHPDataAdapter_Read},
{"affx_fusionc::IFusionCHPDataAdapter_ReadHeader", _wrap_IFusionCHPDataAdapter_ReadHeader},
{"affx_fusionc::IFusionCHPDataAdapter_SetFileName", _wrap_IFusionCHPDataAdapter_SetFileName},
{"affx_fusionc::IFusionCHPDataAdapter_GetFileName", _wrap_IFusionCHPDataAdapter_GetFileName},
{"affx_fusionc::IFusionCHPDataAdapter_Clear", _wrap_IFusionCHPDataAdapter_Clear},
{"affx_fusionc::delete_IFusionCHPDataAdapter", _wrap_delete_IFusionCHPDataAdapter},
{"affx_fusionc::new_FusionCHPHeader", _wrap_new_FusionCHPHeader},
{"affx_fusionc::delete_FusionCHPHeader", _wrap_delete_FusionCHPHeader},
{"affx_fusionc::FusionCHPHeader_GetCols", _wrap_FusionCHPHeader_GetCols},
{"affx_fusionc::FusionCHPHeader_GetRows", _wrap_FusionCHPHeader_GetRows},
{"affx_fusionc::FusionCHPHeader_GetNumProbeSets", _wrap_FusionCHPHeader_GetNumProbeSets},
{"affx_fusionc::FusionCHPHeader_GetAssayType", _wrap_FusionCHPHeader_GetAssayType},
{"affx_fusionc::FusionCHPHeader_GetChipType", _wrap_FusionCHPHeader_GetChipType},
{"affx_fusionc::FusionCHPHeader_GetAlgName", _wrap_FusionCHPHeader_GetAlgName},
{"affx_fusionc::FusionCHPHeader_GetAlgVersion", _wrap_FusionCHPHeader_GetAlgVersion},
{"affx_fusionc::FusionCHPHeader_AlgorithmParameters", _wrap_FusionCHPHeader_AlgorithmParameters},
{"affx_fusionc::FusionCHPHeader_AlgorithmParameterCount", _wrap_FusionCHPHeader_AlgorithmParameterCount},
{"affx_fusionc::FusionCHPHeader_SummaryParameters", _wrap_FusionCHPHeader_SummaryParameters},
{"affx_fusionc::FusionCHPHeader_GetParentCellFile", _wrap_FusionCHPHeader_GetParentCellFile},
{"affx_fusionc::FusionCHPHeader_GetProgID", _wrap_FusionCHPHeader_GetProgID},
{"affx_fusionc::FusionCHPHeader_GetAlgorithmParameter", _wrap_FusionCHPHeader_GetAlgorithmParameter},
{"affx_fusionc::FusionCHPHeader_GetSummaryParameter", _wrap_FusionCHPHeader_GetSummaryParameter},
{"affx_fusionc::FusionCHPHeader_GetBackgroundZoneInfo", _wrap_FusionCHPHeader_GetBackgroundZoneInfo},
{"affx_fusionc::FusionCHPHeader_GetBackgroundZones", _wrap_FusionCHPHeader_GetBackgroundZones},
{"affx_fusionc::FusionCHPHeader_GetBackgroundZone", _wrap_FusionCHPHeader_GetBackgroundZone},
{"affx_fusionc::FusionCHPHeader_GetMagic", _wrap_FusionCHPHeader_GetMagic},
{"affx_fusionc::FusionCHPHeader_GetVersion", _wrap_FusionCHPHeader_GetVersion},
{"affx_fusionc::FusionCHPHeader_CheckAdapter", _wrap_FusionCHPHeader_CheckAdapter},
{"affx_fusionc::new_FusionCHPData", _wrap_new_FusionCHPData},
{"affx_fusionc::delete_FusionCHPData", _wrap_delete_FusionCHPData},
{"affx_fusionc::FusionCHPData_GetExpressionResults", _wrap_FusionCHPData_GetExpressionResults},
{"affx_fusionc::FusionCHPData_GetGenotypingResults", _wrap_FusionCHPData_GetGenotypingResults},
{"affx_fusionc::FusionCHPData_GetUniversalResults", _wrap_FusionCHPData_GetUniversalResults},
{"affx_fusionc::FusionCHPData_Read", _wrap_FusionCHPData_Read},
{"affx_fusionc::FusionCHPData_ReadHeader", _wrap_FusionCHPData_ReadHeader},
{"affx_fusionc::FusionCHPData_Exists", _wrap_FusionCHPData_Exists},
{"affx_fusionc::FusionCHPData_SetFileName", _wrap_FusionCHPData_SetFileName},
{"affx_fusionc::FusionCHPData_GetFileName", _wrap_FusionCHPData_GetFileName},
{"affx_fusionc::FusionCHPData_Clear", _wrap_FusionCHPData_Clear},
{"affx_fusionc::FusionCHPData_CheckAdapter", _wrap_FusionCHPData_CheckAdapter},
{"affx_fusionc::FusionCHPData_CreateAdapter", _wrap_FusionCHPData_CreateAdapter},
{"affx_fusionc::FusionCHPData_DeleteAdapter", _wrap_FusionCHPData_DeleteAdapter},
{"affx_fusionc::FusionCHPData_GetHeader", _wrap_FusionCHPData_GetHeader},
{0,0}
};
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    
    SWIG_InitializeModule(0);
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__AffymetrixGuid, (void*) "affx_fusion::AffymetrixGuid");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__CheckSum, (void*) "affx_fusion::CheckSum");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__FPoint, (void*) "affx_fusion::FPoint");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__FRegion, (void*) "affx_fusion::FRegion");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__FRect, (void*) "affx_fusion::FRect");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__Point, (void*) "affx_fusion::Point");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__PointU16_t, (void*) "affx_fusion::PointU16_t");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__Region, (void*) "affx_fusion::Region");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__Rect, (void*) "affx_fusion::Rect");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__DateTime, (void*) "affx_fusion::DateTime");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__FileUtils, (void*) "affx_fusion::FileUtils");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__StringUtils, (void*) "affx_fusion::StringUtils");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_utilities__Subgrid, (void*) "affx_fusion::Subgrid");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__CalvinException, (void*) "affx_fusion::CalvinException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__NotImplementedException, (void*) "affx_fusion::NotImplementedException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__FormatException, (void*) "affx_fusion::FormatException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__ParameterMismatchException, (void*) "affx_fusion::ParameterMismatchException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedParameterException, (void*) "affx_fusion::UnexpectedParameterException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__OutOfRangeParameterException, (void*) "affx_fusion::OutOfRangeParameterException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValuePair, (void*) "affx_fusion::ParameterNameValuePair");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterNameValueControlVocabulary, (void*) "affx_fusion::ParameterNameValueControlVocabulary");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter___ParameterDataValue, (void*) "affx_fusion::ParameterDataValue");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter___tagParameterValue, (void*) "affx_fusion::ParameterValue");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter__MIMEValue, (void*) "affx_fusion::MIMEValue");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_parameter__ParameterNameValueType, (void*) "affx_fusion::ParameterNameValueType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_array__ArrayAttributes, (void*) "affx_fusion::ArrayAttributes");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_array__ArrayAuditEntry, (void*) "affx_fusion::ArrayAuditEntry");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_array__ArrayData, (void*) "affx_fusion::ArrayData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFData, (void*) "affx_fusion::CDFData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFProbeGroupInformation, (void*) "affx_fusion::CDFProbeGroupInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFProbeInformation, (void*) "affx_fusion::CDFProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFProbeSetInformation, (void*) "affx_fusion::CDFProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeInformation, (void*) "affx_fusion::CDFQCProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFQCProbeSetInformation, (void*) "affx_fusion::CDFQCProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPBackgroundZone, (void*) "affx_fusion::CHPBackgroundZone");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPData, (void*) "affx_fusion::CHPData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPExpressionEntry, (void*) "affx_fusion::CHPExpressionEntry");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPGenotypeEntry, (void*) "affx_fusion::CHPGenotypeEntry");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPUniversalEntry, (void*) "affx_fusion::CHPUniversalEntry");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__XYCoord, (void*) "affx_fusion::XYCoord");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CelFileData, (void*) "affx_fusion::CelFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__ColumnType, (void*) "affx_fusion::ColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__ByteColumnType, (void*) "affx_fusion::ByteColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__UByteColumnType, (void*) "affx_fusion::UByteColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__ShortColumnType, (void*) "affx_fusion::ShortColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__UShortColumnType, (void*) "affx_fusion::UShortColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__IntColumnType, (void*) "affx_fusion::IntColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__UIntColumnType, (void*) "affx_fusion::UIntColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__FloatColumnType, (void*) "affx_fusion::FloatColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__ASCIIColumnType, (void*) "affx_fusion::ASCIIColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__UnicodeColumnType, (void*) "affx_fusion::UnicodeColumnType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotOpenException, (void*) "affx_fusion::DataSetNotOpenException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__ColumnIndexOutOfBoundsException, (void*) "affx_fusion::ColumnIndexOutOfBoundsException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__RowIndexOutOfBoundsException, (void*) "affx_fusion::RowIndexOutOfBoundsException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__UnexpectedColumnTypeException, (void*) "affx_fusion::UnexpectedColumnTypeException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__DataGroupNotFoundException, (void*) "affx_fusion::DataGroupNotFoundException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__DataSetNotFoundException, (void*) "affx_fusion::DataSetNotFoundException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__ProbeSetNotFoundException, (void*) "affx_fusion::ProbeSetNotFoundException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__CDFAccessNotSupportedByModeException, (void*) "affx_fusion::CDFAccessNotSupportedByModeException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataGroup, (void*) "affx_fusion::DataGroup");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeader, (void*) "affx_fusion::DataGroupHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataSet, (void*) "affx_fusion::DataSet");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataSetHeader, (void*) "affx_fusion::DataSetHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__FileHeader, (void*) "affx_fusion::FileHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__GenericData, (void*) "affx_fusion::GenericData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeader, (void*) "affx_fusion::GenericDataHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__ArrayFileReader, (void*) "affx_fusion::ArrayFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__AuditFileReader, (void*) "affx_fusion::AuditFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CDFFileReader, (void*) "affx_fusion::CDFFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CHPFileReader, (void*) "affx_fusion::CHPFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__CelFileReader, (void*) "affx_fusion::CelFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataGroupHeaderReader, (void*) "affx_fusion::DataGroupHeaderReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataGroupReader, (void*) "affx_fusion::DataGroupReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataSetHeaderReader, (void*) "affx_fusion::DataSetHeaderReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__DataSetReader, (void*) "affx_fusion::DataSetReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotFoundException, (void*) "affx_fusion::FileNotFoundException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidVersionException, (void*) "affx_fusion::InvalidVersionException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__InvalidFileTypeException, (void*) "affx_fusion::InvalidFileTypeException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__UnableToOpenFileException, (void*) "affx_fusion::UnableToOpenFileException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_exceptions__FileNotOpenException, (void*) "affx_fusion::FileNotOpenException");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__FileHeaderReader, (void*) "affx_fusion::FileHeaderReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__FileInput, (void*) "affx_fusion::FileInput");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__GenericDataHeaderReader, (void*) "affx_fusion::GenericDataHeaderReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__GenericFileReader, (void*) "affx_fusion::GenericFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__GridControlFileReader, (void*) "affx_fusion::GridControlFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__TemplateFileReader, (void*) "affx_fusion::TemplateFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_io__TextFileReader, (void*) "affx_fusion::TextFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_calvin_array__TemplateData, (void*) "affx_fusion::TemplateData");
    SWIG_TypeClientData(SWIGTYPE_p__CoordinatePoint, (void*) "affx_fusion::CoordinatePoint");
    SWIG_TypeClientData(SWIGTYPE_p__GridCoordinatesType, (void*) "affx_fusion::GridCoordinatesType");
    SWIG_TypeClientData(SWIGTYPE_p__TagValuePairType, (void*) "affx_fusion::TagValuePairType");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFFileHeader, (void*) "affx_fusion::CCDFFileHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFProbeInformation, (void*) "affx_fusion::CCDFProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFProbeGroupInformation, (void*) "affx_fusion::CCDFProbeGroupInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFProbeSetInformation, (void*) "affx_fusion::CCDFProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFProbeSetNames, (void*) "affx_fusion::CCDFProbeSetNames");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFQCProbeInformation, (void*) "affx_fusion::CCDFQCProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFQCProbeSetInformation, (void*) "affx_fusion::CCDFQCProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affxcdf__CCDFFileData, (void*) "affx_fusion::CCDFFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxcel___CELFileEntryType, (void*) "affx_fusion::CELFileEntryType");
    SWIG_TypeClientData(SWIGTYPE_p_affxcel___CELFileTranscriptomeEntryType, (void*) "affx_fusion::CELFileTranscriptomeEntryType");
    SWIG_TypeClientData(SWIGTYPE_p_affxcel__CCELFileHeaderData, (void*) "affx_fusion::CCELFileHeaderData");
    SWIG_TypeClientData(SWIGTYPE_p_affxcel__CCELFileData, (void*) "affx_fusion::CCELFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp___BackgroundZoneType, (void*) "affx_fusion::BackgroundZoneType");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp___BackgroundZoneInfo, (void*) "affx_fusion::BackgroundZoneInfo");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CCHPFileHeader, (void*) "affx_fusion::CCHPFileHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CProbeSetResults, (void*) "affx_fusion::CProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CExpressionProbeSetResults, (void*) "affx_fusion::CExpressionProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CGenotypeProbeSetResults, (void*) "affx_fusion::CGenotypeProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CUniversalProbeSetResults, (void*) "affx_fusion::CUniversalProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp___ForceCallType, (void*) "affx_fusion::ForceCallType");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp___BaseCallType, (void*) "affx_fusion::BaseCallType");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CResequencingResults, (void*) "affx_fusion::CResequencingResults");
    SWIG_TypeClientData(SWIGTYPE_p_affxchp__CCHPFileData, (void*) "affx_fusion::CCHPFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxbar___BarSequenceResultData, (void*) "affx_fusion::BarSequenceResultData");
    SWIG_TypeClientData(SWIGTYPE_p_affxbar__CGDACSequenceResultItem, (void*) "affx_fusion::CGDACSequenceResultItem");
    SWIG_TypeClientData(SWIGTYPE_p_affxbar__CBARFileData, (void*) "affx_fusion::CBARFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxbpmap___GDACSequenceHitItemType, (void*) "affx_fusion::GDACSequenceHitItemType");
    SWIG_TypeClientData(SWIGTYPE_p_affxbpmap__CGDACSequenceItem, (void*) "affx_fusion::CGDACSequenceItem");
    SWIG_TypeClientData(SWIGTYPE_p_affxbpmap__CBPMAPFileData, (void*) "affx_fusion::CBPMAPFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxexp__CEXPFileData, (void*) "affx_fusion::CEXPFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxgrc__CGRCFileData, (void*) "affx_fusion::CGRCFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxmsk___ProbeSetIndiciesType, (void*) "affx_fusion::ProbeSetIndiciesType");
    SWIG_TypeClientData(SWIGTYPE_p_affxmsk__CMSKFileData, (void*) "affx_fusion::CMSKFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affxpsi___ProbeSetInfo, (void*) "affx_fusion::ProbeSetInfo");
    SWIG_TypeClientData(SWIGTYPE_p_affxpsi__CPSIFileData, (void*) "affx_fusion::CPSIFileData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_dttarray___AttributeNameValueType, (void*) "affx_fusion::AttributeNameValueType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_dttarray__DttArrayData, (void*) "affx_fusion::DttArrayData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_dttarray__DttArrayFileReader, (void*) "affx_fusion::DttArrayFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionTagValuePairType, (void*) "affx_fusion::FusionTagValuePairType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionArrayFileReader, (void*) "affx_fusion::FusionArrayFileReader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionProbeSetResults, (void*) "affx_fusion::FusionProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionExpressionProbeSetResults, (void*) "affx_fusion::FusionExpressionProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionGenotypeProbeSetResults, (void*) "affx_fusion::FusionGenotypeProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionUniversalProbeSetResults, (void*) "affx_fusion::FusionUniversalProbeSetResults");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFFileHeader, (void*) "affx_fusion::FusionCDFFileHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeInformation, (void*) "affx_fusion::FusionCDFProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeGroupInformation, (void*) "affx_fusion::FusionCDFProbeGroupInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFProbeSetInformation, (void*) "affx_fusion::FusionCDFProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeInformation, (void*) "affx_fusion::FusionCDFQCProbeInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetInformation, (void*) "affx_fusion::FusionCDFQCProbeSetInformation");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFData, (void*) "affx_fusion::FusionCDFData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCDFQCProbeSetNames, (void*) "affx_fusion::FusionCDFQCProbeSetNames");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCELData, (void*) "affx_fusion::FusionCELData");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCELFileEntryType, (void*) "affx_fusion::FusionCELFileEntryType");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__IFusionCELDataAdapter, (void*) "affx_fusion::IFusionCELDataAdapter");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPHeaderAdapter, (void*) "affx_fusion::IFusionCHPHeaderAdapter");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__IFusionCHPDataAdapter, (void*) "affx_fusion::IFusionCHPDataAdapter");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCHPHeader, (void*) "affx_fusion::FusionCHPHeader");
    SWIG_TypeClientData(SWIGTYPE_p_affymetrix_fusion_io__FusionCHPData, (void*) "affx_fusion::FusionCHPData");
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

