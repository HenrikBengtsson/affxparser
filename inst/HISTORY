Package: affxparser
===================

Version: 1.7.1 [2006-10-31]
o Updated to Fusion 1.0.8.

Version: 1.7.0 [2006-10-25]
o BUG FIX: writeCdf() would create an invalid CDF file if there were
  no QC units.  This would in turn make readCdfUnits() etc core dump.
o BUG FIX: Similar to get bug fix in the C code for readCelHeader(),
  much of the C-level code for CDF (and BPMAP) files assumes that the
  strings from Fusion SDK have a null terminator. At least for CDF 
  unit names, this is not necessarily the case.  To be on the safe
  side, for all retrieved Fusion SDK strings we now make sure there
  is a null terminator before converting it into an R string.
  Thanks to Ken Simpson at WEHI for all troubleshooting on this.  
o Because of the above bug fix, the ASCII mouse exon CDF can now be
  converted into a valid binary CDF.
o Made readCelUnits() a bit more clever if a 'cdf' structure with only
  cell indices is passed. Then all fields are just indices and one can
  call unlist immediately.  This speeds things up a bit.
o The devel version number was bumped up with the Bioconductor release.

Version: 1.6.0 [2006-10-03]
o The version number was bumped up with the Bioconductor release.

Version: 1.5.x [2006-09-21]
o Now the package passes R CMD check without warnings.
o BUG FIX: The C code for readCelHeader() did not allocate space for
  the string null terminator for the header elements that originates 
  from wide C++ string.  This caused readCelHeader() to contain 
  string elements with random characters at the end.
o BUG FIX: nrows and ncols were swapped in the CDF header when written
  by writeCdf(). This was missed because all tested CDFs were square.
o Added compareCdfs() to verify that a converted CDF is correct.
o Added convertCdf() utilizing the new writeCdf().
o Added trial version of createCel().
o Added trial version of updateCelUnits().

Version: 1.5.4 [2006-08-18]
o Updated Fusion SDK to version 1.0.7.
o BUG FIX: The new implementation of updateCel() utilizing raw vectors
  was not correct; extra zeros was written too.  The example code of
  updateCel reveals such errors much easier now.
o BUG FIX: updateCel() would in some cases give "Error: subscript out of 
  bounds" when writing the last chunk.

Version: 1.5.3 [2006-07-24]
o Improved the speed of updateCel() substantially by first working with
  raw vector in memory and then write binary data to file.  Data is also
  written in chunks (instead of all at once), to minimize the memory
  overhead of using raw vectors, which is especially important for
  the larger chips, e.g. 500K.
o Added functional prototype of updateCel() to *update* binary (v4) CEL 
  files.  Currently, the code does make use the Fusion SDK.  There is
  currently no writeCel() to create a CEL file from scratch.  However,
  with the auxillary function copyCel() one can copy an existing CEL 
  file and then update that one.  Thus, it is now possible to write,
  say, normalized probe intensities to a CEL file.  Note that this is
  only a first prototype and functions may change in a future release.

Version: 1.5.2 [2006-05-31]
o Updated Fusion SDK to version 1.0.6.

Version: 1.5.1 [2006-05-15]
o Updated Fusion SDK to version 1.0.5.
o BUG FIX; Made small changes to the SDK to allow it to compile 
  under Mac OS X with GCC-4.0.3 shipping with R-2.3.0
o Made changes to the Makevars, _Makefile and cmd_line scripts.

Version: 1.5.0 [2006-05-12]
o Cleaned up and restructured the help pages; several Rd pages are
  now made "internal" so they do not show up on the help index page.
  Instead they are accessable from within other help pages (if you
  browsing via HTML that is).  Added a help page on common terms.
o Added cdfOrderBy() and cdfOrderColumnsBy() for restructuring group
  fields in a CDF list structure.  Added cdfGetGroups() too.
o Added a bit more documentation on how to set the default CDF path.
o BUG FIX: On Linux 64-bit read CEL intensities would all be zero.
  This was due to compiler settings in the Fusion SDK package, which
  is circumvented by gcc compile it with a lower optimization level.
o BUG FIX: When argument 'cdf' was a CDF list structure with elements
  'type' or 'direction', readCelUnits() would not read the correct cells
  because the values of 'type' and 'direction' would be included in the
  extracted list of cell indices.

Version: 1.4.0 [2006-04-27]
o The stable version for Bioconductor 1.8.

Version: 1.3.3 [2006-04-15]
o Updated the Fusion SDK to version 1.0.5 (an unofficial release).
  It now works on Solaris.
o New method readCdfCellIndices(), which is a 5-10 times faster
  special-case implementation of readCdfUnits() to read cell 
  indices only.
o Now readCelUnits() sorts the cell indices before reading the
  data from each file.  This minimizes the amount of jumping around
  in the CEL files resulting in a speed-up of about 5-10 times.
o Renamed readCdfUnitsMap() to readCdfUnitsWriteMap().
o New method invertMap() for fast inversion of maps.
o KNOWN BUGS: The weird bug as in v1.3.2 remains with the new
  Fusion SDK, R v2.3.0 beta (2006-04-10 r37715) on WinXP.
  Internally readCdfCellIndices() replaces readCdfUnits(),
  but the error is still the same.

Version: 1.3.2 [2006-03-28]
o All cell and unit indices are now starting from one and not
  from zero.  This change requires that all code that have
  been using a previous version of this package have to be
  updated!
o Further optimization in speed and memory for most methods.
o New methods readCelRectangle() to read probe signals from a
  specify area of the chip.
o Added extensive help on cell coordinates and cell indices 
  as well read and write maps.
o KNOWN BUGS: At least on WinXP, heavy use of readCelUnits() 
  will sooner or later core dump R; it seems to be a memory 
  related from that occur when reading the CDF and extracting
  the name of the unit.  However, when "torturing" readCdfUnits() 
  the crash won't happen so it might be that readCel() does 
  something.  Have not tried on other platforms.

Version: 1.3.1
o
